{"version":3,"file":"createTokenWithMint.cjs","sources":["../../../../src/plugins/tokenModule/createTokenWithMint.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, Option, Task, TransactionBuilder } from '@/utils';\nimport { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { MintAuthorityMustBeSignerToMintInitialSupplyError } from './errors';\nimport { TokenWithMint } from './Token';\nimport type { TokenBuildersClient } from './TokenBuildersClient';\nimport type { TokenClient } from './TokenClient';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _createTokenWithMintClient(\n  this: TokenClient,\n  input: CreateTokenWithMintInput = {}\n): Task<CreateTokenWithMintOutput & { token: TokenWithMint }> {\n  return new Task(async (scope) => {\n    const operation = createTokenWithMintOperation(input);\n    const output = await this.metaplex.operations().execute(operation, scope);\n    scope.throwIfCanceled();\n    const token = await this.findTokenWithMintByMint({\n      mint: output.mintSigner.publicKey,\n      address: output.tokenAddress,\n      addressType: 'token',\n    }).run(scope);\n    return { ...output, token };\n  });\n}\n\n/** @internal */\nexport function _createTokenWithMintBuildersClient(\n  this: TokenBuildersClient,\n  input: CreateTokenWithMintBuilderParams\n) {\n  return createTokenWithMintBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateTokenWithMintOperation' as const;\nexport const createTokenWithMintOperation =\n  useOperation<CreateTokenWithMintOperation>(Key);\nexport type CreateTokenWithMintOperation = Operation<\n  typeof Key,\n  CreateTokenWithMintInput,\n  CreateTokenWithMintOutput\n>;\n\nexport type CreateTokenWithMintInput = {\n  decimals?: number; // Defaults to 0 decimals.\n  initialSupply?: SplTokenAmount; // Defaults to 0 tokens.\n  mint?: Signer; // Defaults to new generated Keypair.\n  mintAuthority?: Signer | PublicKey; // Defaults to mx.identity().\n  freezeAuthority?: Option<PublicKey>; // Defaults to mx.identity().\n  owner?: PublicKey; // Defaults to mx.identity().\n  token?: Signer; // Defaults to creating an associated token address instead.\n  payer?: Signer; // Defaults to mx.identity().\n  tokenProgram?: PublicKey; // Defaults to System Program.\n  associatedTokenProgram?: PublicKey; // Defaults to Associated Token Program.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateTokenWithMintOutput = {\n  response: SendAndConfirmTransactionResponse;\n  mintSigner: Signer;\n  tokenAddress: PublicKey;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createTokenWithMintOperationHandler: OperationHandler<CreateTokenWithMintOperation> =\n  {\n    async handle(\n      operation: CreateTokenWithMintOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateTokenWithMintOutput> {\n      const builder = await createTokenWithMintBuilder(\n        metaplex,\n        operation.input\n      );\n      scope.throwIfCanceled();\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateTokenWithMintBuilderParams = Omit<\n  CreateTokenWithMintInput,\n  'confirmOptions'\n> & {\n  createMintAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenAccountInstructionKey?: string;\n  createTokenAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n};\n\nexport type CreateTokenWithMintBuilderContext = Omit<\n  CreateTokenWithMintOutput,\n  'response'\n>;\n\nexport const createTokenWithMintBuilder = async (\n  metaplex: Metaplex,\n  params: CreateTokenWithMintBuilderParams\n): Promise<TransactionBuilder<CreateTokenWithMintBuilderContext>> => {\n  const {\n    decimals = 0,\n    initialSupply,\n    mint = Keypair.generate(),\n    mintAuthority = metaplex.identity(),\n    freezeAuthority = metaplex.identity().publicKey,\n    owner = metaplex.identity().publicKey,\n    token,\n    payer = metaplex.identity(),\n    tokenProgram,\n    associatedTokenProgram,\n  } = params;\n\n  const createMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createMint({\n      decimals,\n      mint,\n      payer,\n      mintAuthority: toPublicKey(mintAuthority),\n      freezeAuthority,\n      tokenProgram,\n      createAccountInstructionKey:\n        params.createMintAccountInstructionKey ?? 'createMintAccount',\n      initializeMintInstructionKey:\n        params.initializeMintInstructionKey ?? 'initializeMint',\n    });\n\n  const createTokenBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createToken({\n      mint: mint.publicKey,\n      owner,\n      token,\n      payer,\n      tokenProgram,\n      associatedTokenProgram,\n      createAssociatedTokenAccountInstructionKey:\n        params.createAssociatedTokenAccountInstructionKey ??\n        'createAssociatedTokenAccount',\n      createAccountInstructionKey:\n        params.createTokenAccountInstructionKey ?? 'createTokenAccount',\n      initializeTokenInstructionKey:\n        params.initializeTokenInstructionKey ?? 'initializeToken',\n    });\n\n  const { tokenAddress } = createTokenBuilder.getContext();\n\n  const builder = TransactionBuilder.make<CreateTokenWithMintBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({ mintSigner: mint, tokenAddress })\n\n    // Create the Mint account.\n    .add(createMintBuilder)\n\n    // Create the Token account.\n    .add(createTokenBuilder);\n\n  // Potentially mint the initial supply to the token account.\n  if (!!initialSupply) {\n    if (!isSigner(mintAuthority)) {\n      throw new MintAuthorityMustBeSignerToMintInitialSupplyError();\n    }\n\n    builder.add(\n      await metaplex\n        .tokens()\n        .builders()\n        .mint({\n          mint: mint.publicKey,\n          toToken: tokenAddress,\n          toTokenExists: true,\n          amount: initialSupply,\n          mintAuthority,\n          tokenProgram,\n          mintTokensInstructionKey:\n            params.mintTokensInstructionKey ?? 'mintTokens',\n        })\n    );\n  }\n\n  return builder;\n};\n"],"names":["_createTokenWithMintClient","input","Task","scope","operation","createTokenWithMintOperation","output","metaplex","operations","execute","throwIfCanceled","token","findTokenWithMintByMint","mint","mintSigner","publicKey","address","tokenAddress","addressType","run","_createTokenWithMintBuildersClient","createTokenWithMintBuilder","Key","useOperation","createTokenWithMintOperationHandler","handle","builder","sendAndConfirm","confirmOptions","params","decimals","initialSupply","Keypair","generate","mintAuthority","identity","freezeAuthority","owner","payer","tokenProgram","associatedTokenProgram","createMintBuilder","tokens","builders","createMint","toPublicKey","createAccountInstructionKey","createMintAccountInstructionKey","initializeMintInstructionKey","createTokenBuilder","createToken","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","getContext","TransactionBuilder","make","setFeePayer","setContext","add","isSigner","MintAuthorityMustBeSignerToMintInitialSupplyError","toToken","toTokenExists","amount","mintTokensInstructionKey"],"mappings":"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"}