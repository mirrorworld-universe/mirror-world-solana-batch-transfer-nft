{"version":3,"file":"freezeTokens.cjs","sources":["../../../../src/plugins/tokenModule/freezeTokens.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createFreezeAccountInstruction } from '@solana/spl-token';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findAssociatedTokenAccountPda } from './pdas';\nimport { TokenProgram } from './program';\nimport type { TokenBuildersClient } from './TokenBuildersClient';\nimport type { TokenClient } from './TokenClient';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _freezeTokensClient(\n  this: TokenClient,\n  input: FreezeTokensInput\n) {\n  return this.metaplex.operations().getTask(freezeTokensOperation(input));\n}\n\n/** @internal */\nexport function _freezeTokensBuildersClient(\n  this: TokenBuildersClient,\n  input: FreezeTokensBuilderParams\n) {\n  return freezeTokensBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FreezeTokensOperation' as const;\nexport const freezeTokensOperation = useOperation<FreezeTokensOperation>(Key);\nexport type FreezeTokensOperation = Operation<\n  typeof Key,\n  FreezeTokensInput,\n  FreezeTokensOutput\n>;\n\nexport type FreezeTokensInput = {\n  mintAddress: PublicKey;\n  freezeAuthority: PublicKey | Signer;\n  tokenOwner?: PublicKey; // Defaults to mx.identity().\n  tokenAddress?: PublicKey; // Defaults to associated account.\n  multiSigners?: KeypairSigner[]; // Defaults to [].\n  tokenProgram?: PublicKey; // Defaults to Token Program.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type FreezeTokensOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const freezeTokensOperationHandler: OperationHandler<FreezeTokensOperation> =\n  {\n    async handle(\n      operation: FreezeTokensOperation,\n      metaplex: Metaplex\n    ): Promise<FreezeTokensOutput> {\n      return freezeTokensBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      );\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type FreezeTokensBuilderParams = Omit<\n  FreezeTokensInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport const freezeTokensBuilder = (\n  metaplex: Metaplex,\n  params: FreezeTokensBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    tokenOwner = metaplex.identity().publicKey,\n    tokenAddress,\n    multiSigners = [],\n    freezeAuthority,\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  const [authorityPublicKey, signers] = isSigner(freezeAuthority)\n    ? [freezeAuthority.publicKey, [freezeAuthority]]\n    : [freezeAuthority, multiSigners];\n\n  const tokenAddressOrAta =\n    tokenAddress ?? findAssociatedTokenAccountPda(mintAddress, tokenOwner);\n\n  return TransactionBuilder.make().add({\n    instruction: createFreezeAccountInstruction(\n      tokenAddressOrAta,\n      mintAddress,\n      authorityPublicKey,\n      multiSigners,\n      tokenProgram\n    ),\n    signers,\n    key: params.instructionKey ?? 'freezeTokens',\n  });\n};\n"],"names":["_freezeTokensClient","input","metaplex","operations","getTask","freezeTokensOperation","_freezeTokensBuildersClient","freezeTokensBuilder","Key","useOperation","freezeTokensOperationHandler","handle","operation","sendAndConfirm","confirmOptions","params","mintAddress","tokenOwner","identity","publicKey","tokenAddress","multiSigners","freezeAuthority","tokenProgram","TokenProgram","authorityPublicKey","signers","isSigner","tokenAddressOrAta","findAssociatedTokenAccountPda","TransactionBuilder","make","add","instruction","createFreezeAccountInstruction","key","instructionKey"],"mappings":";;;;;;;;;;;AAkBA;AACA;AACA;;AAEA;AACO,SAASA,mBAAT,CAELC,KAFK,EAGL;EACA,OAAO,IAAA,CAAKC,QAAL,CAAcC,UAAd,EAAA,CAA2BC,OAA3B,CAAmCC,qBAAqB,CAACJ,KAAD,CAAxD,CAAP,CAAA;AACD,CAAA;AAED;;AACO,SAASK,2BAAT,CAELL,KAFK,EAGL;AACA,EAAA,OAAOM,mBAAmB,CAAC,IAAA,CAAKL,QAAN,EAAgBD,KAAhB,CAA1B,CAAA;AACD;AAGD;AACA;;AAEA,MAAMO,GAAG,GAAG,uBAAZ,CAAA;MACaH,qBAAqB,GAAGI,sBAAY,CAAwBD,GAAxB,EAA1C;AAqBP;AACA;AACA;AAEO,MAAME,4BAAqE,GAChF;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEV,QAFF,EAG+B;AAC7B,IAAA,OAAOK,mBAAmB,CAACL,QAAD,EAAWU,SAAS,CAACX,KAArB,CAAnB,CAA+CY,cAA/C,CACLX,QADK,EAELU,SAAS,CAACX,KAAV,CAAgBa,cAFX,CAAP,CAAA;AAID,GAAA;;AATH;AAaF;AACA;;MASaP,mBAAmB,GAAG,CACjCL,QADiC,EAEjCa,MAFiC,KAGV;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJC,WADI;AAEJC,IAAAA,UAAU,GAAGf,QAAQ,CAACgB,QAAT,GAAoBC,SAF7B;IAGJC,YAHI;AAIJC,IAAAA,YAAY,GAAG,EAJX;IAKJC,eALI;IAMJC,YAAY,GAAGC,oBAAY,CAACL,SAAAA;AANxB,GAAA,GAOFJ,MAPJ,CAAA;EASA,MAAM,CAACU,kBAAD,EAAqBC,OAArB,CAAA,GAAgCC,eAAQ,CAACL,eAAD,CAAR,GAClC,CAACA,eAAe,CAACH,SAAjB,EAA4B,CAACG,eAAD,CAA5B,CADkC,GAElC,CAACA,eAAD,EAAkBD,YAAlB,CAFJ,CAAA;AAIA,EAAA,MAAMO,iBAAiB,GACrBR,YADqB,KAAA,IAAA,IACrBA,YADqB,KAAA,KAAA,CAAA,GACrBA,YADqB,GACLS,kCAA6B,CAACb,WAAD,EAAcC,UAAd,CAD/C,CAAA;AAGA,EAAA,OAAOa,qCAAkB,CAACC,IAAnB,EAAA,CAA0BC,GAA1B,CAA8B;AACnCC,IAAAA,WAAW,EAAEC,uCAA8B,CACzCN,iBADyC,EAEzCZ,WAFyC,EAGzCS,kBAHyC,EAIzCJ,YAJyC,EAKzCE,YALyC,CADR;IAQnCG,OARmC;AASnCS,IAAAA,GAAG,EAAEpB,CAAAA,qBAAAA,GAAAA,MAAM,CAACqB,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,cAAA;AATK,GAA9B,CAAP,CAAA;AAWD;;;;;;;;"}