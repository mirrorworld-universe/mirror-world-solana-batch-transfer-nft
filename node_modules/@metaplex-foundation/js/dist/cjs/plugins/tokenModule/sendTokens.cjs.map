{"version":3,"file":"sendTokens.cjs","sources":["../../../../src/plugins/tokenModule/sendTokens.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createTransferCheckedInstruction } from '@solana/spl-token';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { isMint, Mint } from './Mint';\nimport { findAssociatedTokenAccountPda } from './pdas';\nimport { TokenProgram } from './program';\nimport type { TokenClient } from './TokenClient';\nimport type { TokenBuildersClient } from './TokenBuildersClient';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _sendTokensClient(this: TokenClient, input: SendTokensInput) {\n  return this.metaplex.operations().getTask(sendTokensOperation(input));\n}\n\n/** @internal */\nexport function _sendTokensBuildersClient(\n  this: TokenBuildersClient,\n  input: SendTokensBuilderParams\n) {\n  return sendTokensBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'SendTokensOperation' as const;\nexport const sendTokensOperation = useOperation<SendTokensOperation>(Key);\nexport type SendTokensOperation = Operation<\n  typeof Key,\n  SendTokensInput,\n  SendTokensOutput\n>;\n\nexport type SendTokensInput = {\n  mint: PublicKey | Mint;\n  amount: SplTokenAmount;\n  toOwner?: PublicKey; // Defaults to mx.identity().\n  toToken?: PublicKey | Signer; // If provided and token does not exist, it will create that account for you, hence the need for a Signer. Defaults to associated account.\n  fromOwner?: PublicKey | Signer; // Defaults to mx.identity().\n  fromToken?: PublicKey; // Defaults to associated account.\n  fromMultiSigners?: KeypairSigner[]; // Defaults to [].\n  delegateAuthority?: Signer; // Defaults to not using a delegate authority.\n  payer?: Signer; // Only used to create missing token accounts. Defaults to mx.identity().\n  tokenProgram?: PublicKey; // Defaults to Token Program.\n  associatedTokenProgram?: PublicKey; // Defaults to Associated Token Program.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type SendTokensOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const sendTokensOperationHandler: OperationHandler<SendTokensOperation> =\n  {\n    async handle(\n      operation: SendTokensOperation,\n      metaplex: Metaplex\n    ): Promise<SendTokensOutput> {\n      const builder = await sendTokensBuilder(metaplex, operation.input);\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type SendTokensBuilderParams = Omit<\n  SendTokensInput,\n  'confirmOptions'\n> & {\n  toTokenExists?: boolean; // Defaults to false.\n  createAssociatedTokenAccountInstructionKey?: string;\n  createAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  transferTokensInstructionKey?: string;\n};\n\nexport const sendTokensBuilder = async (\n  metaplex: Metaplex,\n  params: SendTokensBuilderParams\n): Promise<TransactionBuilder> => {\n  const {\n    mint,\n    amount,\n    toOwner = metaplex.identity().publicKey,\n    toToken,\n    fromOwner = metaplex.identity(),\n    fromToken,\n    fromMultiSigners = [],\n    delegateAuthority,\n    payer = metaplex.identity(),\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  const [fromOwnerPublicKey, signers] = isSigner(fromOwner)\n    ? [fromOwner.publicKey, [fromOwner]]\n    : [fromOwner, [delegateAuthority, ...fromMultiSigners].filter(isSigner)];\n\n  const mintAddress = isMint(mint) ? mint.address : mint;\n  const decimals = isMint(mint) ? mint.decimals : amount.currency.decimals;\n  const source =\n    fromToken ?? findAssociatedTokenAccountPda(mintAddress, fromOwnerPublicKey);\n  const destination =\n    toToken ?? findAssociatedTokenAccountPda(mintAddress, toOwner);\n\n  let createTokenIfMissingBuilder = TransactionBuilder.make();\n  if (!(params.toTokenExists ?? false)) {\n    createTokenIfMissingBuilder = await metaplex\n      .tokens()\n      .builders()\n      .createTokenIfMissing({\n        ...params,\n        mint: mintAddress,\n        owner: toOwner,\n        token: toToken,\n        payer,\n        tokenVariable: 'toToken',\n      });\n  }\n\n  return (\n    TransactionBuilder.make()\n\n      // Create token account if missing.\n      .add(createTokenIfMissingBuilder)\n\n      // Transfer tokens.\n      .add({\n        instruction: createTransferCheckedInstruction(\n          source,\n          mintAddress,\n          toPublicKey(destination),\n          delegateAuthority ? delegateAuthority.publicKey : fromOwnerPublicKey,\n          amount.basisPoints.toNumber(),\n          decimals,\n          fromMultiSigners,\n          tokenProgram\n        ),\n        signers,\n        key: params.transferTokensInstructionKey ?? 'transferTokens',\n      })\n  );\n};\n"],"names":["_sendTokensClient","input","metaplex","operations","getTask","sendTokensOperation","_sendTokensBuildersClient","sendTokensBuilder","Key","useOperation","sendTokensOperationHandler","handle","operation","builder","sendAndConfirm","confirmOptions","params","mint","amount","toOwner","identity","publicKey","toToken","fromOwner","fromToken","fromMultiSigners","delegateAuthority","payer","tokenProgram","TokenProgram","fromOwnerPublicKey","signers","isSigner","filter","mintAddress","isMint","address","decimals","currency","source","findAssociatedTokenAccountPda","destination","createTokenIfMissingBuilder","TransactionBuilder","make","toTokenExists","tokens","builders","createTokenIfMissing","owner","token","tokenVariable","add","instruction","createTransferCheckedInstruction","toPublicKey","basisPoints","toNumber","key","transferTokensInstructionKey"],"mappings":"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"}