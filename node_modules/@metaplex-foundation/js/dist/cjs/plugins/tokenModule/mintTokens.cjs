'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var splToken = require('@solana/spl-token');
var Mint = require('./Mint.cjs');
var program = require('./program.cjs');
var pdas = require('./pdas.cjs');
var Operation = require('../../types/Operation.cjs');
var Signer = require('../../types/Signer.cjs');
var TransactionBuilder = require('../../utils/TransactionBuilder.cjs');
var PublicKey = require('../../types/PublicKey.cjs');

// -----------------
// Clients
// -----------------

/** @internal */
function _mintTokensClient(input) {
  return this.metaplex.operations().getTask(mintTokensOperation(input));
}
/** @internal */

function _mintTokensBuildersClient(input) {
  return mintTokensBuilder(this.metaplex, input);
} // -----------------
// Operation
// -----------------

const Key = 'MintTokensOperation';
const mintTokensOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const mintTokensOperationHandler = {
  async handle(operation, metaplex) {
    const builder = await mintTokensBuilder(metaplex, operation.input);
    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);
  }

}; // -----------------
// Builder
// -----------------

const mintTokensBuilder = async (metaplex, params) => {
  var _params$toTokenExists, _params$mintTokensIns;

  const {
    mint,
    amount,
    toOwner = metaplex.identity().publicKey,
    toToken,
    mintAuthority = metaplex.identity(),
    multiSigners = [],
    payer = metaplex.identity(),
    tokenProgram = program.TokenProgram.publicKey
  } = params;
  const [mintAuthorityPublicKey, signers] = Signer.isSigner(mintAuthority) ? [mintAuthority.publicKey, [mintAuthority]] : [mintAuthority, multiSigners];
  const mintAddress = Mint.isMint(mint) ? mint.address : mint;
  const destination = toToken !== null && toToken !== void 0 ? toToken : pdas.findAssociatedTokenAccountPda(mintAddress, toOwner);
  return TransactionBuilder.TransactionBuilder.make() // Create token account if missing.
  .add(!((_params$toTokenExists = params.toTokenExists) !== null && _params$toTokenExists !== void 0 ? _params$toTokenExists : false) ? await metaplex.tokens().builders().createTokenIfMissing({ ...params,
    mint: mintAddress,
    owner: toOwner,
    token: toToken,
    payer,
    tokenVariable: 'toToken'
  }) : TransactionBuilder.TransactionBuilder.make()) // Mint tokens.
  .add({
    instruction: splToken.createMintToInstruction(mintAddress, PublicKey.toPublicKey(destination), mintAuthorityPublicKey, amount.basisPoints.toNumber(), multiSigners, tokenProgram),
    signers,
    key: (_params$mintTokensIns = params.mintTokensInstructionKey) !== null && _params$mintTokensIns !== void 0 ? _params$mintTokensIns : 'mintTokens'
  });
};

exports._mintTokensBuildersClient = _mintTokensBuildersClient;
exports._mintTokensClient = _mintTokensClient;
exports.mintTokensBuilder = mintTokensBuilder;
exports.mintTokensOperation = mintTokensOperation;
exports.mintTokensOperationHandler = mintTokensOperationHandler;
//# sourceMappingURL=mintTokens.cjs.map
