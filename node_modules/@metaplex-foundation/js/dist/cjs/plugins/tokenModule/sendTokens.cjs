'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var splToken = require('@solana/spl-token');
var Mint = require('./Mint.cjs');
var pdas = require('./pdas.cjs');
var program = require('./program.cjs');
var Operation = require('../../types/Operation.cjs');
var Signer = require('../../types/Signer.cjs');
var TransactionBuilder = require('../../utils/TransactionBuilder.cjs');
var PublicKey = require('../../types/PublicKey.cjs');

// -----------------
// Clients
// -----------------

/** @internal */
function _sendTokensClient(input) {
  return this.metaplex.operations().getTask(sendTokensOperation(input));
}
/** @internal */

function _sendTokensBuildersClient(input) {
  return sendTokensBuilder(this.metaplex, input);
} // -----------------
// Operation
// -----------------

const Key = 'SendTokensOperation';
const sendTokensOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const sendTokensOperationHandler = {
  async handle(operation, metaplex) {
    const builder = await sendTokensBuilder(metaplex, operation.input);
    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);
  }

}; // -----------------
// Builder
// -----------------

const sendTokensBuilder = async (metaplex, params) => {
  var _params$toTokenExists, _params$transferToken;

  const {
    mint,
    amount,
    toOwner = metaplex.identity().publicKey,
    toToken,
    fromOwner = metaplex.identity(),
    fromToken,
    fromMultiSigners = [],
    delegateAuthority,
    payer = metaplex.identity(),
    tokenProgram = program.TokenProgram.publicKey
  } = params;
  const [fromOwnerPublicKey, signers] = Signer.isSigner(fromOwner) ? [fromOwner.publicKey, [fromOwner]] : [fromOwner, [delegateAuthority, ...fromMultiSigners].filter(Signer.isSigner)];
  const mintAddress = Mint.isMint(mint) ? mint.address : mint;
  const decimals = Mint.isMint(mint) ? mint.decimals : amount.currency.decimals;
  const source = fromToken !== null && fromToken !== void 0 ? fromToken : pdas.findAssociatedTokenAccountPda(mintAddress, fromOwnerPublicKey);
  const destination = toToken !== null && toToken !== void 0 ? toToken : pdas.findAssociatedTokenAccountPda(mintAddress, toOwner);
  let createTokenIfMissingBuilder = TransactionBuilder.TransactionBuilder.make();

  if (!((_params$toTokenExists = params.toTokenExists) !== null && _params$toTokenExists !== void 0 ? _params$toTokenExists : false)) {
    createTokenIfMissingBuilder = await metaplex.tokens().builders().createTokenIfMissing({ ...params,
      mint: mintAddress,
      owner: toOwner,
      token: toToken,
      payer,
      tokenVariable: 'toToken'
    });
  }

  return TransactionBuilder.TransactionBuilder.make() // Create token account if missing.
  .add(createTokenIfMissingBuilder) // Transfer tokens.
  .add({
    instruction: splToken.createTransferCheckedInstruction(source, mintAddress, PublicKey.toPublicKey(destination), delegateAuthority ? delegateAuthority.publicKey : fromOwnerPublicKey, amount.basisPoints.toNumber(), decimals, fromMultiSigners, tokenProgram),
    signers,
    key: (_params$transferToken = params.transferTokensInstructionKey) !== null && _params$transferToken !== void 0 ? _params$transferToken : 'transferTokens'
  });
};

exports._sendTokensBuildersClient = _sendTokensBuildersClient;
exports._sendTokensClient = _sendTokensClient;
exports.sendTokensBuilder = sendTokensBuilder;
exports.sendTokensOperation = sendTokensOperation;
exports.sendTokensOperationHandler = sendTokensOperationHandler;
//# sourceMappingURL=sendTokens.cjs.map
