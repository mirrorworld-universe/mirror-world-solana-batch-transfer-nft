'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var splToken = require('@solana/spl-token');
var pdas = require('./pdas.cjs');
var program = require('./program.cjs');
var Operation = require('../../types/Operation.cjs');
var Signer = require('../../types/Signer.cjs');
var TransactionBuilder = require('../../utils/TransactionBuilder.cjs');

// -----------------
// Clients
// -----------------

/** @internal */
function _revokeTokenDelegateAuthorityClient(input) {
  return this.metaplex.operations().getTask(revokeTokenDelegateAuthorityOperation(input));
}
/** @internal */

function _revokeTokenDelegateAuthorityBuildersClient(input) {
  return revokeTokenDelegateAuthorityBuilder(this.metaplex, input);
} // -----------------
// Operation
// -----------------

const Key = 'RevokeTokenDelegateAuthorityOperation';
const revokeTokenDelegateAuthorityOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const revokeTokenDelegateAuthorityOperationHandler = {
  handle: async (operation, metaplex) => {
    return revokeTokenDelegateAuthorityBuilder(metaplex, operation.input).sendAndConfirm(metaplex, operation.input.confirmOptions);
  }
}; // -----------------
// Builder
// -----------------

const revokeTokenDelegateAuthorityBuilder = (metaplex, params) => {
  var _params$instructionKe;

  const {
    mintAddress,
    owner = metaplex.identity(),
    tokenAddress,
    multiSigners = [],
    tokenProgram = program.TokenProgram.publicKey
  } = params;
  const [ownerPublicKey, signers] = Signer.isSigner(owner) ? [owner.publicKey, [owner]] : [owner, multiSigners];
  const tokenAccount = tokenAddress !== null && tokenAddress !== void 0 ? tokenAddress : pdas.findAssociatedTokenAccountPda(mintAddress, ownerPublicKey);
  return TransactionBuilder.TransactionBuilder.make().add({
    instruction: splToken.createRevokeInstruction(tokenAccount, ownerPublicKey, multiSigners, tokenProgram),
    signers,
    key: (_params$instructionKe = params.instructionKey) !== null && _params$instructionKe !== void 0 ? _params$instructionKe : 'revokeDelegateAuthority'
  });
};

exports._revokeTokenDelegateAuthorityBuildersClient = _revokeTokenDelegateAuthorityBuildersClient;
exports._revokeTokenDelegateAuthorityClient = _revokeTokenDelegateAuthorityClient;
exports.revokeTokenDelegateAuthorityBuilder = revokeTokenDelegateAuthorityBuilder;
exports.revokeTokenDelegateAuthorityOperation = revokeTokenDelegateAuthorityOperation;
exports.revokeTokenDelegateAuthorityOperationHandler = revokeTokenDelegateAuthorityOperationHandler;
//# sourceMappingURL=revokeTokenDelegateAuthority.cjs.map
