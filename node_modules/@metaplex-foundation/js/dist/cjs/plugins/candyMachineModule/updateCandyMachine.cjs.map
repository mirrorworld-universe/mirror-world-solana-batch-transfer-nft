{"version":3,"file":"updateCandyMachine.cjs","sources":["../../../../src/plugins/candyMachineModule/updateCandyMachine.ts"],"sourcesContent":["import isEqual from 'lodash.isequal';\nimport type { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport {\n  createRemoveCollectionInstruction,\n  createSetCollectionInstruction,\n  createUpdateAuthorityInstruction,\n  createUpdateCandyMachineInstruction,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport {\n  assertSameCurrencies,\n  Operation,\n  OperationHandler,\n  Signer,\n  SOL,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { Option, TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport {\n  CandyMachine,\n  CandyMachineConfigs,\n  toCandyMachineConfigs,\n  toCandyMachineInstructionData,\n} from './CandyMachine';\nimport { NoInstructionsToSendError } from '@/errors';\nimport {\n  findCollectionAuthorityRecordPda,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n  TokenMetadataProgram,\n} from '../nftModule';\nimport { findCandyMachineCollectionPda } from './pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateCandyMachineOperation' as const;\nexport const updateCandyMachineOperation =\n  useOperation<UpdateCandyMachineOperation>(Key);\nexport type UpdateCandyMachineOperation = Operation<\n  typeof Key,\n  UpdateCandyMachineInput,\n  UpdateCandyMachineOutput\n>;\n\nexport type UpdateCandyMachineInputWithoutConfigs = {\n  // Models and accounts.\n  candyMachine: CandyMachine;\n  authority?: Signer; // Defaults to mx.identity().\n  payer?: Signer; // Defaults to mx.identity().\n  newAuthority?: PublicKey;\n  newCollection?: Option<PublicKey>;\n\n  // Transaction Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type UpdateCandyMachineInput = UpdateCandyMachineInputWithoutConfigs &\n  Partial<CandyMachineConfigs>;\n\nexport type UpdateCandyMachineOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const updateCandyMachineOperationHandler: OperationHandler<UpdateCandyMachineOperation> =\n  {\n    async handle(\n      operation: UpdateCandyMachineOperation,\n      metaplex: Metaplex\n    ): Promise<UpdateCandyMachineOutput> {\n      const builder = updateCandyMachineBuilder(metaplex, operation.input);\n\n      if (builder.isEmpty()) {\n        throw new NoInstructionsToSendError(Key);\n      }\n\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type UpdateCandyMachineBuilderParams = Omit<\n  UpdateCandyMachineInput,\n  'confirmOptions'\n> & {\n  updateInstructionKey?: string;\n  updateAuthorityInstructionKey?: string;\n  setCollectionInstructionKey?: string;\n  removeCollectionInstructionKey?: string;\n};\n\nexport const updateCandyMachineBuilder = (\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams\n): TransactionBuilder => {\n  const {\n    candyMachine,\n    authority = metaplex.identity(),\n    payer = metaplex.identity(),\n    newAuthority,\n    newCollection,\n    ...updatableFields\n  } = params;\n  const currentConfigs = toCandyMachineConfigs(candyMachine);\n  const instructionDataWithoutChanges = toCandyMachineInstructionData(\n    candyMachine.address,\n    currentConfigs\n  );\n  const instructionData = toCandyMachineInstructionData(candyMachine.address, {\n    ...currentConfigs,\n    ...updatableFields,\n  });\n  const { data, wallet, tokenMint } = instructionData;\n  const shouldSendUpdateInstruction = !isEqual(\n    instructionData,\n    instructionDataWithoutChanges\n  );\n  const shouldSendUpdateAuthorityInstruction =\n    !!newAuthority && !newAuthority.equals(authority.publicKey);\n\n  const sameCollection =\n    newCollection &&\n    candyMachine.collectionMintAddress &&\n    candyMachine.collectionMintAddress.equals(newCollection);\n  const shouldSendSetCollectionInstruction = !!newCollection && !sameCollection;\n  const shouldSendRemoveCollectionInstruction =\n    !shouldSendSetCollectionInstruction &&\n    newCollection === null &&\n    candyMachine.collectionMintAddress !== null;\n\n  const updateInstruction = createUpdateCandyMachineInstruction(\n    {\n      candyMachine: candyMachine.address,\n      authority: authority.publicKey,\n      wallet,\n    },\n    { data }\n  );\n\n  if (tokenMint) {\n    updateInstruction.keys.push({\n      pubkey: tokenMint,\n      isWritable: false,\n      isSigner: false,\n    });\n  } else if (params.price) {\n    assertSameCurrencies(params.price, SOL);\n  }\n\n  return (\n    TransactionBuilder.make()\n\n      // Update data.\n      .when(shouldSendUpdateInstruction, (builder) =>\n        builder.add({\n          instruction: updateInstruction,\n          signers: [authority],\n          key: params.updateInstructionKey ?? 'update',\n        })\n      )\n\n      // Update authority.\n      .when(shouldSendUpdateAuthorityInstruction, (builder) =>\n        builder.add({\n          instruction: createUpdateAuthorityInstruction(\n            {\n              candyMachine: candyMachine.address,\n              authority: authority.publicKey,\n              wallet: candyMachine.walletAddress,\n            },\n            { newAuthority: newAuthority as PublicKey }\n          ),\n          signers: [authority],\n          key: params.updateAuthorityInstructionKey ?? 'updateAuthority',\n        })\n      )\n\n      // Set or update collection.\n      .when(shouldSendSetCollectionInstruction, (builder) => {\n        const collectionMint = newCollection as PublicKey;\n        const metadata = findMetadataPda(collectionMint);\n        const edition = findMasterEditionV2Pda(collectionMint);\n        const collectionPda = findCandyMachineCollectionPda(\n          candyMachine.address\n        );\n        const collectionAuthorityRecord = findCollectionAuthorityRecordPda(\n          collectionMint,\n          collectionPda\n        );\n\n        return builder.add({\n          instruction: createSetCollectionInstruction({\n            candyMachine: candyMachine.address,\n            authority: authority.publicKey,\n            collectionPda,\n            payer: payer.publicKey,\n            metadata,\n            mint: collectionMint,\n            edition,\n            collectionAuthorityRecord,\n            tokenMetadataProgram: TokenMetadataProgram.publicKey,\n          }),\n          signers: [payer, authority],\n          key: params.setCollectionInstructionKey ?? 'setCollection',\n        });\n      })\n\n      // Remove collection.\n      .when(shouldSendRemoveCollectionInstruction, (builder) => {\n        const collectionMint = candyMachine.collectionMintAddress as PublicKey;\n        const metadata = findMetadataPda(collectionMint);\n        const collectionPda = findCandyMachineCollectionPda(\n          candyMachine.address\n        );\n        const collectionAuthorityRecord = findCollectionAuthorityRecordPda(\n          collectionMint,\n          collectionPda\n        );\n\n        return builder.add({\n          instruction: createRemoveCollectionInstruction({\n            candyMachine: candyMachine.address,\n            authority: authority.publicKey,\n            collectionPda,\n            metadata,\n            mint: collectionMint,\n            collectionAuthorityRecord,\n            tokenMetadataProgram: TokenMetadataProgram.publicKey,\n          }),\n          signers: [authority],\n          key: params.removeCollectionInstructionKey ?? 'removeCollection',\n        });\n      })\n  );\n};\n"],"names":["Key","updateCandyMachineOperation","useOperation","updateCandyMachineOperationHandler","handle","operation","metaplex","builder","updateCandyMachineBuilder","input","isEmpty","NoInstructionsToSendError","sendAndConfirm","confirmOptions","params","candyMachine","authority","identity","payer","newAuthority","newCollection","updatableFields","currentConfigs","toCandyMachineConfigs","instructionDataWithoutChanges","toCandyMachineInstructionData","address","instructionData","data","wallet","tokenMint","shouldSendUpdateInstruction","isEqual","shouldSendUpdateAuthorityInstruction","equals","publicKey","sameCollection","collectionMintAddress","shouldSendSetCollectionInstruction","shouldSendRemoveCollectionInstruction","updateInstruction","createUpdateCandyMachineInstruction","keys","push","pubkey","isWritable","isSigner","price","assertSameCurrencies","SOL","TransactionBuilder","make","when","add","instruction","signers","key","updateInstructionKey","createUpdateAuthorityInstruction","walletAddress","updateAuthorityInstructionKey","collectionMint","metadata","findMetadataPda","edition","findMasterEditionV2Pda","collectionPda","findCandyMachineCollectionPda","collectionAuthorityRecord","findCollectionAuthorityRecordPda","createSetCollectionInstruction","mint","tokenMetadataProgram","TokenMetadataProgram","setCollectionInstructionKey","createRemoveCollectionInstruction","removeCollectionInstructionKey"],"mappings":"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"}