'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplTokenMetadata = require('@metaplex-foundation/mpl-token-metadata');
var web3_js = require('@solana/web3.js');
var Nft = require('./Nft.cjs');
var pdas = require('./pdas.cjs');
var Task = require('../../utils/Task.cjs');
var Operation = require('../../types/Operation.cjs');
var Amount = require('../../types/Amount.cjs');
var TransactionBuilder = require('../../utils/TransactionBuilder.cjs');

// Clients
// -----------------

/** @internal */

function _createNftClient(input) {
  return new Task.Task(async scope => {
    const operation = createNftOperation(input);
    const output = await this.metaplex.operations().execute(operation, scope);
    scope.throwIfCanceled();
    const nft = await this.findByMint(output.mintAddress, {
      tokenAddress: output.tokenAddress
    }).run(scope);
    Nft.assertNftWithToken(nft);
    return { ...output,
      nft
    };
  });
}
/** @internal */

function _createNftBuildersClient(input) {
  return createNftBuilder(this.metaplex, input);
} // -----------------
// Operation
// -----------------

const Key = 'CreateNftOperation';
const createNftOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const createNftOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const builder = await createNftBuilder(metaplex, operation.input);
    scope.throwIfCanceled();
    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);
  }
}; // -----------------
// Builder
// -----------------

const createNftBuilder = async (metaplex, params) => {
  var _params$createMasterE;

  const {
    useNewMint = web3_js.Keypair.generate(),
    payer = metaplex.identity(),
    updateAuthority = metaplex.identity(),
    mintAuthority = metaplex.identity(),
    tokenOwner = metaplex.identity().publicKey
  } = params;
  const sftBuilder = await metaplex.nfts().builders().createSft({ ...params,
    payer,
    updateAuthority,
    mintAuthority,
    freezeAuthority: mintAuthority.publicKey,
    useNewMint,
    tokenOwner,
    tokenAmount: Amount.token(1),
    decimals: 0
  });
  const {
    mintAddress,
    metadataAddress,
    tokenAddress
  } = sftBuilder.getContext();
  const masterEditionAddress = pdas.findMasterEditionV2Pda(mintAddress);
  return TransactionBuilder.TransactionBuilder.make().setFeePayer(payer).setContext({
    mintAddress,
    metadataAddress,
    masterEditionAddress,
    tokenAddress: tokenAddress
  }) // Create the mint, the token and the metadata.
  .add(sftBuilder) // Create master edition account (prevents further minting).
  .add({
    instruction: mplTokenMetadata.createCreateMasterEditionV3Instruction({
      edition: masterEditionAddress,
      mint: mintAddress,
      updateAuthority: updateAuthority.publicKey,
      mintAuthority: mintAuthority.publicKey,
      payer: payer.publicKey,
      metadata: metadataAddress
    }, {
      createMasterEditionArgs: {
        maxSupply: params.maxSupply === undefined ? 0 : params.maxSupply
      }
    }),
    signers: [payer, mintAuthority, updateAuthority],
    key: (_params$createMasterE = params.createMasterEditionInstructionKey) !== null && _params$createMasterE !== void 0 ? _params$createMasterE : 'createMasterEdition'
  });
};

exports._createNftBuildersClient = _createNftBuildersClient;
exports._createNftClient = _createNftClient;
exports.createNftBuilder = createNftBuilder;
exports.createNftOperation = createNftOperation;
exports.createNftOperationHandler = createNftOperationHandler;
//# sourceMappingURL=createNft.cjs.map
