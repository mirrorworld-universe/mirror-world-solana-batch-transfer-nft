{"version":3,"file":"verifyNftCollection.cjs","sources":["../../../../src/plugins/nftModule/verifyNftCollection.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { Task, TransactionBuilder } from '@/utils';\nimport {\n  createVerifyCollectionInstruction,\n  createVerifySizedCollectionItemInstruction,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { toMetadataAccount } from './accounts';\nimport { ParentCollectionMissingError } from './errors';\nimport { HasMintAddress, toMintAddress } from './helpers';\nimport { toMetadata } from './Metadata';\nimport type { NftBuildersClient } from './NftBuildersClient';\nimport type { NftClient } from './NftClient';\nimport {\n  findCollectionAuthorityRecordPda,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n} from './pdas';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _verifyNftCollectionClient(\n  this: NftClient,\n  nftOrSft: HasMintAddress,\n  input: Partial<Omit<VerifyNftCollectionInput, 'mintAddress'>> = {}\n) {\n  return new Task(async (scope) => {\n    const mintAddress = toMintAddress(nftOrSft);\n    const collectionFromNft =\n      'collection' in nftOrSft && nftOrSft.collection\n        ? nftOrSft.collection.address\n        : undefined;\n    let collectionMintAddress =\n      input.collectionMintAddress ?? collectionFromNft;\n\n    if (!('collection' in nftOrSft) && !collectionMintAddress) {\n      const metadataAddress = findMetadataPda(mintAddress);\n      const metadata = toMetadata(\n        toMetadataAccount(await this.metaplex.rpc().getAccount(metadataAddress))\n      );\n      scope.throwIfCanceled();\n      collectionMintAddress = metadata.collection\n        ? metadata.collection.address\n        : undefined;\n    }\n\n    if (!collectionMintAddress) {\n      throw new ParentCollectionMissingError(mintAddress, 'verifyCollection');\n    }\n\n    return this.metaplex.operations().execute(\n      verifyNftCollectionOperation({\n        ...input,\n        mintAddress,\n        collectionMintAddress,\n      }),\n      scope\n    );\n  });\n}\n\n/** @internal */\nexport function _verifyNftCollectionBuildersClient(\n  this: NftBuildersClient,\n  input: VerifyNftCollectionBuilderParams\n) {\n  return verifyNftCollectionBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'VerifyNftCollectionOperation' as const;\nexport const verifyNftCollectionOperation =\n  useOperation<VerifyNftCollectionOperation>(Key);\nexport type VerifyNftCollectionOperation = Operation<\n  typeof Key,\n  VerifyNftCollectionInput,\n  VerifyNftCollectionOutput\n>;\n\nexport interface VerifyNftCollectionInput {\n  // Accounts and models.\n  mintAddress: PublicKey;\n  collectionMintAddress: PublicKey;\n  collectionAuthority?: Signer; // Defaults to mx.identity().\n  payer?: Signer; // Defaults to mx.identity().\n\n  // Data.\n  isSizedCollection?: boolean; // Defaults to true.\n  isDelegated?: boolean; // Defaults to false.\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface VerifyNftCollectionOutput {\n  response: SendAndConfirmTransactionResponse;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const verifyNftCollectionOperationHandler: OperationHandler<VerifyNftCollectionOperation> =\n  {\n    handle: async (\n      operation: VerifyNftCollectionOperation,\n      metaplex: Metaplex\n    ): Promise<VerifyNftCollectionOutput> => {\n      return verifyNftCollectionBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type VerifyNftCollectionBuilderParams = Omit<\n  VerifyNftCollectionInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport const verifyNftCollectionBuilder = (\n  metaplex: Metaplex,\n  params: VerifyNftCollectionBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    collectionMintAddress,\n    isSizedCollection = true,\n    isDelegated = false,\n    collectionAuthority = metaplex.identity(),\n    payer = metaplex.identity(),\n  } = params;\n\n  const accounts = {\n    metadata: findMetadataPda(mintAddress),\n    collectionAuthority: collectionAuthority.publicKey,\n    payer: payer.publicKey,\n    collectionMint: collectionMintAddress,\n    collection: findMetadataPda(collectionMintAddress),\n    collectionMasterEditionAccount: findMasterEditionV2Pda(\n      collectionMintAddress\n    ),\n  };\n\n  const instruction = isSizedCollection\n    ? createVerifySizedCollectionItemInstruction(accounts)\n    : createVerifyCollectionInstruction(accounts);\n\n  if (isDelegated) {\n    instruction.keys.push({\n      pubkey: findCollectionAuthorityRecordPda(\n        collectionMintAddress,\n        collectionAuthority.publicKey\n      ),\n      isWritable: false,\n      isSigner: false,\n    });\n  }\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Verify the collection.\n      .add({\n        instruction: instruction,\n        signers: [payer, collectionAuthority],\n        key: params.instructionKey ?? 'verifyCollection',\n      })\n  );\n};\n"],"names":["_verifyNftCollectionClient","nftOrSft","input","Task","scope","mintAddress","toMintAddress","collectionFromNft","collection","address","undefined","collectionMintAddress","metadataAddress","findMetadataPda","metadata","toMetadata","toMetadataAccount","metaplex","rpc","getAccount","throwIfCanceled","ParentCollectionMissingError","operations","execute","verifyNftCollectionOperation","_verifyNftCollectionBuildersClient","verifyNftCollectionBuilder","Key","useOperation","verifyNftCollectionOperationHandler","handle","operation","sendAndConfirm","confirmOptions","params","isSizedCollection","isDelegated","collectionAuthority","identity","payer","accounts","publicKey","collectionMint","collectionMasterEditionAccount","findMasterEditionV2Pda","instruction","createVerifySizedCollectionItemInstruction","createVerifyCollectionInstruction","keys","push","pubkey","findCollectionAuthorityRecordPda","isWritable","isSigner","TransactionBuilder","make","setFeePayer","add","signers","key","instructionKey"],"mappings":"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"}