{"version":3,"file":"createSft.cjs","sources":["../../../../src/plugins/nftModule/createSft.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport {\n  BigNumber,\n  Creator,\n  CreatorInput,\n  isSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, Option, Task, TransactionBuilder } from '@/utils';\nimport {\n  createCreateMetadataAccountV3Instruction,\n  Uses,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../tokenModule';\nimport type { NftBuildersClient } from './NftBuildersClient';\nimport type { NftClient } from './NftClient';\nimport { findMetadataPda } from './pdas';\nimport { assertSft, Sft, SftWithToken } from './Sft';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _createSftClient(\n  this: NftClient,\n  input: CreateSftInput\n): Task<CreateSftOutput & { sft: Sft | SftWithToken }> {\n  return new Task(async (scope) => {\n    const operation = createSftOperation(input);\n    const output = await this.metaplex.operations().execute(operation, scope);\n    scope.throwIfCanceled();\n    const sft = await this.findByMint(output.mintAddress, {\n      tokenAddress: output.tokenAddress ?? undefined,\n    }).run(scope);\n    assertSft(sft);\n    return { ...output, sft };\n  });\n}\n\n/** @internal */\nexport function _createSftBuildersClient(\n  this: NftBuildersClient,\n  input: CreateSftBuilderParams\n) {\n  return createSftBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateSftOperation' as const;\nexport const createSftOperation = useOperation<CreateSftOperation>(Key);\nexport type CreateSftOperation = Operation<\n  typeof Key,\n  CreateSftInput,\n  CreateSftOutput\n>;\n\nexport interface CreateSftInput {\n  // Accounts.\n  payer?: Signer; // Defaults to mx.identity().\n  updateAuthority?: Signer; // Defaults to mx.identity().\n  mintAuthority?: Signer; // Defaults to mx.identity().\n  freezeAuthority?: Option<PublicKey>; // Defaults to mx.identity().\n\n  // Mint Account.\n  useNewMint?: Signer; // Defaults to new generated Keypair.\n  useExistingMint?: PublicKey;\n\n  // Optional Token Account. Defaults to no token account.\n  tokenAddress?: PublicKey | Signer;\n  tokenOwner?: PublicKey;\n  tokenAmount?: SplTokenAmount;\n\n  // Data.\n  decimals?: number; // Defaults to 0.\n  uri: string;\n  name: string;\n  sellerFeeBasisPoints: number;\n  symbol?: string; // Defaults to an empty string.\n  creators?: CreatorInput[]; // Defaults to mx.identity() as a single Creator.\n  isMutable?: boolean; // Defaults to true.\n  maxSupply?: Option<BigNumber>; // Defaults to 0.\n  uses?: Option<Uses>; // Defaults to null.\n  isCollection?: boolean; // Defaults to false.\n  collection?: Option<PublicKey>; // Defaults to null.\n  collectionAuthority?: Option<Signer>; // Defaults to null.\n  collectionAuthorityIsDelegated?: boolean; // Defaults to false.\n  collectionIsSized?: boolean; // Defaults to true.\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface CreateSftOutput {\n  response: SendAndConfirmTransactionResponse;\n  mintAddress: PublicKey;\n  metadataAddress: PublicKey;\n  tokenAddress: PublicKey | null;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createSftOperationHandler: OperationHandler<CreateSftOperation> = {\n  handle: async (\n    operation: CreateSftOperation,\n    metaplex: Metaplex,\n    scope: DisposableScope\n  ) => {\n    const builder = await createSftBuilder(metaplex, operation.input);\n    scope.throwIfCanceled();\n    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateSftBuilderParams = Omit<CreateSftInput, 'confirmOptions'> & {\n  createMintAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenAccountInstructionKey?: string;\n  createTokenAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n  createMetadataInstructionKey?: string;\n};\n\nexport type CreateSftBuilderContext = Omit<CreateSftOutput, 'response'>;\n\nexport const createSftBuilder = async (\n  metaplex: Metaplex,\n  params: CreateSftBuilderParams\n): Promise<TransactionBuilder<CreateSftBuilderContext>> => {\n  const {\n    payer = metaplex.identity(),\n    useNewMint = Keypair.generate(),\n    updateAuthority = metaplex.identity(),\n    mintAuthority = metaplex.identity(),\n  } = params;\n\n  const mintAndTokenBuilder = await createMintAndTokenForSftBuilder(\n    metaplex,\n    params,\n    useNewMint\n  );\n  const { mintAddress, tokenAddress } = mintAndTokenBuilder.getContext();\n\n  const metadataPda = findMetadataPda(mintAddress);\n  const creatorsInput: CreatorInput[] = params.creators ?? [\n    {\n      address: updateAuthority.publicKey,\n      authority: updateAuthority,\n      share: 100,\n    },\n  ];\n  const creators: Option<Creator[]> =\n    creatorsInput.length > 0\n      ? creatorsInput.map((creator) => ({\n          ...creator,\n          verified: creator.address.equals(updateAuthority.publicKey),\n        }))\n      : null;\n\n  const createMetadataInstruction = createCreateMetadataAccountV3Instruction(\n    {\n      metadata: metadataPda,\n      mint: mintAddress,\n      mintAuthority: mintAuthority.publicKey,\n      payer: payer.publicKey,\n      updateAuthority: updateAuthority.publicKey,\n    },\n    {\n      createMetadataAccountArgsV3: {\n        data: {\n          name: params.name,\n          symbol: params.symbol ?? '',\n          uri: params.uri,\n          sellerFeeBasisPoints: params.sellerFeeBasisPoints,\n          creators,\n          collection: params.collection\n            ? { key: params.collection, verified: false }\n            : null,\n          uses: params.uses ?? null,\n        },\n        isMutable: params.isMutable ?? true,\n        collectionDetails: params.isCollection\n          ? { __kind: 'V1', size: 0 } // Program will hardcode size to zero anyway.\n          : null,\n      },\n    }\n  );\n\n  // When the payer is different than the update authority, the latter will\n  // not be marked as a signer and therefore signing as a creator will fail.\n  createMetadataInstruction.keys[4].isSigner = true;\n\n  const verifyAdditionalCreatorInstructions = creatorsInput\n    .filter((creator) => {\n      return (\n        !!creator.authority &&\n        !creator.address.equals(updateAuthority.publicKey)\n      );\n    })\n    .map((creator) => {\n      return metaplex.nfts().builders().verifyCreator({\n        mintAddress,\n        creator: creator.authority,\n      });\n    });\n\n  return (\n    TransactionBuilder.make<CreateSftBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintAddress,\n        metadataAddress: metadataPda,\n        tokenAddress,\n      })\n\n      // Create the mint and token accounts before minting 1 token to the owner.\n      .add(mintAndTokenBuilder)\n\n      // Create metadata account.\n      .add({\n        instruction: createMetadataInstruction,\n        signers: [payer, mintAuthority, updateAuthority],\n        key: params.createMetadataInstructionKey ?? 'createMetadata',\n      })\n\n      // Verify additional creators.\n      .add(...verifyAdditionalCreatorInstructions)\n\n      // Verify collection.\n      .when(!!params.collection && !!params.collectionAuthority, (builder) =>\n        builder.add(\n          metaplex\n            .nfts()\n            .builders()\n            .verifyCollection({\n              payer,\n              mintAddress,\n              collectionMintAddress: params.collection as PublicKey,\n              collectionAuthority: params.collectionAuthority as Signer,\n              isDelegated: params.collectionAuthorityIsDelegated ?? false,\n              isSizedCollection: params.collectionIsSized ?? true,\n            })\n        )\n      )\n  );\n};\n\nconst createMintAndTokenForSftBuilder = async (\n  metaplex: Metaplex,\n  params: CreateSftBuilderParams,\n  useNewMint: Signer\n): Promise<\n  TransactionBuilder<{ mintAddress: PublicKey; tokenAddress: PublicKey | null }>\n> => {\n  const {\n    payer = metaplex.identity(),\n    mintAuthority = metaplex.identity(),\n    freezeAuthority = metaplex.identity().publicKey,\n  } = params;\n\n  const mintAddress = params.useExistingMint ?? useNewMint.publicKey;\n  const associatedTokenAddress = params.tokenOwner\n    ? findAssociatedTokenAccountPda(mintAddress, params.tokenOwner)\n    : null;\n  const tokenAddress = params.tokenAddress\n    ? toPublicKey(params.tokenAddress)\n    : associatedTokenAddress;\n\n  let tokenExists: boolean;\n  if (!!params.useExistingMint && !!tokenAddress) {\n    const tokenAccount = await metaplex.rpc().getAccount(tokenAddress);\n    tokenExists = tokenAccount.exists;\n  } else {\n    tokenExists = false;\n  }\n\n  const builder = TransactionBuilder.make<{\n    mintAddress: PublicKey;\n    tokenAddress: PublicKey | null;\n  }>().setContext({\n    mintAddress,\n    tokenAddress,\n  });\n\n  // Create the mint account if it doesn't exist.\n  if (!params.useExistingMint) {\n    builder.add(\n      await metaplex\n        .tokens()\n        .builders()\n        .createMint({\n          decimals: params.decimals ?? 0,\n          mint: useNewMint,\n          payer,\n          mintAuthority: mintAuthority.publicKey,\n          freezeAuthority,\n          tokenProgram: params.tokenProgram,\n          createAccountInstructionKey: params.createMintAccountInstructionKey,\n          initializeMintInstructionKey: params.initializeMintInstructionKey,\n        })\n    );\n  }\n\n  // Create the token account if it doesn't exist.\n  const isNewToken = !!params.tokenAddress && isSigner(params.tokenAddress);\n  const isNewAssociatedToken = !!params.tokenOwner;\n  if (!tokenExists && (isNewToken || isNewAssociatedToken)) {\n    builder.add(\n      await metaplex\n        .tokens()\n        .builders()\n        .createToken({\n          mint: mintAddress,\n          owner: params.tokenOwner,\n          token: params.tokenAddress as Signer | undefined,\n          payer,\n          tokenProgram: params.tokenProgram,\n          associatedTokenProgram: params.associatedTokenProgram,\n          createAssociatedTokenAccountInstructionKey:\n            params.createAssociatedTokenAccountInstructionKey,\n          createAccountInstructionKey: params.createTokenAccountInstructionKey,\n          initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n        })\n    );\n  }\n\n  // Mint provided amount to the token account.\n  if (tokenAddress && params.tokenAmount) {\n    builder.add(\n      await metaplex.tokens().builders().mint({\n        mint: mintAddress,\n        toToken: tokenAddress,\n        toTokenExists: true,\n        amount: params.tokenAmount,\n        mintAuthority,\n        tokenProgram: params.tokenProgram,\n        mintTokensInstructionKey: params.mintTokensInstructionKey,\n      })\n    );\n  }\n\n  return builder;\n};\n"],"names":["_createSftClient","input","Task","scope","operation","createSftOperation","output","metaplex","operations","execute","throwIfCanceled","sft","findByMint","mintAddress","tokenAddress","undefined","run","assertSft","_createSftBuildersClient","createSftBuilder","Key","useOperation","createSftOperationHandler","handle","builder","sendAndConfirm","confirmOptions","params","payer","identity","useNewMint","Keypair","generate","updateAuthority","mintAuthority","mintAndTokenBuilder","createMintAndTokenForSftBuilder","getContext","metadataPda","findMetadataPda","creatorsInput","creators","address","publicKey","authority","share","length","map","creator","verified","equals","createMetadataInstruction","createCreateMetadataAccountV3Instruction","metadata","mint","createMetadataAccountArgsV3","data","name","symbol","uri","sellerFeeBasisPoints","collection","key","uses","isMutable","collectionDetails","isCollection","__kind","size","keys","isSigner","verifyAdditionalCreatorInstructions","filter","nfts","builders","verifyCreator","TransactionBuilder","make","setFeePayer","setContext","metadataAddress","add","instruction","signers","createMetadataInstructionKey","when","collectionAuthority","verifyCollection","collectionMintAddress","isDelegated","collectionAuthorityIsDelegated","isSizedCollection","collectionIsSized","freezeAuthority","useExistingMint","associatedTokenAddress","tokenOwner","findAssociatedTokenAccountPda","toPublicKey","tokenExists","tokenAccount","rpc","getAccount","exists","tokens","createMint","decimals","tokenProgram","createAccountInstructionKey","createMintAccountInstructionKey","initializeMintInstructionKey","isNewToken","isNewAssociatedToken","createToken","owner","token","associatedTokenProgram","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","tokenAmount","toToken","toTokenExists","amount","mintTokensInstructionKey"],"mappings":"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"}