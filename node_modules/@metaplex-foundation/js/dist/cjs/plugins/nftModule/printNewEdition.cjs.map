{"version":3,"file":"printNewEdition.cjs","sources":["../../../../src/plugins/nftModule/printNewEdition.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  Signer,\n  toBigNumber,\n  token,\n  useOperation,\n} from '@/types';\nimport {\n  DisposableScope,\n  InstructionWithSigners,\n  Task,\n  TransactionBuilder,\n} from '@/utils';\nimport {\n  createMintNewEditionFromMasterEditionViaTokenInstruction,\n  createMintNewEditionFromMasterEditionViaVaultProxyInstruction,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../tokenModule';\nimport { toOriginalEditionAccount } from './accounts';\nimport { HasMintAddress, toMintAddress } from './helpers';\nimport { assertNftWithToken, NftWithToken } from './Nft';\nimport type { NftBuildersClient } from './NftBuildersClient';\nimport type { NftClient } from './NftClient';\nimport { NftOriginalEdition, toNftOriginalEdition } from './NftEdition';\nimport {\n  findEditionMarkerPda,\n  findEditionPda,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n} from './pdas';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _printNewEditionClient(\n  this: NftClient,\n  originalNft: HasMintAddress,\n  input: Omit<PrintNewEditionSharedInput, 'originalMint'> &\n    PrintNewEditionViaInput = {}\n): Task<PrintNewEditionOutput & { nft: NftWithToken }> {\n  return new Task(async (scope) => {\n    const originalMint = toMintAddress(originalNft);\n    const operation = printNewEditionOperation({ originalMint, ...input });\n    const output = await this.metaplex.operations().execute(operation, scope);\n    scope.throwIfCanceled();\n    const nft = await this.findByMint(output.mintSigner.publicKey, {\n      tokenAddress: output.tokenAddress,\n    }).run(scope);\n    assertNftWithToken(nft);\n    return { ...output, nft };\n  });\n}\n\n/** @internal */\nexport function _printNewEditionBuildersClient(\n  this: NftBuildersClient,\n  input: PrintNewEditionBuilderParams\n) {\n  return printNewEditionBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'PrintNewEditionOperation' as const;\nexport const printNewEditionOperation =\n  useOperation<PrintNewEditionOperation>(Key);\nexport type PrintNewEditionOperation = Operation<\n  typeof Key,\n  PrintNewEditionInput,\n  PrintNewEditionOutput\n>;\n\nexport type PrintNewEditionInput = PrintNewEditionSharedInput &\n  PrintNewEditionViaInput;\n\nexport type PrintNewEditionSharedInput = {\n  originalMint: PublicKey;\n  newMint?: Signer; // Defaults to Keypair.generate().\n  newMintAuthority?: Signer; // Defaults to mx.identity().\n  newUpdateAuthority?: PublicKey; // Defaults to mx.identity().\n  newOwner?: PublicKey; // Defaults to mx.identity().\n  newTokenAccount?: Signer; // Defaults to creating an associated token account.\n  newFreezeAuthority?: PublicKey; // Defaults to mx.identity().\n  payer?: Signer; // Defaults to mx.identity().\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type PrintNewEditionViaInput =\n  | {\n      via?: 'token';\n      originalTokenAccountOwner?: Signer; // Defaults to mx.identity().\n      originalTokenAccount?: PublicKey; // Defaults to associated token address.\n    }\n  | {\n      via: 'vault';\n      vaultAuthority: Signer;\n      safetyDepositStore: PublicKey;\n      safetyDepositBox: PublicKey;\n      vault: PublicKey;\n      tokenVaultProgram?: PublicKey;\n    };\n\nexport type PrintNewEditionOutput = {\n  response: SendAndConfirmTransactionResponse;\n  mintSigner: Signer;\n  metadataAddress: PublicKey;\n  editionAddress: PublicKey;\n  tokenAddress: PublicKey;\n  updatedOriginalEdition: NftOriginalEdition;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const printNewEditionOperationHandler: OperationHandler<PrintNewEditionOperation> =\n  {\n    handle: async (\n      operation: PrintNewEditionOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ) => {\n      const builder = await printNewEditionBuilder(metaplex, operation.input);\n      scope.throwIfCanceled();\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type PrintNewEditionBuilderParams = PrintNewEditionViaInput &\n  Omit<PrintNewEditionSharedInput, 'confirmOptions'> & {\n    createMintAccountInstructionKey?: string;\n    initializeMintInstructionKey?: string;\n    createAssociatedTokenAccountInstructionKey?: string;\n    createTokenAccountInstructionKey?: string;\n    initializeTokenInstructionKey?: string;\n    mintTokensInstructionKey?: string;\n    printNewEditionInstructionKey?: string;\n  };\n\nexport type PrintNewEditionBuilderContext = Omit<\n  PrintNewEditionOutput,\n  'response'\n>;\n\nexport const printNewEditionBuilder = async (\n  metaplex: Metaplex,\n  params: PrintNewEditionBuilderParams\n): Promise<TransactionBuilder<PrintNewEditionBuilderContext>> => {\n  const {\n    originalMint,\n    newMint = Keypair.generate(),\n    newMintAuthority = metaplex.identity(),\n    newUpdateAuthority = metaplex.identity().publicKey,\n    newOwner = metaplex.identity().publicKey,\n    newTokenAccount,\n    newFreezeAuthority = metaplex.identity().publicKey,\n    payer = metaplex.identity(),\n    tokenProgram,\n    associatedTokenProgram,\n    printNewEditionInstructionKey = 'printNewEdition',\n  } = params;\n\n  // Original NFT.\n  const originalMetadataAddress = findMetadataPda(originalMint);\n  const originalEditionAddress = findMasterEditionV2Pda(originalMint);\n  const originalEditionAccount = toOriginalEditionAccount(\n    await metaplex.rpc().getAccount(originalEditionAddress)\n  );\n  const originalEdition = toNftOriginalEdition(originalEditionAccount);\n  const edition = toBigNumber(originalEdition.supply.addn(1));\n  const updatedOriginalEdition = { ...originalEdition, supply: edition };\n  const originalEditionMarkPda = findEditionMarkerPda(originalMint, edition);\n\n  // New NFT.\n  const newMetadataAddress = findMetadataPda(newMint.publicKey);\n  const newEditionAddress = findEditionPda(newMint.publicKey);\n  const sharedAccounts = {\n    newMetadata: newMetadataAddress,\n    newEdition: newEditionAddress,\n    masterEdition: originalEditionAddress,\n    newMint: newMint.publicKey,\n    editionMarkPda: originalEditionMarkPda,\n    newMintAuthority: newMintAuthority.publicKey,\n    payer: payer.publicKey,\n    newMetadataUpdateAuthority: newUpdateAuthority,\n    metadata: originalMetadataAddress,\n  };\n\n  const tokenWithMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createTokenWithMint({\n      decimals: 0,\n      initialSupply: token(1),\n      mint: newMint,\n      mintAuthority: newMintAuthority,\n      freezeAuthority: newFreezeAuthority ?? null,\n      owner: newOwner,\n      token: newTokenAccount,\n      payer,\n      tokenProgram,\n      associatedTokenProgram,\n      createMintAccountInstructionKey: params.createMintAccountInstructionKey,\n      initializeMintInstructionKey: params.initializeMintInstructionKey,\n      createAssociatedTokenAccountInstructionKey:\n        params.createAssociatedTokenAccountInstructionKey,\n      createTokenAccountInstructionKey: params.createTokenAccountInstructionKey,\n      initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n      mintTokensInstructionKey: params.mintTokensInstructionKey,\n    });\n\n  const { tokenAddress } = tokenWithMintBuilder.getContext();\n\n  let printNewEditionInstructionWithSigners: InstructionWithSigners;\n  if (params.via === 'vault') {\n    printNewEditionInstructionWithSigners = {\n      instruction:\n        createMintNewEditionFromMasterEditionViaVaultProxyInstruction(\n          {\n            ...sharedAccounts,\n            vaultAuthority: params.vaultAuthority.publicKey,\n            safetyDepositStore: params.safetyDepositStore,\n            safetyDepositBox: params.safetyDepositBox,\n            vault: params.vault,\n            tokenVaultProgram:\n              params.tokenVaultProgram ??\n              new PublicKey('vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn'),\n          },\n          { mintNewEditionFromMasterEditionViaTokenArgs: { edition } }\n        ),\n      signers: [newMint, newMintAuthority, payer, params.vaultAuthority],\n      key: printNewEditionInstructionKey,\n    };\n  } else {\n    const originalTokenAccountOwner =\n      params.originalTokenAccountOwner ?? metaplex.identity();\n    const originalTokenAccount =\n      params.originalTokenAccount ??\n      findAssociatedTokenAccountPda(\n        originalMint,\n        originalTokenAccountOwner.publicKey\n      );\n\n    printNewEditionInstructionWithSigners = {\n      instruction: createMintNewEditionFromMasterEditionViaTokenInstruction(\n        {\n          ...sharedAccounts,\n          tokenAccountOwner: originalTokenAccountOwner.publicKey,\n          tokenAccount: originalTokenAccount,\n        },\n        { mintNewEditionFromMasterEditionViaTokenArgs: { edition } }\n      ),\n      signers: [newMint, newMintAuthority, payer, originalTokenAccountOwner],\n      key: printNewEditionInstructionKey,\n    };\n  }\n\n  return (\n    TransactionBuilder.make<PrintNewEditionBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintSigner: newMint,\n        metadataAddress: newMetadataAddress,\n        editionAddress: newEditionAddress,\n        tokenAddress,\n        updatedOriginalEdition,\n      })\n\n      // Create the mint and token accounts before minting 1 token to the owner.\n      .add(tokenWithMintBuilder)\n\n      // Mint new edition.\n      .add(printNewEditionInstructionWithSigners)\n  );\n};\n"],"names":["_printNewEditionClient","originalNft","input","Task","scope","originalMint","toMintAddress","operation","printNewEditionOperation","output","metaplex","operations","execute","throwIfCanceled","nft","findByMint","mintSigner","publicKey","tokenAddress","run","assertNftWithToken","_printNewEditionBuildersClient","printNewEditionBuilder","Key","useOperation","printNewEditionOperationHandler","handle","builder","sendAndConfirm","confirmOptions","params","newMint","Keypair","generate","newMintAuthority","identity","newUpdateAuthority","newOwner","newTokenAccount","newFreezeAuthority","payer","tokenProgram","associatedTokenProgram","printNewEditionInstructionKey","originalMetadataAddress","findMetadataPda","originalEditionAddress","findMasterEditionV2Pda","originalEditionAccount","toOriginalEditionAccount","rpc","getAccount","originalEdition","toNftOriginalEdition","edition","toBigNumber","supply","addn","updatedOriginalEdition","originalEditionMarkPda","findEditionMarkerPda","newMetadataAddress","newEditionAddress","findEditionPda","sharedAccounts","newMetadata","newEdition","masterEdition","editionMarkPda","newMetadataUpdateAuthority","metadata","tokenWithMintBuilder","tokens","builders","createTokenWithMint","decimals","initialSupply","token","mint","mintAuthority","freezeAuthority","owner","createMintAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","mintTokensInstructionKey","getContext","printNewEditionInstructionWithSigners","via","instruction","createMintNewEditionFromMasterEditionViaVaultProxyInstruction","vaultAuthority","safetyDepositStore","safetyDepositBox","vault","tokenVaultProgram","PublicKey","mintNewEditionFromMasterEditionViaTokenArgs","signers","key","originalTokenAccountOwner","originalTokenAccount","findAssociatedTokenAccountPda","createMintNewEditionFromMasterEditionViaTokenInstruction","tokenAccountOwner","tokenAccount","TransactionBuilder","make","setFeePayer","setContext","metadataAddress","editionAddress","add"],"mappings":"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"}