'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplTokenMetadata = require('@metaplex-foundation/mpl-token-metadata');
var helpers = require('./helpers.cjs');
var pdas = require('./pdas.cjs');
var Operation = require('../../types/Operation.cjs');
var TransactionBuilder = require('../../utils/TransactionBuilder.cjs');

// Clients
// -----------------

/** @internal */

function _migrateToSizedCollectionNftClient(collection, size, input = {}) {
  return this.metaplex.operations().getTask(migrateToSizedCollectionNftOperation({ ...input,
    mintAddress: helpers.toMintAddress(collection),
    size
  }));
}
/** @internal */

function _migrateToSizedCollectionNftBuildersClient(input) {
  return migrateToSizedCollectionNftBuilder(this.metaplex, input);
} // -----------------
// Operation
// -----------------

const Key = 'MigrateToSizedCollectionNftOperation';
const migrateToSizedCollectionNftOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const migrateToSizedCollectionNftOperationHandler = {
  handle: async (operation, metaplex) => {
    return migrateToSizedCollectionNftBuilder(metaplex, operation.input).sendAndConfirm(metaplex, operation.input.confirmOptions);
  }
}; // -----------------
// Builder
// -----------------

const migrateToSizedCollectionNftBuilder = (metaplex, params) => {
  var _params$instructionKe;

  const {
    mintAddress,
    collectionAuthority = metaplex.identity(),
    size,
    isDelegated = false
  } = params;
  return TransactionBuilder.TransactionBuilder.make() // Update the metadata account.
  .add({
    instruction: mplTokenMetadata.createSetCollectionSizeInstruction({
      collectionMetadata: pdas.findMetadataPda(mintAddress),
      collectionAuthority: collectionAuthority.publicKey,
      collectionMint: mintAddress,
      collectionAuthorityRecord: isDelegated ? pdas.findCollectionAuthorityRecordPda(mintAddress, collectionAuthority.publicKey) : undefined
    }, {
      setCollectionSizeArgs: {
        size
      }
    }),
    signers: [collectionAuthority],
    key: (_params$instructionKe = params.instructionKey) !== null && _params$instructionKe !== void 0 ? _params$instructionKe : 'setCollectionSize'
  });
};

exports._migrateToSizedCollectionNftBuildersClient = _migrateToSizedCollectionNftBuildersClient;
exports._migrateToSizedCollectionNftClient = _migrateToSizedCollectionNftClient;
exports.migrateToSizedCollectionNftBuilder = migrateToSizedCollectionNftBuilder;
exports.migrateToSizedCollectionNftOperation = migrateToSizedCollectionNftOperation;
exports.migrateToSizedCollectionNftOperationHandler = migrateToSizedCollectionNftOperationHandler;
//# sourceMappingURL=migrateToSizedCollectionNft.cjs.map
