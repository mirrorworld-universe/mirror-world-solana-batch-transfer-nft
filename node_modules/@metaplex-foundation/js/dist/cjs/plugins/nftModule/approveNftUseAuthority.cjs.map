{"version":3,"file":"approveNftUseAuthority.cjs","sources":["../../../../src/plugins/nftModule/approveNftUseAuthority.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey, SystemProgram } from '@solana/web3.js';\nimport { createApproveUseAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { useOperation, Operation, Signer, OperationHandler } from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport {\n  findMetadataPda,\n  findProgramAsBurnerPda,\n  findUseAuthorityRecordPda,\n} from './pdas';\nimport type { NftClient } from './NftClient';\nimport type { NftBuildersClient } from './NftBuildersClient';\nimport { HasMintAddress, toMintAddress } from './helpers';\nimport { findAssociatedTokenAccountPda, TokenProgram } from '../tokenModule';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _approveNftUseAuthorityClient(\n  this: NftClient,\n  nftOrSft: HasMintAddress,\n  user: PublicKey,\n  input: Omit<ApproveNftUseAuthorityInput, 'mintAddress' | 'user'> = {}\n) {\n  return this.metaplex.operations().getTask(\n    approveNftUseAuthorityOperation({\n      ...input,\n      mintAddress: toMintAddress(nftOrSft),\n      user,\n    })\n  );\n}\n\n/** @internal */\nexport function _approveNftUseAuthorityBuildersClient(\n  this: NftBuildersClient,\n  input: ApproveNftUseAuthorityBuilderParams\n) {\n  return approveNftUseAuthorityBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveNftUseAuthorityOperation' as const;\nexport const approveNftUseAuthorityOperation =\n  useOperation<ApproveNftUseAuthorityOperation>(Key);\nexport type ApproveNftUseAuthorityOperation = Operation<\n  typeof Key,\n  ApproveNftUseAuthorityInput,\n  ApproveNftUseAuthorityOutput\n>;\n\nexport interface ApproveNftUseAuthorityInput {\n  // Accounts.\n  mintAddress: PublicKey;\n  user: PublicKey;\n  owner?: Signer; // Defaults to mx.identity().\n  ownerTokenAddress?: PublicKey; // Defaults to associated token address.\n  payer?: Signer; // Defaults to mx.identity().\n\n  // Data.\n  numberOfUses?: number; // Defaults to 1.\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  systemProgram?: PublicKey;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface ApproveNftUseAuthorityOutput {\n  response: SendAndConfirmTransactionResponse;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const approveNftUseAuthorityOperationHandler: OperationHandler<ApproveNftUseAuthorityOperation> =\n  {\n    handle: async (\n      operation: ApproveNftUseAuthorityOperation,\n      metaplex: Metaplex\n    ): Promise<ApproveNftUseAuthorityOutput> => {\n      return approveNftUseAuthorityBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type ApproveNftUseAuthorityBuilderParams = Omit<\n  ApproveNftUseAuthorityInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport const approveNftUseAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: ApproveNftUseAuthorityBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    user,\n    owner = metaplex.identity(),\n    payer = metaplex.identity(),\n  } = params;\n  const metadata = findMetadataPda(mintAddress);\n  const useAuthorityRecord = findUseAuthorityRecordPda(mintAddress, user);\n  const programAsBurner = findProgramAsBurnerPda();\n  const ownerTokenAddress =\n    params.ownerTokenAddress ??\n    findAssociatedTokenAccountPda(mintAddress, owner.publicKey);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Approve the use authority.\n      .add({\n        instruction: createApproveUseAuthorityInstruction(\n          {\n            useAuthorityRecord,\n            owner: owner.publicKey,\n            payer: payer.publicKey,\n            user,\n            ownerTokenAccount: ownerTokenAddress,\n            metadata,\n            mint: mintAddress,\n            burner: programAsBurner,\n            tokenProgram: params.tokenProgram ?? TokenProgram.publicKey,\n            systemProgram: params.systemProgram ?? SystemProgram.programId,\n          },\n          {\n            approveUseAuthorityArgs: {\n              numberOfUses: params.numberOfUses ?? 1,\n            },\n          }\n        ),\n        signers: [owner, payer],\n        key: params.instructionKey ?? 'approveUseAuthority',\n      })\n  );\n};\n"],"names":["_approveNftUseAuthorityClient","nftOrSft","user","input","metaplex","operations","getTask","approveNftUseAuthorityOperation","mintAddress","toMintAddress","_approveNftUseAuthorityBuildersClient","approveNftUseAuthorityBuilder","Key","useOperation","approveNftUseAuthorityOperationHandler","handle","operation","sendAndConfirm","confirmOptions","params","owner","identity","payer","metadata","findMetadataPda","useAuthorityRecord","findUseAuthorityRecordPda","programAsBurner","findProgramAsBurnerPda","ownerTokenAddress","findAssociatedTokenAccountPda","publicKey","TransactionBuilder","make","setFeePayer","add","instruction","createApproveUseAuthorityInstruction","ownerTokenAccount","mint","burner","tokenProgram","TokenProgram","systemProgram","SystemProgram","programId","approveUseAuthorityArgs","numberOfUses","signers","key","instructionKey"],"mappings":"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"}