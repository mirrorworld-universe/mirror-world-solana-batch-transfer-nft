{"version":3,"file":"findNftsByCreator.cjs","sources":["../../../../src/plugins/nftModule/findNftsByCreator.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { TokenMetadataProgram } from './program';\nimport { findNftsByMintListOperation } from './findNftsByMintList';\nimport { Nft } from './Nft';\nimport { DisposableScope } from '@/utils';\nimport { Metadata } from './Metadata';\nimport { Sft } from './Sft';\nimport type { NftClient } from './NftClient';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _findNftsByCreatorsClient(\n  this: NftClient,\n  creator: PublicKey,\n  options?: Omit<FindNftsByCreatorInput, 'creator'>\n) {\n  return this.metaplex\n    .operations()\n    .getTask(findNftsByCreatorOperation({ creator, ...options }));\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByCreatorOperation' as const;\nexport const findNftsByCreatorOperation =\n  useOperation<FindNftsByCreatorOperation>(Key);\nexport type FindNftsByCreatorOperation = Operation<\n  typeof Key,\n  FindNftsByCreatorInput,\n  FindNftsByCreatorOutput\n>;\n\nexport type FindNftsByCreatorInput = {\n  creator: PublicKey;\n  position?: number;\n  commitment?: Commitment;\n};\n\nexport type FindNftsByCreatorOutput = (Metadata | Nft | Sft)[];\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findNftsByCreatorOperationHandler: OperationHandler<FindNftsByCreatorOperation> =\n  {\n    handle: async (\n      operation: FindNftsByCreatorOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<FindNftsByCreatorOutput> => {\n      const { creator, position = 1, commitment } = operation.input;\n\n      const mints = await TokenMetadataProgram.metadataV1Accounts(metaplex)\n        .selectMint()\n        .whereCreator(position, creator)\n        .getDataAsPublicKeys();\n      scope.throwIfCanceled();\n\n      const nfts = await metaplex\n        .operations()\n        .execute(findNftsByMintListOperation({ mints, commitment }), scope);\n      scope.throwIfCanceled();\n\n      return nfts.filter((nft): nft is Metadata | Nft | Sft => nft !== null);\n    },\n  };\n"],"names":["_findNftsByCreatorsClient","creator","options","metaplex","operations","getTask","findNftsByCreatorOperation","Key","useOperation","findNftsByCreatorOperationHandler","handle","operation","scope","position","commitment","input","mints","TokenMetadataProgram","metadataV1Accounts","selectMint","whereCreator","getDataAsPublicKeys","throwIfCanceled","nfts","execute","findNftsByMintListOperation","filter","nft"],"mappings":";;;;;;;;AAWA;AACA;AACA;;AAEA;AACO,SAASA,yBAAT,CAELC,OAFK,EAGLC,OAHK,EAIL;EACA,OAAO,IAAA,CAAKC,QAAL,CACJC,UADI,GAEJC,OAFI,CAEIC,0BAA0B,CAAC;IAAEL,OAAF;IAAW,GAAGC,OAAAA;AAAd,GAAD,CAF9B,CAAP,CAAA;AAGD;AAGD;AACA;;AAEA,MAAMK,GAAG,GAAG,4BAAZ,CAAA;MACaD,0BAA0B,GACrCE,sBAAY,CAA6BD,GAA7B,EADP;AAgBP;AACA;AACA;AAEO,MAAME,iCAA+E,GAC1F;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENR,QAFM,EAGNS,KAHM,KAI+B;IACrC,MAAM;MAAEX,OAAF;AAAWY,MAAAA,QAAQ,GAAG,CAAtB;AAAyBC,MAAAA,UAAAA;KAAeH,GAAAA,SAAS,CAACI,KAAxD,CAAA;AAEA,IAAA,MAAMC,KAAK,GAAG,MAAMC,4BAAoB,CAACC,kBAArB,CAAwCf,QAAxC,CAAA,CACjBgB,UADiB,EAAA,CAEjBC,YAFiB,CAEJP,QAFI,EAEMZ,OAFN,CAAA,CAGjBoB,mBAHiB,EAApB,CAAA;AAIAT,IAAAA,KAAK,CAACU,eAAN,EAAA,CAAA;IAEA,MAAMC,IAAI,GAAG,MAAMpB,QAAQ,CACxBC,UADgB,EAEhBoB,CAAAA,OAFgB,CAERC,8CAA2B,CAAC;MAAET,KAAF;AAASF,MAAAA,UAAAA;KAAV,CAFnB,EAE4CF,KAF5C,CAAnB,CAAA;AAGAA,IAAAA,KAAK,CAACU,eAAN,EAAA,CAAA;IAEA,OAAOC,IAAI,CAACG,MAAL,CAAaC,GAAD,IAAsCA,GAAG,KAAK,IAA1D,CAAP,CAAA;AACD,GAAA;AApBH;;;;;;"}