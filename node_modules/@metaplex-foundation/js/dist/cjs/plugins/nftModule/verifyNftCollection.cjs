'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplTokenMetadata = require('@metaplex-foundation/mpl-token-metadata');
var accounts = require('./accounts.cjs');
var errors = require('./errors.cjs');
var helpers = require('./helpers.cjs');
var Metadata = require('./Metadata.cjs');
var pdas = require('./pdas.cjs');
var Task = require('../../utils/Task.cjs');
var Operation = require('../../types/Operation.cjs');
var TransactionBuilder = require('../../utils/TransactionBuilder.cjs');

// Clients
// -----------------

/** @internal */

function _verifyNftCollectionClient(nftOrSft, input = {}) {
  return new Task.Task(async scope => {
    var _input$collectionMint;

    const mintAddress = helpers.toMintAddress(nftOrSft);
    const collectionFromNft = 'collection' in nftOrSft && nftOrSft.collection ? nftOrSft.collection.address : undefined;
    let collectionMintAddress = (_input$collectionMint = input.collectionMintAddress) !== null && _input$collectionMint !== void 0 ? _input$collectionMint : collectionFromNft;

    if (!('collection' in nftOrSft) && !collectionMintAddress) {
      const metadataAddress = pdas.findMetadataPda(mintAddress);
      const metadata = Metadata.toMetadata(accounts.toMetadataAccount(await this.metaplex.rpc().getAccount(metadataAddress)));
      scope.throwIfCanceled();
      collectionMintAddress = metadata.collection ? metadata.collection.address : undefined;
    }

    if (!collectionMintAddress) {
      throw new errors.ParentCollectionMissingError(mintAddress, 'verifyCollection');
    }

    return this.metaplex.operations().execute(verifyNftCollectionOperation({ ...input,
      mintAddress,
      collectionMintAddress
    }), scope);
  });
}
/** @internal */

function _verifyNftCollectionBuildersClient(input) {
  return verifyNftCollectionBuilder(this.metaplex, input);
} // -----------------
// Operation
// -----------------

const Key = 'VerifyNftCollectionOperation';
const verifyNftCollectionOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const verifyNftCollectionOperationHandler = {
  handle: async (operation, metaplex) => {
    return verifyNftCollectionBuilder(metaplex, operation.input).sendAndConfirm(metaplex, operation.input.confirmOptions);
  }
}; // -----------------
// Builder
// -----------------

const verifyNftCollectionBuilder = (metaplex, params) => {
  var _params$instructionKe;

  const {
    mintAddress,
    collectionMintAddress,
    isSizedCollection = true,
    isDelegated = false,
    collectionAuthority = metaplex.identity(),
    payer = metaplex.identity()
  } = params;
  const accounts = {
    metadata: pdas.findMetadataPda(mintAddress),
    collectionAuthority: collectionAuthority.publicKey,
    payer: payer.publicKey,
    collectionMint: collectionMintAddress,
    collection: pdas.findMetadataPda(collectionMintAddress),
    collectionMasterEditionAccount: pdas.findMasterEditionV2Pda(collectionMintAddress)
  };
  const instruction = isSizedCollection ? mplTokenMetadata.createVerifySizedCollectionItemInstruction(accounts) : mplTokenMetadata.createVerifyCollectionInstruction(accounts);

  if (isDelegated) {
    instruction.keys.push({
      pubkey: pdas.findCollectionAuthorityRecordPda(collectionMintAddress, collectionAuthority.publicKey),
      isWritable: false,
      isSigner: false
    });
  }

  return TransactionBuilder.TransactionBuilder.make().setFeePayer(payer) // Verify the collection.
  .add({
    instruction: instruction,
    signers: [payer, collectionAuthority],
    key: (_params$instructionKe = params.instructionKey) !== null && _params$instructionKe !== void 0 ? _params$instructionKe : 'verifyCollection'
  });
};

exports._verifyNftCollectionBuildersClient = _verifyNftCollectionBuildersClient;
exports._verifyNftCollectionClient = _verifyNftCollectionClient;
exports.verifyNftCollectionBuilder = verifyNftCollectionBuilder;
exports.verifyNftCollectionOperation = verifyNftCollectionOperation;
exports.verifyNftCollectionOperationHandler = verifyNftCollectionOperationHandler;
//# sourceMappingURL=verifyNftCollection.cjs.map
