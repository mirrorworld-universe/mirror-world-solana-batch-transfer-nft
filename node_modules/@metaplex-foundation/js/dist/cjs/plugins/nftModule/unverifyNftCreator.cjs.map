{"version":3,"file":"unverifyNftCreator.cjs","sources":["../../../../src/plugins/nftModule/unverifyNftCreator.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { createRemoveCreatorVerificationInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { useOperation, Operation, Signer, OperationHandler } from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findMetadataPda } from './pdas';\nimport type { NftClient } from './NftClient';\nimport type { NftBuildersClient } from './NftBuildersClient';\nimport { HasMintAddress, toMintAddress } from './helpers';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _unverifyNftCreatorClient(\n  this: NftClient,\n  nftOrSft: HasMintAddress,\n  creator?: Signer,\n  input: Omit<UnverifyNftCreatorInput, 'mintAddress' | 'creator'> = {}\n) {\n  return this.metaplex.operations().getTask(\n    unverifyNftCreatorOperation({\n      ...input,\n      mintAddress: toMintAddress(nftOrSft),\n      creator,\n    })\n  );\n}\n\n/** @internal */\nexport function _unverifyNftCreatorBuildersClient(\n  this: NftBuildersClient,\n  input: UnverifyNftCreatorBuilderParams\n) {\n  return unverifyNftCreatorBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UnverifyNftCreatorOperation' as const;\nexport const unverifyNftCreatorOperation =\n  useOperation<UnverifyNftCreatorOperation>(Key);\nexport type UnverifyNftCreatorOperation = Operation<\n  typeof Key,\n  UnverifyNftCreatorInput,\n  UnverifyNftCreatorOutput\n>;\n\nexport interface UnverifyNftCreatorInput {\n  // Accounts.\n  mintAddress: PublicKey;\n  creator?: Signer; // Defaults to mx.identity().\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface UnverifyNftCreatorOutput {\n  response: SendAndConfirmTransactionResponse;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const unverifyNftCreatorOperationHandler: OperationHandler<UnverifyNftCreatorOperation> =\n  {\n    handle: async (\n      operation: UnverifyNftCreatorOperation,\n      metaplex: Metaplex\n    ): Promise<UnverifyNftCreatorOutput> => {\n      return unverifyNftCreatorBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type UnverifyNftCreatorBuilderParams = Omit<\n  UnverifyNftCreatorInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport const unverifyNftCreatorBuilder = (\n  metaplex: Metaplex,\n  params: UnverifyNftCreatorBuilderParams\n): TransactionBuilder => {\n  const { mintAddress, creator = metaplex.identity() } = params;\n\n  return (\n    TransactionBuilder.make()\n\n      // Verify the creator.\n      .add({\n        instruction: createRemoveCreatorVerificationInstruction({\n          metadata: findMetadataPda(mintAddress),\n          creator: creator.publicKey,\n        }),\n        signers: [creator],\n        key: params.instructionKey ?? 'unverifyCreator',\n      })\n  );\n};\n"],"names":["_unverifyNftCreatorClient","nftOrSft","creator","input","metaplex","operations","getTask","unverifyNftCreatorOperation","mintAddress","toMintAddress","_unverifyNftCreatorBuildersClient","unverifyNftCreatorBuilder","Key","useOperation","unverifyNftCreatorOperationHandler","handle","operation","sendAndConfirm","confirmOptions","params","identity","TransactionBuilder","make","add","instruction","createRemoveCreatorVerificationInstruction","metadata","findMetadataPda","publicKey","signers","key","instructionKey"],"mappings":";;;;;;;;;;AAYA;AACA;;AAEA;;AACO,SAASA,yBAAT,CAELC,QAFK,EAGLC,OAHK,EAILC,KAA+D,GAAG,EAJ7D,EAKL;EACA,OAAO,IAAA,CAAKC,QAAL,CAAcC,UAAd,EAAA,CAA2BC,OAA3B,CACLC,2BAA2B,CAAC,EAC1B,GAAGJ,KADuB;AAE1BK,IAAAA,WAAW,EAAEC,qBAAa,CAACR,QAAD,CAFA;AAG1BC,IAAAA,OAAAA;AAH0B,GAAD,CADtB,CAAP,CAAA;AAOD,CAAA;AAED;;AACO,SAASQ,iCAAT,CAELP,KAFK,EAGL;AACA,EAAA,OAAOQ,yBAAyB,CAAC,IAAA,CAAKP,QAAN,EAAgBD,KAAhB,CAAhC,CAAA;AACD;AAGD;AACA;;AAEA,MAAMS,GAAG,GAAG,6BAAZ,CAAA;MACaL,2BAA2B,GACtCM,sBAAY,CAA8BD,GAA9B,EADP;AAqBP;AACA;AACA;AAEO,MAAME,kCAAiF,GAC5F;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENZ,QAFM,KAGgC;AACtC,IAAA,OAAOO,yBAAyB,CAC9BP,QAD8B,EAE9BY,SAAS,CAACb,KAFoB,CAAzB,CAGLc,cAHK,CAGUb,QAHV,EAGoBY,SAAS,CAACb,KAAV,CAAgBe,cAHpC,CAAP,CAAA;AAID,GAAA;AATH;AAaF;AACA;;MASaP,yBAAyB,GAAG,CACvCP,QADuC,EAEvCe,MAFuC,KAGhB;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IAAEX,WAAF;IAAeN,OAAO,GAAGE,QAAQ,CAACgB,QAAT,EAAA;AAAzB,GAAA,GAAiDD,MAAvD,CAAA;EAEA,OACEE,qCAAkB,CAACC,IAAnB,EAEE;AAFF,GAGGC,GAHH,CAGO;IACHC,WAAW,EAAEC,2DAA0C,CAAC;AACtDC,MAAAA,QAAQ,EAAEC,oBAAe,CAACnB,WAAD,CAD6B;MAEtDN,OAAO,EAAEA,OAAO,CAAC0B,SAAAA;AAFqC,KAAD,CADpD;IAKHC,OAAO,EAAE,CAAC3B,OAAD,CALN;AAMH4B,IAAAA,GAAG,EAAEX,CAAAA,qBAAAA,GAAAA,MAAM,CAACY,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,iBAAA;AAN3B,GAHP,CADF,CAAA;AAaD;;;;;;;;"}