{"version":3,"file":"migrateToSizedCollectionNft.cjs","sources":["../../../../src/plugins/nftModule/migrateToSizedCollectionNft.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport {\n  BigNumber,\n  Operation,\n  OperationHandler,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createSetCollectionSizeInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { HasMintAddress, toMintAddress } from './helpers';\nimport type { NftBuildersClient } from './NftBuildersClient';\nimport type { NftClient } from './NftClient';\nimport { findCollectionAuthorityRecordPda, findMetadataPda } from './pdas';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _migrateToSizedCollectionNftClient(\n  this: NftClient,\n  collection: HasMintAddress,\n  size: BigNumber,\n  input: Omit<MigrateToSizedCollectionNftInput, 'mintAddress' | 'size'> = {}\n) {\n  return this.metaplex.operations().getTask(\n    migrateToSizedCollectionNftOperation({\n      ...input,\n      mintAddress: toMintAddress(collection),\n      size,\n    })\n  );\n}\n\n/** @internal */\nexport function _migrateToSizedCollectionNftBuildersClient(\n  this: NftBuildersClient,\n  input: MigrateToSizedCollectionNftBuilderParams\n) {\n  return migrateToSizedCollectionNftBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MigrateToSizedCollectionNftOperation' as const;\nexport const migrateToSizedCollectionNftOperation =\n  useOperation<MigrateToSizedCollectionNftOperation>(Key);\nexport type MigrateToSizedCollectionNftOperation = Operation<\n  typeof Key,\n  MigrateToSizedCollectionNftInput,\n  MigrateToSizedCollectionNftOutput\n>;\n\nexport interface MigrateToSizedCollectionNftInput {\n  // Accounts.\n  mintAddress: PublicKey;\n  collectionAuthority?: Signer; // Defaults to mx.identity().\n\n  // Data.\n  size: BigNumber;\n  isDelegated?: boolean; // Defaults to false.\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface MigrateToSizedCollectionNftOutput {\n  response: SendAndConfirmTransactionResponse;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const migrateToSizedCollectionNftOperationHandler: OperationHandler<MigrateToSizedCollectionNftOperation> =\n  {\n    handle: async (\n      operation: MigrateToSizedCollectionNftOperation,\n      metaplex: Metaplex\n    ): Promise<MigrateToSizedCollectionNftOutput> => {\n      return migrateToSizedCollectionNftBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type MigrateToSizedCollectionNftBuilderParams = Omit<\n  MigrateToSizedCollectionNftInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport const migrateToSizedCollectionNftBuilder = (\n  metaplex: Metaplex,\n  params: MigrateToSizedCollectionNftBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    collectionAuthority = metaplex.identity(),\n    size,\n    isDelegated = false,\n  } = params;\n\n  return (\n    TransactionBuilder.make()\n\n      // Update the metadata account.\n      .add({\n        instruction: createSetCollectionSizeInstruction(\n          {\n            collectionMetadata: findMetadataPda(mintAddress),\n            collectionAuthority: collectionAuthority.publicKey,\n            collectionMint: mintAddress,\n            collectionAuthorityRecord: isDelegated\n              ? findCollectionAuthorityRecordPda(\n                  mintAddress,\n                  collectionAuthority.publicKey\n                )\n              : undefined,\n          },\n          { setCollectionSizeArgs: { size } }\n        ),\n        signers: [collectionAuthority],\n        key: params.instructionKey ?? 'setCollectionSize',\n      })\n  );\n};\n"],"names":["_migrateToSizedCollectionNftClient","collection","size","input","metaplex","operations","getTask","migrateToSizedCollectionNftOperation","mintAddress","toMintAddress","_migrateToSizedCollectionNftBuildersClient","migrateToSizedCollectionNftBuilder","Key","useOperation","migrateToSizedCollectionNftOperationHandler","handle","operation","sendAndConfirm","confirmOptions","params","collectionAuthority","identity","isDelegated","TransactionBuilder","make","add","instruction","createSetCollectionSizeInstruction","collectionMetadata","findMetadataPda","publicKey","collectionMint","collectionAuthorityRecord","findCollectionAuthorityRecordPda","undefined","setCollectionSizeArgs","signers","key","instructionKey"],"mappings":";;;;;;;;;;AAkBA;AACA;;AAEA;;AACO,SAASA,kCAAT,CAELC,UAFK,EAGLC,IAHK,EAILC,KAAqE,GAAG,EAJnE,EAKL;EACA,OAAO,IAAA,CAAKC,QAAL,CAAcC,UAAd,EAAA,CAA2BC,OAA3B,CACLC,oCAAoC,CAAC,EACnC,GAAGJ,KADgC;AAEnCK,IAAAA,WAAW,EAAEC,qBAAa,CAACR,UAAD,CAFS;AAGnCC,IAAAA,IAAAA;AAHmC,GAAD,CAD/B,CAAP,CAAA;AAOD,CAAA;AAED;;AACO,SAASQ,0CAAT,CAELP,KAFK,EAGL;AACA,EAAA,OAAOQ,kCAAkC,CAAC,IAAA,CAAKP,QAAN,EAAgBD,KAAhB,CAAzC,CAAA;AACD;AAGD;AACA;;AAEA,MAAMS,GAAG,GAAG,sCAAZ,CAAA;MACaL,oCAAoC,GAC/CM,sBAAY,CAAuCD,GAAvC,EADP;AAyBP;AACA;AACA;AAEO,MAAME,2CAAmG,GAC9G;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENZ,QAFM,KAGyC;AAC/C,IAAA,OAAOO,kCAAkC,CACvCP,QADuC,EAEvCY,SAAS,CAACb,KAF6B,CAAlC,CAGLc,cAHK,CAGUb,QAHV,EAGoBY,SAAS,CAACb,KAAV,CAAgBe,cAHpC,CAAP,CAAA;AAID,GAAA;AATH;AAaF;AACA;;MASaP,kCAAkC,GAAG,CAChDP,QADgD,EAEhDe,MAFgD,KAGzB;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJX,WADI;AAEJY,IAAAA,mBAAmB,GAAGhB,QAAQ,CAACiB,QAAT,EAFlB;IAGJnB,IAHI;AAIJoB,IAAAA,WAAW,GAAG,KAAA;AAJV,GAAA,GAKFH,MALJ,CAAA;EAOA,OACEI,qCAAkB,CAACC,IAAnB,EAEE;AAFF,GAGGC,GAHH,CAGO;IACHC,WAAW,EAAEC,mDAAkC,CAC7C;AACEC,MAAAA,kBAAkB,EAAEC,oBAAe,CAACrB,WAAD,CADrC;MAEEY,mBAAmB,EAAEA,mBAAmB,CAACU,SAF3C;AAGEC,MAAAA,cAAc,EAAEvB,WAHlB;MAIEwB,yBAAyB,EAAEV,WAAW,GAClCW,qCAAgC,CAC9BzB,WAD8B,EAE9BY,mBAAmB,CAACU,SAFU,CADE,GAKlCI,SAAAA;AATN,KAD6C,EAY7C;AAAEC,MAAAA,qBAAqB,EAAE;AAAEjC,QAAAA,IAAAA;AAAF,OAAA;AAAzB,KAZ6C,CAD5C;IAeHkC,OAAO,EAAE,CAAChB,mBAAD,CAfN;AAgBHiB,IAAAA,GAAG,EAAElB,CAAAA,qBAAAA,GAAAA,MAAM,CAACmB,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,mBAAA;AAhB3B,GAHP,CADF,CAAA;AAuBD;;;;;;;;"}