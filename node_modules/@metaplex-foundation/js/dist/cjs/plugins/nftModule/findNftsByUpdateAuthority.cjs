'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var program = require('./program.cjs');
var findNftsByMintList = require('./findNftsByMintList.cjs');
var Operation = require('../../types/Operation.cjs');

// -----------------
// Clients
// -----------------

/** @internal */
function _findNftsByUpdateAuthorityClient(updateAuthority, options) {
  return this.metaplex.operations().getTask(findNftsByUpdateAuthorityOperation({
    updateAuthority,
    ...options
  }));
} // -----------------
// Operation
// -----------------

const Key = 'FindNftsByUpdateAuthorityOperation';
const findNftsByUpdateAuthorityOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const findNftsByUpdateAuthorityOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      updateAuthority,
      commitment
    } = operation.input;
    const mints = await program.TokenMetadataProgram.metadataV1Accounts(metaplex).selectMint().whereUpdateAuthority(updateAuthority).getDataAsPublicKeys();
    scope.throwIfCanceled();
    const nfts = await metaplex.operations().execute(findNftsByMintList.findNftsByMintListOperation({
      mints,
      commitment
    }), scope);
    scope.throwIfCanceled();
    return nfts.filter(nft => nft !== null);
  }
};

exports._findNftsByUpdateAuthorityClient = _findNftsByUpdateAuthorityClient;
exports.findNftsByUpdateAuthorityOperation = findNftsByUpdateAuthorityOperation;
exports.findNftsByUpdateAuthorityOperationHandler = findNftsByUpdateAuthorityOperationHandler;
//# sourceMappingURL=findNftsByUpdateAuthority.cjs.map
