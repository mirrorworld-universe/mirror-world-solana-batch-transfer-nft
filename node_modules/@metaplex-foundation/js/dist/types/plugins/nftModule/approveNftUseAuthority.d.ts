import { ConfirmOptions, PublicKey } from '@solana/web3.js';
import { Operation, Signer, OperationHandler } from '../../types';
import { Metaplex } from '../../Metaplex';
import { TransactionBuilder } from '../../utils';
import { SendAndConfirmTransactionResponse } from '../rpcModule';
declare const Key: "ApproveNftUseAuthorityOperation";
export declare const approveNftUseAuthorityOperation: import("../../types").OperationConstructor<ApproveNftUseAuthorityOperation, "ApproveNftUseAuthorityOperation", ApproveNftUseAuthorityInput, ApproveNftUseAuthorityOutput>;
export declare type ApproveNftUseAuthorityOperation = Operation<typeof Key, ApproveNftUseAuthorityInput, ApproveNftUseAuthorityOutput>;
export interface ApproveNftUseAuthorityInput {
    mintAddress: PublicKey;
    user: PublicKey;
    owner?: Signer;
    ownerTokenAddress?: PublicKey;
    payer?: Signer;
    numberOfUses?: number;
    tokenProgram?: PublicKey;
    systemProgram?: PublicKey;
    confirmOptions?: ConfirmOptions;
}
export interface ApproveNftUseAuthorityOutput {
    response: SendAndConfirmTransactionResponse;
}
export declare const approveNftUseAuthorityOperationHandler: OperationHandler<ApproveNftUseAuthorityOperation>;
export declare type ApproveNftUseAuthorityBuilderParams = Omit<ApproveNftUseAuthorityInput, 'confirmOptions'> & {
    instructionKey?: string;
};
export declare const approveNftUseAuthorityBuilder: (metaplex: Metaplex, params: ApproveNftUseAuthorityBuilderParams) => TransactionBuilder;
export {};
