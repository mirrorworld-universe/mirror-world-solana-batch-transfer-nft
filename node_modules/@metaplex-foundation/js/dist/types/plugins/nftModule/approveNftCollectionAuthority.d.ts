import { Metaplex } from '../../Metaplex';
import { Operation, OperationHandler, Signer } from '../../types';
import { TransactionBuilder } from '../../utils';
import { ConfirmOptions, PublicKey } from '@solana/web3.js';
import { SendAndConfirmTransactionResponse } from '../rpcModule';
declare const Key: "ApproveNftCollectionAuthorityOperation";
export declare const approveNftCollectionAuthorityOperation: import("../../types").OperationConstructor<ApproveNftCollectionAuthorityOperation, "ApproveNftCollectionAuthorityOperation", ApproveNftCollectionAuthorityInput, ApproveNftCollectionAuthorityOutput>;
export declare type ApproveNftCollectionAuthorityOperation = Operation<typeof Key, ApproveNftCollectionAuthorityInput, ApproveNftCollectionAuthorityOutput>;
export interface ApproveNftCollectionAuthorityInput {
    mintAddress: PublicKey;
    collectionAuthority: PublicKey;
    updateAuthority?: Signer;
    payer?: Signer;
    systemProgram?: PublicKey;
    confirmOptions?: ConfirmOptions;
}
export interface ApproveNftCollectionAuthorityOutput {
    response: SendAndConfirmTransactionResponse;
}
export declare const approveNftCollectionAuthorityOperationHandler: OperationHandler<ApproveNftCollectionAuthorityOperation>;
export declare type ApproveNftCollectionAuthorityBuilderParams = Omit<ApproveNftCollectionAuthorityInput, 'confirmOptions'> & {
    instructionKey?: string;
};
export declare const approveNftCollectionAuthorityBuilder: (metaplex: Metaplex, params: ApproveNftCollectionAuthorityBuilderParams) => TransactionBuilder;
export {};
