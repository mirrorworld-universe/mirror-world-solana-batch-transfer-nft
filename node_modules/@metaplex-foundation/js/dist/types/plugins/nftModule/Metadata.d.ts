import { BigNumber, Creator, Pda } from '../../types';
import { Option } from '../../utils';
import { TokenStandard, UseMethod } from '@metaplex-foundation/mpl-token-metadata';
import { PublicKey } from '@solana/web3.js';
import { JsonMetadata } from '../nftModule';
import { MetadataAccount } from './accounts';
export declare type Metadata<Json extends object = JsonMetadata> = Readonly<{
    model: 'metadata';
    address: Pda;
    mintAddress: PublicKey;
    updateAuthorityAddress: PublicKey;
    json: Option<Json>;
    jsonLoaded: boolean;
    name: string;
    symbol: string;
    uri: string;
    isMutable: boolean;
    primarySaleHappened: boolean;
    sellerFeeBasisPoints: number;
    editionNonce: Option<number>;
    creators: Creator[];
    tokenStandard: Option<TokenStandard>;
    collection: Option<MetadataParentCollection>;
    collectionDetails: Option<MetadataCollectionDetails>;
    uses: Option<MetadataUses>;
}>;
declare type MetadataUses = {
    useMethod: UseMethod;
    remaining: BigNumber;
    total: BigNumber;
};
declare type MetadataParentCollection = {
    address: PublicKey;
    verified: boolean;
};
declare type MetadataCollectionDetails = {
    version: 'V1';
    size: BigNumber;
};
export declare const isMetadata: (value: any) => value is Readonly<{
    model: 'metadata';
    address: Pda;
    mintAddress: PublicKey;
    updateAuthorityAddress: PublicKey;
    json: Option<JsonMetadata<string>>;
    jsonLoaded: boolean;
    name: string;
    symbol: string;
    uri: string;
    isMutable: boolean;
    primarySaleHappened: boolean;
    sellerFeeBasisPoints: number;
    editionNonce: Option<number>;
    creators: Readonly<{
        address: PublicKey;
        verified: boolean;
        share: number;
    }>[];
    tokenStandard: Option<TokenStandard>;
    collection: Option<MetadataParentCollection>;
    collectionDetails: Option<MetadataCollectionDetails>;
    uses: Option<MetadataUses>;
}>;
export declare function assertMetadata(value: any): asserts value is Metadata;
export declare const toMetadata: (account: MetadataAccount, json?: Option<JsonMetadata<string>> | undefined) => Metadata;
export {};
