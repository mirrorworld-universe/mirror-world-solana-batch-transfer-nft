import type { PublicKey } from '@solana/web3.js';
import { Pda, SplTokenAmount } from '../../types';
import { Option } from '../../utils';
import { TokenAccount } from './accounts';
import { Mint } from './Mint';
import { AccountState } from '@solana/spl-token';
export declare type Token = Readonly<{
    model: 'token';
    address: PublicKey | Pda;
    isAssociatedToken: boolean;
    mintAddress: PublicKey;
    ownerAddress: PublicKey;
    amount: SplTokenAmount;
    closeAuthorityAddress: Option<PublicKey>;
    delegateAddress: Option<PublicKey>;
    delegateAmount: SplTokenAmount;
    state: AccountState;
}>;
export declare const isToken: (value: any) => value is Readonly<{
    model: 'token';
    address: PublicKey | Pda;
    isAssociatedToken: boolean;
    mintAddress: PublicKey;
    ownerAddress: PublicKey;
    amount: SplTokenAmount;
    closeAuthorityAddress: Option<PublicKey>;
    delegateAddress: Option<PublicKey>;
    delegateAmount: SplTokenAmount;
    state: AccountState;
}>;
export declare function assertToken(value: any): asserts value is Token;
export declare const toToken: (account: TokenAccount) => Token;
export declare type TokenWithMint = Omit<Token, 'model' | 'mintAddress'> & Readonly<{
    model: 'tokenWithMint';
    mint: Mint;
}>;
export declare const isTokenWithMint: (value: any) => value is TokenWithMint;
export declare function assertTokenWithMint(value: any): asserts value is TokenWithMint;
export declare const toTokenWithMint: (tokenAccount: TokenAccount, mintModel: Mint) => TokenWithMint;
