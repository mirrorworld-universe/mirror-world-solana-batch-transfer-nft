import { Metaplex } from '../../Metaplex';
import { KeypairSigner, Operation, OperationHandler, Signer } from '../../types';
import { TransactionBuilder } from '../../utils';
import { ConfirmOptions, PublicKey } from '@solana/web3.js';
import { SendAndConfirmTransactionResponse } from '../rpcModule';
declare const Key: "RevokeTokenDelegateAuthorityOperation";
export declare const revokeTokenDelegateAuthorityOperation: import("../../types").OperationConstructor<RevokeTokenDelegateAuthorityOperation, "RevokeTokenDelegateAuthorityOperation", RevokeTokenDelegateAuthorityInput, RevokeTokenDelegateAuthorityOutput>;
export declare type RevokeTokenDelegateAuthorityOperation = Operation<typeof Key, RevokeTokenDelegateAuthorityInput, RevokeTokenDelegateAuthorityOutput>;
export interface RevokeTokenDelegateAuthorityInput {
    mintAddress: PublicKey;
    owner?: Signer;
    tokenAddress?: PublicKey;
    multiSigners?: KeypairSigner[];
    tokenProgram?: PublicKey;
    confirmOptions?: ConfirmOptions;
}
export interface RevokeTokenDelegateAuthorityOutput {
    response: SendAndConfirmTransactionResponse;
}
export declare const revokeTokenDelegateAuthorityOperationHandler: OperationHandler<RevokeTokenDelegateAuthorityOperation>;
export declare type RevokeTokenDelegateAuthorityBuilderParams = Omit<RevokeTokenDelegateAuthorityInput, 'confirmOptions'> & {
    instructionKey?: string;
};
export declare const revokeTokenDelegateAuthorityBuilder: (metaplex: Metaplex, params: RevokeTokenDelegateAuthorityBuilderParams) => TransactionBuilder;
export {};
