import type { Metaplex } from '../../Metaplex';
import { _approveTokenDelegateAuthorityBuildersClient } from './approveTokenDelegateAuthority';
import { _createMintBuildersClient } from './createMint';
import { _createTokenBuildersClient, _createTokenIfMissingBuildersClient } from './createToken';
import { _createTokenWithMintBuildersClient } from './createTokenWithMint';
import { _freezeTokensBuildersClient } from './freezeTokens';
import { _mintTokensBuildersClient } from './mintTokens';
import { _revokeTokenDelegateAuthorityBuildersClient } from './revokeTokenDelegateAuthority';
import { _sendTokensBuildersClient } from './sendTokens';
import { _thawTokensBuildersClient } from './thawTokens';
export declare class TokenBuildersClient {
    protected readonly metaplex: Metaplex;
    constructor(metaplex: Metaplex);
    createMint: typeof _createMintBuildersClient;
    createToken: typeof _createTokenBuildersClient;
    createTokenIfMissing: typeof _createTokenIfMissingBuildersClient;
    createTokenWithMint: typeof _createTokenWithMintBuildersClient;
    mint: typeof _mintTokensBuildersClient;
    send: typeof _sendTokensBuildersClient;
    freeze: typeof _freezeTokensBuildersClient;
    thaw: typeof _thawTokensBuildersClient;
    approveDelegateAuthority: typeof _approveTokenDelegateAuthorityBuildersClient;
    revokeDelegateAuthority: typeof _revokeTokenDelegateAuthorityBuildersClient;
}
