{"version":3,"file":"createCandyMachine.mjs","sources":["../../../../src/plugins/candyMachineModule/createCandyMachine.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport {\n  assertSameCurrencies,\n  isSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  SOL,\n  toBigNumber,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport {\n  DisposableScope,\n  Option,\n  RequiredKeys,\n  TransactionBuilder,\n} from '@/utils';\nimport {\n  createInitializeCandyMachineInstruction,\n  createSetCollectionInstruction,\n  Creator,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport {\n  findCollectionAuthorityRecordPda,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n  TokenMetadataProgram,\n} from '../nftModule';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport {\n  CandyMachineConfigs,\n  toCandyMachineInstructionData,\n} from './CandyMachine';\nimport { ExpectedSignerError } from '@/errors';\nimport { getCandyMachineAccountSizeFromData } from './helpers';\nimport { findCandyMachineCollectionPda } from './pdas';\nimport { CandyMachineProgram } from './program';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateCandyMachineOperation' as const;\nexport const createCandyMachineOperation =\n  useOperation<CreateCandyMachineOperation>(Key);\nexport type CreateCandyMachineOperation = Operation<\n  typeof Key,\n  CreateCandyMachineInput,\n  CreateCandyMachineOutput\n>;\n\nexport type CreateCandyMachineInputWithoutConfigs = {\n  // Accounts and Models.\n  candyMachine?: Signer; // Defaults to Keypair.generate().\n  payer?: Signer; // Defaults to mx.identity().\n  authority?: Signer | PublicKey; // Defaults to mx.identity().\n  collection?: Option<PublicKey>; // Defaults to no collection.\n\n  // Transaction Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateCandyMachineInput = CreateCandyMachineInputWithoutConfigs &\n  RequiredKeys<\n    Partial<CandyMachineConfigs>,\n    'price' | 'sellerFeeBasisPoints' | 'itemsAvailable'\n  >;\n\nexport type CreateCandyMachineOutput = {\n  response: SendAndConfirmTransactionResponse;\n  candyMachineSigner: Signer;\n  payer: Signer;\n  wallet: PublicKey;\n  authority: PublicKey;\n  creators: Creator[];\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createCandyMachineOperationHandler: OperationHandler<CreateCandyMachineOperation> =\n  {\n    async handle(\n      operation: CreateCandyMachineOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateCandyMachineOutput> {\n      const builder = await createCandyMachineBuilder(\n        metaplex,\n        operation.input\n      );\n      scope.throwIfCanceled();\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateCandyMachineBuilderParams = Omit<\n  CreateCandyMachineInput,\n  'confirmOptions'\n> & {\n  createAccountInstructionKey?: string;\n  initializeCandyMachineInstructionKey?: string;\n  setCollectionInstructionKey?: string;\n};\n\nexport type CreateCandyMachineBuilderContext = Omit<\n  CreateCandyMachineOutput,\n  'response'\n>;\n\nexport const createCandyMachineBuilder = async (\n  metaplex: Metaplex,\n  params: CreateCandyMachineBuilderParams\n): Promise<TransactionBuilder<CreateCandyMachineBuilderContext>> => {\n  const candyMachine = params.candyMachine ?? Keypair.generate();\n  const payer: Signer = params.payer ?? metaplex.identity();\n  const authority = params.authority ?? metaplex.identity();\n  const collection: PublicKey | null = params.collection ?? null;\n\n  const { data, wallet, tokenMint } = toCandyMachineInstructionData(\n    candyMachine.publicKey,\n    {\n      ...params,\n      wallet: params.wallet ?? metaplex.identity().publicKey,\n      tokenMint: params.tokenMint ?? null,\n      symbol: params.symbol ?? '',\n      maxEditionSupply: params.maxEditionSupply ?? toBigNumber(0),\n      isMutable: params.isMutable ?? true,\n      retainAuthority: params.retainAuthority ?? true,\n      goLiveDate: params.goLiveDate ?? null,\n      endSettings: params.endSettings ?? null,\n      creators: params.creators ?? [\n        {\n          address: metaplex.identity().publicKey,\n          share: 100,\n          verified: false,\n        },\n      ],\n      hiddenSettings: params.hiddenSettings ?? null,\n      whitelistMintSettings: params.whitelistMintSettings ?? null,\n      gatekeeper: params.gatekeeper ?? null,\n    }\n  );\n\n  const initializeInstruction = createInitializeCandyMachineInstruction(\n    {\n      candyMachine: candyMachine.publicKey,\n      wallet,\n      authority: toPublicKey(authority),\n      payer: payer.publicKey,\n    },\n    { data }\n  );\n\n  if (tokenMint) {\n    initializeInstruction.keys.push({\n      pubkey: tokenMint,\n      isWritable: false,\n      isSigner: false,\n    });\n  } else {\n    assertSameCurrencies(params.price, SOL);\n  }\n\n  return (\n    TransactionBuilder.make<CreateCandyMachineBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        candyMachineSigner: candyMachine,\n        payer,\n        wallet,\n        authority: toPublicKey(authority),\n        creators: data.creators,\n      })\n\n      // Create an empty account for the candy machine.\n      .add(\n        await metaplex\n          .system()\n          .builders()\n          .createAccount({\n            payer,\n            newAccount: candyMachine,\n            space: getCandyMachineAccountSizeFromData(data),\n            program: CandyMachineProgram.publicKey,\n            instructionKey:\n              params.createAccountInstructionKey ?? 'createAccount',\n          })\n      )\n\n      // Initialize the candy machine account.\n      .add({\n        instruction: initializeInstruction,\n        signers: [candyMachine, payer],\n        key:\n          params.initializeCandyMachineInstructionKey ??\n          'initializeCandyMachine',\n      })\n\n      // Set the collection.\n      .when(!!collection, (builder) => {\n        if (!isSigner(authority)) {\n          throw new ExpectedSignerError('authority', 'PublicKey', {\n            problemSuffix:\n              'You are trying to create a Candy Machine with a Collection NFT. ' +\n              'In order for the Collection NFT to be set successfully, you must provide the authority as a Signer.',\n            solution:\n              'Please provide the \"authority\" parameter as a Signer if you want to set the Collection NFT upon creation. ' +\n              'Alternatively, you may remove the \"collection\" parameter to create a Candy Machine without an associated Collection NFT.',\n          });\n        }\n\n        const collectionMint = collection as PublicKey;\n        const metadata = findMetadataPda(collectionMint);\n        const edition = findMasterEditionV2Pda(collectionMint);\n        const collectionPda = findCandyMachineCollectionPda(\n          candyMachine.publicKey\n        );\n        const collectionAuthorityRecord = findCollectionAuthorityRecordPda(\n          collectionMint,\n          collectionPda\n        );\n\n        return builder.add({\n          instruction: createSetCollectionInstruction({\n            candyMachine: candyMachine.publicKey,\n            authority: toPublicKey(authority),\n            collectionPda,\n            payer: payer.publicKey,\n            metadata,\n            mint: collectionMint,\n            edition,\n            collectionAuthorityRecord,\n            tokenMetadataProgram: TokenMetadataProgram.publicKey,\n          }),\n          signers: [authority],\n          key: params.setCollectionInstructionKey ?? 'setCollection',\n        });\n      })\n  );\n};\n"],"names":["Key","createCandyMachineOperation","useOperation","createCandyMachineOperationHandler","handle","operation","metaplex","scope","builder","createCandyMachineBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","candyMachine","Keypair","generate","payer","identity","authority","collection","data","wallet","tokenMint","toCandyMachineInstructionData","publicKey","symbol","maxEditionSupply","toBigNumber","isMutable","retainAuthority","goLiveDate","endSettings","creators","address","share","verified","hiddenSettings","whitelistMintSettings","gatekeeper","initializeInstruction","createInitializeCandyMachineInstruction","toPublicKey","keys","push","pubkey","isWritable","isSigner","assertSameCurrencies","price","SOL","TransactionBuilder","make","setFeePayer","setContext","candyMachineSigner","add","system","builders","createAccount","newAccount","space","getCandyMachineAccountSizeFromData","program","CandyMachineProgram","instructionKey","createAccountInstructionKey","instruction","signers","key","initializeCandyMachineInstructionKey","when","ExpectedSignerError","problemSuffix","solution","collectionMint","metadata","findMetadataPda","edition","findMasterEditionV2Pda","collectionPda","findCandyMachineCollectionPda","collectionAuthorityRecord","findCollectionAuthorityRecordPda","createSetCollectionInstruction","mint","tokenMetadataProgram","TokenMetadataProgram","setCollectionInstructionKey"],"mappings":"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"}