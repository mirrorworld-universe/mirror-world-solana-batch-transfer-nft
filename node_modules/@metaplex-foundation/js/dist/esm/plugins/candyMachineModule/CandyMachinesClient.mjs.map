{"version":3,"file":"CandyMachinesClient.mjs","sources":["../../../../src/plugins/candyMachineModule/CandyMachinesClient.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { CandyMachinesBuildersClient } from './CandyMachinesBuildersClient';\nimport { NftWithToken } from '../nftModule';\nimport { Task } from '@/utils';\nimport { toPublicKey } from '@/types';\nimport { CandyMachine } from './CandyMachine';\nimport {\n  CreateCandyMachineInput,\n  CreateCandyMachineInputWithoutConfigs,\n  createCandyMachineOperation,\n  CreateCandyMachineOutput,\n} from './createCandyMachine';\nimport {\n  CandyMachineJsonConfigs,\n  toCandyMachineConfigsFromJson,\n} from './CandyMachineJsonConfigs';\nimport {\n  findCandyMachineByAddressOperation,\n  FindCandyMachineByAddressInput,\n} from './findCandyMachineByAddress';\nimport {\n  FindCandyMachinesByPublicKeyFieldInput,\n  findCandyMachinesByPublicKeyFieldOperation,\n} from './findCandyMachinesByPublicKeyField';\nimport {\n  FindMintedNftsByCandyMachineInput,\n  findMintedNftsByCandyMachineOperation,\n  FindMintedNftsByCandyMachineOutput,\n} from './findMintedNftsByCandyMachine';\nimport {\n  InsertItemsToCandyMachineInput,\n  insertItemsToCandyMachineOperation,\n  InsertItemsToCandyMachineOutput,\n} from './insertItemsToCandyMachine';\nimport {\n  UpdateCandyMachineInput,\n  UpdateCandyMachineInputWithoutConfigs,\n  updateCandyMachineOperation,\n  UpdateCandyMachineOutput,\n} from './updateCandyMachine';\nimport {\n  MintCandyMachineInput,\n  mintCandyMachineOperation,\n  MintCandyMachineOutput,\n} from './mintCandyMachine';\nimport { CandyMachineBotTaxError } from './errors';\nimport {\n  DeleteCandyMachineInput,\n  deleteCandyMachineOperation,\n  DeleteCandyMachineOutput,\n} from './deleteCandyMachine';\n\nexport class CandyMachinesClient {\n  constructor(readonly metaplex: Metaplex) {}\n\n  builders() {\n    return new CandyMachinesBuildersClient(this.metaplex);\n  }\n\n  create(\n    input: CreateCandyMachineInput\n  ): Task<CreateCandyMachineOutput & { candyMachine: CandyMachine }> {\n    return new Task(async (scope) => {\n      const operation = createCandyMachineOperation(input);\n      const output = await this.metaplex.operations().execute(operation, scope);\n      scope.throwIfCanceled();\n      const candyMachine = await this.findByAddress(\n        output.candyMachineSigner.publicKey\n      ).run(scope);\n      return { ...output, candyMachine };\n    });\n  }\n\n  createFromJsonConfig(\n    input: CreateCandyMachineInputWithoutConfigs & {\n      json: CandyMachineJsonConfigs;\n    }\n  ) {\n    const { json, ...otherInputs } = input;\n    const configs = toCandyMachineConfigsFromJson(json);\n    return this.create({ ...otherInputs, ...configs });\n  }\n\n  delete(\n    candyMachine: CandyMachine,\n    options?: Omit<DeleteCandyMachineInput, 'candyMachine'>\n  ): Task<DeleteCandyMachineOutput> {\n    return this.metaplex\n      .operations()\n      .getTask(deleteCandyMachineOperation({ candyMachine, ...options }));\n  }\n\n  findAllByWallet(\n    wallet: PublicKey,\n    options?: Omit<FindCandyMachinesByPublicKeyFieldInput, 'type' | 'publicKey'>\n  ): Task<CandyMachine[]> {\n    return this.metaplex.operations().getTask(\n      findCandyMachinesByPublicKeyFieldOperation({\n        type: 'wallet',\n        publicKey: wallet,\n        ...options,\n      })\n    );\n  }\n\n  findAllByAuthority(\n    authority: PublicKey,\n    options?: Omit<FindCandyMachinesByPublicKeyFieldInput, 'type' | 'publicKey'>\n  ): Task<CandyMachine[]> {\n    return this.metaplex.operations().getTask(\n      findCandyMachinesByPublicKeyFieldOperation({\n        type: 'authority',\n        publicKey: authority,\n        ...options,\n      })\n    );\n  }\n\n  findByAddress(\n    address: PublicKey,\n    options?: Omit<FindCandyMachineByAddressInput, 'address'>\n  ): Task<CandyMachine> {\n    return this.metaplex\n      .operations()\n      .getTask(findCandyMachineByAddressOperation({ address, ...options }));\n  }\n\n  findMintedNfts(\n    candyMachine: PublicKey,\n    options?: Omit<FindMintedNftsByCandyMachineInput, 'candyMachine'>\n  ): Task<FindMintedNftsByCandyMachineOutput> {\n    return this.metaplex\n      .operations()\n      .getTask(\n        findMintedNftsByCandyMachineOperation({ candyMachine, ...options })\n      );\n  }\n\n  insertItems(\n    candyMachine: CandyMachine,\n    input: Omit<InsertItemsToCandyMachineInput, 'candyMachine'>\n  ): Task<InsertItemsToCandyMachineOutput> {\n    return this.metaplex.operations().getTask(\n      insertItemsToCandyMachineOperation({\n        candyMachine,\n        ...input,\n      })\n    );\n  }\n\n  mint(\n    candyMachine: CandyMachine,\n    input: Omit<MintCandyMachineInput, 'candyMachine'> = {}\n  ): Task<MintCandyMachineOutput & { nft: NftWithToken }> {\n    return new Task(async (scope) => {\n      const operation = mintCandyMachineOperation({ candyMachine, ...input });\n      const output = await this.metaplex.operations().execute(operation, scope);\n      scope.throwIfCanceled();\n\n      let nft: NftWithToken;\n      try {\n        nft = (await this.metaplex\n          .nfts()\n          .findByMint(output.mintSigner.publicKey, {\n            tokenAddress: output.tokenAddress,\n          })\n          .run(scope)) as NftWithToken;\n      } catch (error) {\n        throw new CandyMachineBotTaxError(\n          this.metaplex.rpc().getSolanaExporerUrl(output.response.signature),\n          error as Error\n        );\n      }\n      return { nft, ...output };\n    });\n  }\n\n  refresh(\n    candyMachine: CandyMachine | PublicKey,\n    options?: Omit<FindCandyMachineByAddressInput, 'address'>\n  ): Task<CandyMachine> {\n    return this.findByAddress(toPublicKey(candyMachine), options);\n  }\n\n  update(\n    candyMachine: CandyMachine,\n    input: Omit<UpdateCandyMachineInput, 'candyMachine'>\n  ): Task<UpdateCandyMachineOutput> {\n    return this.metaplex\n      .operations()\n      .getTask(updateCandyMachineOperation({ candyMachine, ...input }));\n  }\n\n  updateFromJsonConfig(\n    candyMachine: CandyMachine,\n    input: Omit<UpdateCandyMachineInputWithoutConfigs, 'candyMachine'> & {\n      json: CandyMachineJsonConfigs;\n    }\n  ) {\n    const { json, ...otherInputs } = input;\n    const configs = toCandyMachineConfigsFromJson(json);\n    return this.update(candyMachine, { ...otherInputs, ...configs });\n  }\n}\n"],"names":["CandyMachinesClient","constructor","metaplex","builders","CandyMachinesBuildersClient","create","input","Task","scope","operation","createCandyMachineOperation","output","operations","execute","throwIfCanceled","candyMachine","findByAddress","candyMachineSigner","publicKey","run","createFromJsonConfig","json","otherInputs","configs","toCandyMachineConfigsFromJson","delete","options","getTask","deleteCandyMachineOperation","findAllByWallet","wallet","findCandyMachinesByPublicKeyFieldOperation","type","findAllByAuthority","authority","address","findCandyMachineByAddressOperation","findMintedNfts","findMintedNftsByCandyMachineOperation","insertItems","insertItemsToCandyMachineOperation","mint","mintCandyMachineOperation","nft","nfts","findByMint","mintSigner","tokenAddress","error","CandyMachineBotTaxError","rpc","getSolanaExporerUrl","response","signature","refresh","toPublicKey","update","updateCandyMachineOperation","updateFromJsonConfig"],"mappings":"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"}