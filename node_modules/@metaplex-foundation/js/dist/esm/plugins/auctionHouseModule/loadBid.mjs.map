{"version":3,"file":"loadBid.mjs","sources":["../../../../src/plugins/auctionHouseModule/loadBid.ts"],"sourcesContent":["import type { Commitment } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { useOperation, Operation, OperationHandler, amount } from '@/types';\nimport { assert, DisposableScope } from '@/utils';\nimport { Bid, LazyBid } from './Bid';\nimport { assertNftOrSftWithToken } from '../nftModule';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadBidOperation' as const;\nexport const loadBidOperation = useOperation<LoadBidOperation>(Key);\nexport type LoadBidOperation = Operation<typeof Key, LoadBidInput, Bid>;\n\nexport type LoadBidInput = {\n  lazyBid: LazyBid;\n  loadJsonMetadata?: boolean; // Default: true\n  commitment?: Commitment;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const loadBidOperationHandler: OperationHandler<LoadBidOperation> = {\n  handle: async (\n    operation: LoadBidOperation,\n    metaplex: Metaplex,\n    scope: DisposableScope\n  ) => {\n    const { lazyBid, loadJsonMetadata = true, commitment } = operation.input;\n\n    const bid: Omit<Bid, 'asset' | 'tokens'> = {\n      ...lazyBid,\n      model: 'bid',\n      lazy: false,\n    };\n\n    if (lazyBid.tokenAddress) {\n      const asset = await metaplex\n        .nfts()\n        .findByToken(lazyBid.tokenAddress, {\n          commitment,\n          loadJsonMetadata,\n        })\n        .run(scope);\n      scope.throwIfCanceled();\n\n      assertNftOrSftWithToken(asset);\n      assert(\n        asset.metadataAddress.equals(lazyBid.metadataAddress),\n        `Asset metadata address must be ${lazyBid.metadataAddress}`\n      );\n\n      return {\n        ...bid,\n        isPublic: false,\n        asset,\n        tokens: amount(lazyBid.tokens, asset.mint.currency),\n      };\n    } else {\n      const asset = await metaplex\n        .nfts()\n        .findByMetadata(lazyBid.metadataAddress, {\n          commitment,\n          loadJsonMetadata,\n        })\n        .run(scope);\n      scope.throwIfCanceled();\n\n      return {\n        ...bid,\n        isPublic: true,\n        asset,\n        tokens: amount(lazyBid.tokens, asset.mint.currency),\n      };\n    }\n  },\n};\n"],"names":["Key","loadBidOperation","useOperation","loadBidOperationHandler","handle","operation","metaplex","scope","lazyBid","loadJsonMetadata","commitment","input","bid","model","lazy","tokenAddress","asset","nfts","findByToken","run","throwIfCanceled","assertNftOrSftWithToken","assert","metadataAddress","equals","isPublic","tokens","amount","mint","currency","findByMetadata"],"mappings":";;;;;AAQA;AACA;;AAEA,MAAMA,GAAG,GAAG,kBAAZ,CAAA;MACaC,gBAAgB,GAAGC,YAAY,CAAmBF,GAAnB,EAArC;AASP;AACA;AACA;AAEO,MAAMG,uBAA2D,GAAG;AACzEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC,OAAF;AAAWC,MAAAA,gBAAgB,GAAG,IAA9B;AAAoCC,MAAAA,UAAAA;KAAeL,GAAAA,SAAS,CAACM,KAAnE,CAAA;AAEA,IAAA,MAAMC,GAAkC,GAAG,EACzC,GAAGJ,OADsC;AAEzCK,MAAAA,KAAK,EAAE,KAFkC;AAGzCC,MAAAA,IAAI,EAAE,KAAA;KAHR,CAAA;;IAMA,IAAIN,OAAO,CAACO,YAAZ,EAA0B;AACxB,MAAA,MAAMC,KAAK,GAAG,MAAMV,QAAQ,CACzBW,IADiB,EAEjBC,CAAAA,WAFiB,CAELV,OAAO,CAACO,YAFH,EAEiB;QACjCL,UADiC;AAEjCD,QAAAA,gBAAAA;AAFiC,OAFjB,CAMjBU,CAAAA,GANiB,CAMbZ,KANa,CAApB,CAAA;AAOAA,MAAAA,KAAK,CAACa,eAAN,EAAA,CAAA;MAEAC,uBAAuB,CAACL,KAAD,CAAvB,CAAA;AACAM,MAAAA,MAAM,CACJN,KAAK,CAACO,eAAN,CAAsBC,MAAtB,CAA6BhB,OAAO,CAACe,eAArC,CADI,EAEH,CAAA,+BAAA,EAAiCf,OAAO,CAACe,eAAgB,EAFtD,CAAN,CAAA;MAKA,OAAO,EACL,GAAGX,GADE;AAELa,QAAAA,QAAQ,EAAE,KAFL;QAGLT,KAHK;QAILU,MAAM,EAAEC,MAAM,CAACnB,OAAO,CAACkB,MAAT,EAAiBV,KAAK,CAACY,IAAN,CAAWC,QAA5B,CAAA;OAJhB,CAAA;AAMD,KAtBD,MAsBO;AACL,MAAA,MAAMb,KAAK,GAAG,MAAMV,QAAQ,CACzBW,IADiB,EAEjBa,CAAAA,cAFiB,CAEFtB,OAAO,CAACe,eAFN,EAEuB;QACvCb,UADuC;AAEvCD,QAAAA,gBAAAA;AAFuC,OAFvB,CAMjBU,CAAAA,GANiB,CAMbZ,KANa,CAApB,CAAA;AAOAA,MAAAA,KAAK,CAACa,eAAN,EAAA,CAAA;MAEA,OAAO,EACL,GAAGR,GADE;AAELa,QAAAA,QAAQ,EAAE,IAFL;QAGLT,KAHK;QAILU,MAAM,EAAEC,MAAM,CAACnB,OAAO,CAACkB,MAAT,EAAiBV,KAAK,CAACY,IAAN,CAAWC,QAA5B,CAAA;OAJhB,CAAA;AAMD,KAAA;AACF,GAAA;AArDwE;;;;"}