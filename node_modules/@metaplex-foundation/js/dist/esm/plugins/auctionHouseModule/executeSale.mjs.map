{"version":3,"file":"executeSale.mjs","sources":["../../../../src/plugins/auctionHouseModule/executeSale.ts"],"sourcesContent":["import {\n  ConfirmOptions,\n  PublicKey,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder, Option } from '@/utils';\nimport {\n  createAuctioneerExecuteSaleInstruction,\n  createExecuteSaleInstruction,\n  createPrintPurchaseReceiptInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Pda,\n  lamports,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  amount,\n  isSigner,\n} from '@/types';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../tokenModule';\nimport { AuctionHouse } from './AuctionHouse';\nimport {\n  findAuctionHouseBuyerEscrowPda,\n  findAuctionHouseProgramAsSignerPda,\n  findAuctionHouseTradeStatePda,\n  findPurchaseReceiptPda,\n  findAuctioneerPda,\n} from './pdas';\nimport { Bid } from './Bid';\nimport { Listing } from './Listing';\nimport {\n  AuctioneerAuthorityRequiredError,\n  BidAndListingHaveDifferentAuctionHousesError,\n  BidAndListingHaveDifferentMintsError,\n} from './errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ExecuteSaleOperation' as const;\nexport const executeSaleOperation = useOperation<ExecuteSaleOperation>(Key);\nexport type ExecuteSaleOperation = Operation<\n  typeof Key,\n  ExecuteSaleInput,\n  ExecuteSaleOutput\n>;\n\nexport type ExecuteSaleInput = {\n  auctionHouse: AuctionHouse;\n  auctioneerAuthority?: Signer; // Use Auctioneer ix when provided\n  listing: Listing;\n  bid: Bid;\n  bookkeeper?: Signer; // Default: identity\n  printReceipt?: boolean; // Default: true\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type ExecuteSaleOutput = {\n  response: SendAndConfirmTransactionResponse;\n  sellerTradeState: PublicKey;\n  buyerTradeState: PublicKey;\n  buyer: PublicKey;\n  seller: PublicKey;\n  metadata: PublicKey;\n  bookkeeper: Option<PublicKey>;\n  receipt: Option<Pda>;\n  price: SolAmount | SplTokenAmount;\n  tokens: SplTokenAmount;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const executeSaleOperationHandler: OperationHandler<ExecuteSaleOperation> =\n  {\n    handle: async (operation: ExecuteSaleOperation, metaplex: Metaplex) =>\n      executeSaleBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      ),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type ExecuteSaleBuilderParams = Omit<\n  ExecuteSaleInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport type ExecuteSaleBuilderContext = Omit<ExecuteSaleOutput, 'response'>;\n\nexport const executeSaleBuilder = (\n  metaplex: Metaplex,\n  params: ExecuteSaleBuilderParams\n): TransactionBuilder<ExecuteSaleBuilderContext> => {\n  const { auctionHouse, listing, bid, auctioneerAuthority } = params;\n  const { sellerAddress, asset } = listing;\n  const { buyerAddress, tokens } = bid;\n\n  if (!listing.auctionHouse.address.equals(bid.auctionHouse.address)) {\n    throw new BidAndListingHaveDifferentAuctionHousesError();\n  }\n  if (!listing.asset.address.equals(bid.asset.address)) {\n    throw new BidAndListingHaveDifferentMintsError();\n  }\n  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  // Data.\n  const price = auctionHouse.isNative\n    ? lamports(bid.price.basisPoints)\n    : amount(bid.price.basisPoints, auctionHouse.treasuryMint.currency);\n\n  // Accounts.\n  const sellerPaymentReceiptAccount = auctionHouse.isNative\n    ? sellerAddress\n    : findAssociatedTokenAccountPda(\n        auctionHouse.treasuryMint.address,\n        sellerAddress\n      );\n  const buyerReceiptTokenAccount = findAssociatedTokenAccountPda(\n    asset.address,\n    buyerAddress\n  );\n  const escrowPayment = findAuctionHouseBuyerEscrowPda(\n    auctionHouse.address,\n    buyerAddress\n  );\n  const freeTradeState = findAuctionHouseTradeStatePda(\n    auctionHouse.address,\n    sellerAddress,\n    auctionHouse.treasuryMint.address,\n    asset.address,\n    lamports(0).basisPoints,\n    tokens.basisPoints,\n    asset.token.address\n  );\n  const programAsSigner = findAuctionHouseProgramAsSignerPda();\n\n  const accounts = {\n    buyer: buyerAddress,\n    seller: sellerAddress,\n    tokenAccount: asset.token.address,\n    tokenMint: asset.address,\n    metadata: asset.metadataAddress,\n    treasuryMint: auctionHouse.treasuryMint.address,\n    escrowPaymentAccount: escrowPayment,\n    sellerPaymentReceiptAccount,\n    buyerReceiptTokenAccount,\n    authority: auctionHouse.authorityAddress,\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n    auctionHouseTreasury: auctionHouse.treasuryAccountAddress,\n    buyerTradeState: bid.tradeStateAddress,\n    sellerTradeState: listing.tradeStateAddress,\n    freeTradeState,\n    programAsSigner,\n  };\n\n  // Args.\n  const args = {\n    freeTradeStateBump: freeTradeState.bump,\n    escrowPaymentBump: escrowPayment.bump,\n    programAsSignerBump: programAsSigner.bump,\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Execute Sale Instruction\n  let executeSaleInstruction = createExecuteSaleInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    executeSaleInstruction = createAuctioneerExecuteSaleInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: findAuctioneerPda(\n          auctionHouse.address,\n          auctioneerAuthority.publicKey\n        ),\n      },\n      args\n    );\n  }\n\n  // Provide additional keys to pay royalties.\n  asset.creators.forEach(({ address }) => {\n    executeSaleInstruction.keys.push({\n      pubkey: address,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    // Provide ATA to receive SPL token royalty if is not native SOL sale.\n    if (!auctionHouse.isNative) {\n      executeSaleInstruction.keys.push({\n        pubkey: findAssociatedTokenAccountPda(\n          auctionHouse.treasuryMint.address,\n          address\n        ),\n        isWritable: true,\n        isSigner: false,\n      });\n    }\n  });\n\n  // Signers.\n  const executeSaleSigners = [auctioneerAuthority].filter(isSigner);\n\n  // Receipt.\n  const shouldPrintReceipt =\n    (params.printReceipt ?? true) &&\n    Boolean(listing.receiptAddress && bid.receiptAddress);\n  const bookkeeper = params.bookkeeper ?? metaplex.identity();\n  const purchaseReceipt = findPurchaseReceiptPda(\n    listing.tradeStateAddress,\n    bid.tradeStateAddress\n  );\n\n  return (\n    TransactionBuilder.make<ExecuteSaleBuilderContext>()\n      .setContext({\n        sellerTradeState: listing.tradeStateAddress,\n        buyerTradeState: bid.tradeStateAddress,\n        buyer: buyerAddress,\n        seller: sellerAddress,\n        metadata: asset.metadataAddress,\n        bookkeeper: shouldPrintReceipt ? bookkeeper.publicKey : null,\n        receipt: shouldPrintReceipt ? purchaseReceipt : null,\n        price,\n        tokens,\n      })\n\n      // Execute Sale.\n      .add({\n        instruction: executeSaleInstruction,\n        signers: executeSaleSigners,\n        key: params.instructionKey ?? 'executeSale',\n      })\n\n      // Print the Purchase Receipt.\n      .when(shouldPrintReceipt, (builder) =>\n        builder.add({\n          instruction: createPrintPurchaseReceiptInstruction(\n            {\n              purchaseReceipt: purchaseReceipt,\n              listingReceipt: listing.receiptAddress as Pda,\n              bidReceipt: bid.receiptAddress as Pda,\n              bookkeeper: bookkeeper.publicKey,\n              instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            { purchaseReceiptBump: purchaseReceipt.bump }\n          ),\n          signers: [bookkeeper],\n          key: 'printPurchaseReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","executeSaleOperation","useOperation","executeSaleOperationHandler","handle","operation","metaplex","executeSaleBuilder","input","sendAndConfirm","confirmOptions","params","auctionHouse","listing","bid","auctioneerAuthority","sellerAddress","asset","buyerAddress","tokens","address","equals","BidAndListingHaveDifferentAuctionHousesError","BidAndListingHaveDifferentMintsError","hasAuctioneer","AuctioneerAuthorityRequiredError","price","isNative","lamports","basisPoints","amount","treasuryMint","currency","sellerPaymentReceiptAccount","findAssociatedTokenAccountPda","buyerReceiptTokenAccount","escrowPayment","findAuctionHouseBuyerEscrowPda","freeTradeState","findAuctionHouseTradeStatePda","token","programAsSigner","findAuctionHouseProgramAsSignerPda","accounts","buyer","seller","tokenAccount","tokenMint","metadata","metadataAddress","escrowPaymentAccount","authority","authorityAddress","auctionHouseFeeAccount","feeAccountAddress","auctionHouseTreasury","treasuryAccountAddress","buyerTradeState","tradeStateAddress","sellerTradeState","args","freeTradeStateBump","bump","escrowPaymentBump","programAsSignerBump","buyerPrice","tokenSize","executeSaleInstruction","createExecuteSaleInstruction","createAuctioneerExecuteSaleInstruction","publicKey","ahAuctioneerPda","findAuctioneerPda","creators","forEach","keys","push","pubkey","isWritable","isSigner","executeSaleSigners","filter","shouldPrintReceipt","printReceipt","Boolean","receiptAddress","bookkeeper","identity","purchaseReceipt","findPurchaseReceiptPda","TransactionBuilder","make","setContext","receipt","add","instruction","signers","key","instructionKey","when","builder","createPrintPurchaseReceiptInstruction","listingReceipt","bidReceipt","SYSVAR_INSTRUCTIONS_PUBKEY","purchaseReceiptBump"],"mappings":"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"}