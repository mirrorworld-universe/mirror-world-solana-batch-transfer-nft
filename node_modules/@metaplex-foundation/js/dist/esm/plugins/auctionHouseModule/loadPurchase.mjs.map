{"version":3,"file":"loadPurchase.mjs","sources":["../../../../src/plugins/auctionHouseModule/loadPurchase.ts"],"sourcesContent":["import type { Commitment } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { useOperation, Operation, OperationHandler, amount } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { Purchase, LazyPurchase } from './Purchase';\nimport { assertNftOrSftWithToken } from '../nftModule';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadPurchaseOperation' as const;\nexport const loadPurchaseOperation = useOperation<LoadPurchaseOperation>(Key);\nexport type LoadPurchaseOperation = Operation<\n  typeof Key,\n  LoadPurchaseInput,\n  Purchase\n>;\n\nexport type LoadPurchaseInput = {\n  lazyPurchase: LazyPurchase;\n  loadJsonMetadata?: boolean; // Default: true\n  commitment?: Commitment;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const loadPurchaseOperationHandler: OperationHandler<LoadPurchaseOperation> =\n  {\n    handle: async (\n      operation: LoadPurchaseOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ) => {\n      const {\n        lazyPurchase,\n        loadJsonMetadata = true,\n        commitment,\n      } = operation.input;\n\n      const asset = await metaplex\n        .nfts()\n        .findByMetadata(lazyPurchase.metadataAddress, {\n          tokenOwner: lazyPurchase.buyerAddress,\n          commitment,\n          loadJsonMetadata,\n        })\n        .run(scope);\n      assertNftOrSftWithToken(asset);\n\n      return {\n        ...lazyPurchase,\n        lazy: false,\n        isPublic: false,\n        asset,\n        tokens: amount(lazyPurchase.tokens, asset.mint.currency),\n      };\n    },\n  };\n"],"names":["Key","loadPurchaseOperation","useOperation","loadPurchaseOperationHandler","handle","operation","metaplex","scope","lazyPurchase","loadJsonMetadata","commitment","input","asset","nfts","findByMetadata","metadataAddress","tokenOwner","buyerAddress","run","assertNftOrSftWithToken","lazy","isPublic","tokens","amount","mint","currency"],"mappings":";;;;AAQA;AACA;;AAEA,MAAMA,GAAG,GAAG,uBAAZ,CAAA;MACaC,qBAAqB,GAAGC,YAAY,CAAwBF,GAAxB,EAA1C;AAaP;AACA;AACA;AAEO,MAAMG,4BAAqE,GAChF;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MACJC,YADI;AAEJC,MAAAA,gBAAgB,GAAG,IAFf;AAGJC,MAAAA,UAAAA;KACEL,GAAAA,SAAS,CAACM,KAJd,CAAA;AAMA,IAAA,MAAMC,KAAK,GAAG,MAAMN,QAAQ,CACzBO,IADiB,EAEjBC,CAAAA,cAFiB,CAEFN,YAAY,CAACO,eAFX,EAE4B;MAC5CC,UAAU,EAAER,YAAY,CAACS,YADmB;MAE5CP,UAF4C;AAG5CD,MAAAA,gBAAAA;AAH4C,KAF5B,CAOjBS,CAAAA,GAPiB,CAObX,KAPa,CAApB,CAAA;IAQAY,uBAAuB,CAACP,KAAD,CAAvB,CAAA;IAEA,OAAO,EACL,GAAGJ,YADE;AAELY,MAAAA,IAAI,EAAE,KAFD;AAGLC,MAAAA,QAAQ,EAAE,KAHL;MAILT,KAJK;MAKLU,MAAM,EAAEC,MAAM,CAACf,YAAY,CAACc,MAAd,EAAsBV,KAAK,CAACY,IAAN,CAAWC,QAAjC,CAAA;KALhB,CAAA;AAOD,GAAA;AA7BH;;;;"}