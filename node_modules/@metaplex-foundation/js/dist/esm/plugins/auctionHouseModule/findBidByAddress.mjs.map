{"version":3,"file":"findBidByAddress.mjs","sources":["../../../../src/plugins/auctionHouseModule/findBidByAddress.ts"],"sourcesContent":["import type { Commitment, PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { useOperation, Operation, OperationHandler } from '@/types';\nimport { AuctionHouse } from './AuctionHouse';\nimport { DisposableScope } from '@/utils';\nimport { findBidReceiptPda } from './pdas';\nimport { Bid, toLazyBid } from './Bid';\nimport { toBidReceiptAccount } from './accounts';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindBidByAddressOperation' as const;\nexport const findBidByAddressOperation =\n  useOperation<FindBidByAddressOperation>(Key);\nexport type FindBidByAddressOperation = Operation<\n  typeof Key,\n  FindBidByAddressInput,\n  Bid\n>;\n\nexport type FindBidByAddressInput = {\n  address: PublicKey;\n  auctionHouse: AuctionHouse;\n  loadJsonMetadata?: boolean; // Default: true\n  commitment?: Commitment;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findBidByAddressOperationHandler: OperationHandler<FindBidByAddressOperation> =\n  {\n    handle: async (\n      operation: FindBidByAddressOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ) => {\n      const {\n        address,\n        auctionHouse,\n        commitment,\n        loadJsonMetadata = true,\n      } = operation.input;\n\n      const receiptAddress = findBidReceiptPda(address);\n      const account = toBidReceiptAccount(\n        await metaplex.rpc().getAccount(receiptAddress, commitment)\n      );\n      scope.throwIfCanceled();\n\n      const lazyBid = toLazyBid(account, auctionHouse);\n      return metaplex\n        .auctions()\n        .for(auctionHouse)\n        .loadBid(lazyBid, { loadJsonMetadata, commitment })\n        .run(scope);\n    },\n  };\n"],"names":["Key","findBidByAddressOperation","useOperation","findBidByAddressOperationHandler","handle","operation","metaplex","scope","address","auctionHouse","commitment","loadJsonMetadata","input","receiptAddress","findBidReceiptPda","account","toBidReceiptAccount","rpc","getAccount","throwIfCanceled","lazyBid","toLazyBid","auctions","for","loadBid","run"],"mappings":";;;;;AAUA;AACA;;AAEA,MAAMA,GAAG,GAAG,2BAAZ,CAAA;MACaC,yBAAyB,GACpCC,YAAY,CAA4BF,GAA5B,EADP;AAeP;AACA;AACA;AAEO,MAAMG,gCAA6E,GACxF;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MACJC,OADI;MAEJC,YAFI;MAGJC,UAHI;AAIJC,MAAAA,gBAAgB,GAAG,IAAA;KACjBN,GAAAA,SAAS,CAACO,KALd,CAAA;AAOA,IAAA,MAAMC,cAAc,GAAGC,iBAAiB,CAACN,OAAD,CAAxC,CAAA;AACA,IAAA,MAAMO,OAAO,GAAGC,mBAAmB,CACjC,MAAMV,QAAQ,CAACW,GAAT,EAAA,CAAeC,UAAf,CAA0BL,cAA1B,EAA0CH,UAA1C,CAD2B,CAAnC,CAAA;AAGAH,IAAAA,KAAK,CAACY,eAAN,EAAA,CAAA;AAEA,IAAA,MAAMC,OAAO,GAAGC,SAAS,CAACN,OAAD,EAAUN,YAAV,CAAzB,CAAA;IACA,OAAOH,QAAQ,CACZgB,QADI,EAEJC,CAAAA,GAFI,CAEAd,YAFA,CAGJe,CAAAA,OAHI,CAGIJ,OAHJ,EAGa;MAAET,gBAAF;AAAoBD,MAAAA,UAAAA;AAApB,KAHb,CAIJe,CAAAA,GAJI,CAIAlB,KAJA,CAAP,CAAA;AAKD,GAAA;AAzBH;;;;"}