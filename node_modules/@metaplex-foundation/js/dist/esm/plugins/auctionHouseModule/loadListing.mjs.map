{"version":3,"file":"loadListing.mjs","sources":["../../../../src/plugins/auctionHouseModule/loadListing.ts"],"sourcesContent":["import type { Commitment } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { useOperation, Operation, OperationHandler, amount } from '@/types';\nimport { LazyListing, Listing } from './Listing';\nimport { DisposableScope } from '@/utils';\nimport { assertNftOrSftWithToken } from '../nftModule';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadListingOperation' as const;\nexport const loadListingOperation = useOperation<LoadListingOperation>(Key);\nexport type LoadListingOperation = Operation<\n  typeof Key,\n  LoadListingInput,\n  Listing\n>;\n\nexport type LoadListingInput = {\n  lazyListing: LazyListing;\n  loadJsonMetadata?: boolean; // Default: true\n  commitment?: Commitment;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const loadListingOperationHandler: OperationHandler<LoadListingOperation> =\n  {\n    handle: async (\n      operation: LoadListingOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ) => {\n      const {\n        lazyListing,\n        loadJsonMetadata = true,\n        commitment,\n      } = operation.input;\n\n      const asset = await metaplex\n        .nfts()\n        .findByMetadata(lazyListing.metadataAddress, {\n          tokenOwner: lazyListing.sellerAddress,\n          commitment,\n          loadJsonMetadata,\n        })\n        .run(scope);\n      assertNftOrSftWithToken(asset);\n\n      return {\n        ...lazyListing,\n        model: 'listing',\n        lazy: false,\n        asset,\n        tokens: amount(lazyListing.tokens, asset.mint.currency),\n      };\n    },\n  };\n"],"names":["Key","loadListingOperation","useOperation","loadListingOperationHandler","handle","operation","metaplex","scope","lazyListing","loadJsonMetadata","commitment","input","asset","nfts","findByMetadata","metadataAddress","tokenOwner","sellerAddress","run","assertNftOrSftWithToken","model","lazy","tokens","amount","mint","currency"],"mappings":";;;;AAQA;AACA;;AAEA,MAAMA,GAAG,GAAG,sBAAZ,CAAA;MACaC,oBAAoB,GAAGC,YAAY,CAAuBF,GAAvB,EAAzC;AAaP;AACA;AACA;AAEO,MAAMG,2BAAmE,GAC9E;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MACJC,WADI;AAEJC,MAAAA,gBAAgB,GAAG,IAFf;AAGJC,MAAAA,UAAAA;KACEL,GAAAA,SAAS,CAACM,KAJd,CAAA;AAMA,IAAA,MAAMC,KAAK,GAAG,MAAMN,QAAQ,CACzBO,IADiB,EAEjBC,CAAAA,cAFiB,CAEFN,WAAW,CAACO,eAFV,EAE2B;MAC3CC,UAAU,EAAER,WAAW,CAACS,aADmB;MAE3CP,UAF2C;AAG3CD,MAAAA,gBAAAA;AAH2C,KAF3B,CAOjBS,CAAAA,GAPiB,CAObX,KAPa,CAApB,CAAA;IAQAY,uBAAuB,CAACP,KAAD,CAAvB,CAAA;IAEA,OAAO,EACL,GAAGJ,WADE;AAELY,MAAAA,KAAK,EAAE,SAFF;AAGLC,MAAAA,IAAI,EAAE,KAHD;MAILT,KAJK;MAKLU,MAAM,EAAEC,MAAM,CAACf,WAAW,CAACc,MAAb,EAAqBV,KAAK,CAACY,IAAN,CAAWC,QAAhC,CAAA;KALhB,CAAA;AAOD,GAAA;AA7BH;;;;"}