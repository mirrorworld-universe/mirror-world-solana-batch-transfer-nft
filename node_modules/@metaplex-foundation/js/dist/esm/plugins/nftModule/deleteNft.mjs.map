{"version":3,"file":"deleteNft.mjs","sources":["../../../../src/plugins/nftModule/deleteNft.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createBurnNftInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findAssociatedTokenAccountPda, TokenProgram } from '../tokenModule';\nimport { HasMintAddress, toMintAddress } from './helpers';\nimport type { NftBuildersClient } from './NftBuildersClient';\nimport type { NftClient } from './NftClient';\nimport { findMasterEditionV2Pda, findMetadataPda } from './pdas';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _deleteNftClient(\n  this: NftClient,\n  nft: HasMintAddress,\n  input: Omit<DeleteNftInput, 'mintAddress'> = {}\n) {\n  return this.metaplex\n    .operations()\n    .getTask(deleteNftOperation({ ...input, mintAddress: toMintAddress(nft) }));\n}\n\n/** @internal */\nexport function _deleteNftBuildersClient(\n  this: NftBuildersClient,\n  input: DeleteNftBuilderParams\n) {\n  return deleteNftBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteNftOperation' as const;\nexport const deleteNftOperation = useOperation<DeleteNftOperation>(Key);\nexport type DeleteNftOperation = Operation<\n  typeof Key,\n  DeleteNftInput,\n  DeleteNftOutput\n>;\n\nexport interface DeleteNftInput {\n  // Accounts and models.\n  mintAddress: PublicKey;\n  owner?: Signer; // Defaults to mx.identity().\n  ownerTokenAccount?: PublicKey; // Defaults to associated token account.\n  collection?: PublicKey; // Defaults to undefined. I.e. assuming no collection is assigned to the NFT.\n\n  // Programs.\n  tokenProgram?: PublicKey; // Defaults to Token Program.\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface DeleteNftOutput {\n  response: SendAndConfirmTransactionResponse;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const deleteNftOperationHandler: OperationHandler<DeleteNftOperation> = {\n  handle: async (\n    operation: DeleteNftOperation,\n    metaplex: Metaplex\n  ): Promise<DeleteNftOutput> => {\n    return deleteNftBuilder(metaplex, operation.input).sendAndConfirm(\n      metaplex,\n      operation.input.confirmOptions\n    );\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\nexport type DeleteNftBuilderParams = Omit<DeleteNftInput, 'confirmOptions'> & {\n  instructionKey?: string;\n};\n\nexport const deleteNftBuilder = (\n  metaplex: Metaplex,\n  params: DeleteNftBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    owner = metaplex.identity(),\n    ownerTokenAccount,\n    collection,\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  const metadata = findMetadataPda(mintAddress);\n  const edition = findMasterEditionV2Pda(mintAddress);\n  const tokenAddress =\n    ownerTokenAccount ??\n    findAssociatedTokenAccountPda(mintAddress, owner.publicKey);\n\n  return TransactionBuilder.make().add({\n    instruction: createBurnNftInstruction({\n      metadata,\n      owner: owner.publicKey,\n      mint: mintAddress,\n      tokenAccount: tokenAddress,\n      masterEditionAccount: edition,\n      splTokenProgram: tokenProgram,\n      collectionMetadata: collection ? findMetadataPda(collection) : undefined,\n    }),\n    signers: [owner],\n    key: params.instructionKey ?? 'deleteNft',\n  });\n};\n"],"names":["_deleteNftClient","nft","input","metaplex","operations","getTask","deleteNftOperation","mintAddress","toMintAddress","_deleteNftBuildersClient","deleteNftBuilder","Key","useOperation","deleteNftOperationHandler","handle","operation","sendAndConfirm","confirmOptions","params","owner","identity","ownerTokenAccount","collection","tokenProgram","TokenProgram","publicKey","metadata","findMetadataPda","edition","findMasterEditionV2Pda","tokenAddress","findAssociatedTokenAccountPda","TransactionBuilder","make","add","instruction","createBurnNftInstruction","mint","tokenAccount","masterEditionAccount","splTokenProgram","collectionMetadata","undefined","signers","key","instructionKey"],"mappings":";;;;;;;;AAaA;AACA;;AAEA;;AACO,SAASA,gBAAT,CAELC,GAFK,EAGLC,KAA0C,GAAG,EAHxC,EAIL;EACA,OAAO,IAAA,CAAKC,QAAL,CACJC,UADI,EAAA,CAEJC,OAFI,CAEIC,kBAAkB,CAAC,EAAE,GAAGJ,KAAL;IAAYK,WAAW,EAAEC,aAAa,CAACP,GAAD,CAAA;AAAtC,GAAD,CAFtB,CAAP,CAAA;AAGD,CAAA;AAED;;AACO,SAASQ,wBAAT,CAELP,KAFK,EAGL;AACA,EAAA,OAAOQ,gBAAgB,CAAC,IAAA,CAAKP,QAAN,EAAgBD,KAAhB,CAAvB,CAAA;AACD;AAGD;AACA;;AAEA,MAAMS,GAAG,GAAG,oBAAZ,CAAA;MACaL,kBAAkB,GAAGM,YAAY,CAAqBD,GAArB,EAAvC;AAyBP;AACA;AACA;AAEO,MAAME,yBAA+D,GAAG;AAC7EC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENZ,QAFM,KAGuB;AAC7B,IAAA,OAAOO,gBAAgB,CAACP,QAAD,EAAWY,SAAS,CAACb,KAArB,CAAhB,CAA4Cc,cAA5C,CACLb,QADK,EAELY,SAAS,CAACb,KAAV,CAAgBe,cAFX,CAAP,CAAA;AAID,GAAA;AAT4E;AAa/E;AACA;;MAMaP,gBAAgB,GAAG,CAC9BP,QAD8B,EAE9Be,MAF8B,KAGP;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJX,WADI;AAEJY,IAAAA,KAAK,GAAGhB,QAAQ,CAACiB,QAAT,EAFJ;IAGJC,iBAHI;IAIJC,UAJI;IAKJC,YAAY,GAAGC,YAAY,CAACC,SAAAA;AALxB,GAAA,GAMFP,MANJ,CAAA;AAQA,EAAA,MAAMQ,QAAQ,GAAGC,eAAe,CAACpB,WAAD,CAAhC,CAAA;AACA,EAAA,MAAMqB,OAAO,GAAGC,sBAAsB,CAACtB,WAAD,CAAtC,CAAA;AACA,EAAA,MAAMuB,YAAY,GAChBT,iBADgB,KAAA,IAAA,IAChBA,iBADgB,KAChBA,KAAAA,CAAAA,GAAAA,iBADgB,GAEhBU,6BAA6B,CAACxB,WAAD,EAAcY,KAAK,CAACM,SAApB,CAF/B,CAAA;AAIA,EAAA,OAAOO,kBAAkB,CAACC,IAAnB,EAAA,CAA0BC,GAA1B,CAA8B;IACnCC,WAAW,EAAEC,wBAAwB,CAAC;MACpCV,QADoC;MAEpCP,KAAK,EAAEA,KAAK,CAACM,SAFuB;AAGpCY,MAAAA,IAAI,EAAE9B,WAH8B;AAIpC+B,MAAAA,YAAY,EAAER,YAJsB;AAKpCS,MAAAA,oBAAoB,EAAEX,OALc;AAMpCY,MAAAA,eAAe,EAAEjB,YANmB;AAOpCkB,MAAAA,kBAAkB,EAAEnB,UAAU,GAAGK,eAAe,CAACL,UAAD,CAAlB,GAAiCoB,SAAAA;AAP3B,KAAD,CADF;IAUnCC,OAAO,EAAE,CAACxB,KAAD,CAV0B;AAWnCyB,IAAAA,GAAG,EAAE1B,CAAAA,qBAAAA,GAAAA,MAAM,CAAC2B,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,WAAA;AAXK,GAA9B,CAAP,CAAA;AAaD;;;;"}