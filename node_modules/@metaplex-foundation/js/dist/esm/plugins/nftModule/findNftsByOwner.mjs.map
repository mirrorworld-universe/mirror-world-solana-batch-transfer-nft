{"version":3,"file":"findNftsByOwner.mjs","sources":["../../../../src/plugins/nftModule/findNftsByOwner.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { Metaplex } from '@/Metaplex';\nimport { TokenProgram } from '../tokenModule';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { findNftsByMintListOperation } from './findNftsByMintList';\nimport { Nft } from './Nft';\nimport { DisposableScope } from '@/utils';\nimport { Metadata } from './Metadata';\nimport { Sft } from './Sft';\nimport type { NftClient } from './NftClient';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _findNftsByOwnerClient(\n  this: NftClient,\n  owner: PublicKey,\n  options?: Omit<FindNftsByOwnerInput, 'owner'>\n) {\n  return this.metaplex\n    .operations()\n    .getTask(findNftsByOwnerOperation({ owner, ...options }));\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByOwnerOperation' as const;\nexport const findNftsByOwnerOperation =\n  useOperation<FindNftsByOwnerOperation>(Key);\nexport type FindNftsByOwnerOperation = Operation<\n  typeof Key,\n  FindNftsByOwnerInput,\n  FindNftsByOwnerOutput\n>;\n\nexport type FindNftsByOwnerInput = {\n  owner: PublicKey;\n  commitment?: Commitment;\n};\n\nexport type FindNftsByOwnerOutput = (Metadata | Nft | Sft)[];\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findNftsByOwnerOperationHandler: OperationHandler<FindNftsByOwnerOperation> =\n  {\n    handle: async (\n      operation: FindNftsByOwnerOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<FindNftsByOwnerOutput> => {\n      const { owner, commitment } = operation.input;\n\n      const mints = await TokenProgram.tokenAccounts(metaplex)\n        .selectMint()\n        .whereOwner(owner)\n        .whereAmount(1)\n        .getDataAsPublicKeys();\n      scope.throwIfCanceled();\n\n      const nfts = await metaplex\n        .operations()\n        .execute(findNftsByMintListOperation({ mints, commitment }), scope);\n      scope.throwIfCanceled();\n\n      return nfts.filter((nft): nft is Metadata | Nft | Sft => nft !== null);\n    },\n  };\n"],"names":["_findNftsByOwnerClient","owner","options","metaplex","operations","getTask","findNftsByOwnerOperation","Key","useOperation","findNftsByOwnerOperationHandler","handle","operation","scope","commitment","input","mints","TokenProgram","tokenAccounts","selectMint","whereOwner","whereAmount","getDataAsPublicKeys","throwIfCanceled","nfts","execute","findNftsByMintListOperation","filter","nft"],"mappings":";;;;AAWA;AACA;AACA;;AAEA;AACO,SAASA,sBAAT,CAELC,KAFK,EAGLC,OAHK,EAIL;EACA,OAAO,IAAA,CAAKC,QAAL,CACJC,UADI,GAEJC,OAFI,CAEIC,wBAAwB,CAAC;IAAEL,KAAF;IAAS,GAAGC,OAAAA;AAAZ,GAAD,CAF5B,CAAP,CAAA;AAGD;AAGD;AACA;;AAEA,MAAMK,GAAG,GAAG,0BAAZ,CAAA;MACaD,wBAAwB,GACnCE,YAAY,CAA2BD,GAA3B,EADP;AAeP;AACA;AACA;AAEO,MAAME,+BAA2E,GACtF;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENR,QAFM,EAGNS,KAHM,KAI6B;IACnC,MAAM;MAAEX,KAAF;AAASY,MAAAA,UAAAA;KAAeF,GAAAA,SAAS,CAACG,KAAxC,CAAA;IAEA,MAAMC,KAAK,GAAG,MAAMC,YAAY,CAACC,aAAb,CAA2Bd,QAA3B,CACjBe,CAAAA,UADiB,GAEjBC,UAFiB,CAENlB,KAFM,CAGjBmB,CAAAA,WAHiB,CAGL,CAHK,CAAA,CAIjBC,mBAJiB,EAApB,CAAA;AAKAT,IAAAA,KAAK,CAACU,eAAN,EAAA,CAAA;IAEA,MAAMC,IAAI,GAAG,MAAMpB,QAAQ,CACxBC,UADgB,EAEhBoB,CAAAA,OAFgB,CAERC,2BAA2B,CAAC;MAAEV,KAAF;AAASF,MAAAA,UAAAA;KAAV,CAFnB,EAE4CD,KAF5C,CAAnB,CAAA;AAGAA,IAAAA,KAAK,CAACU,eAAN,EAAA,CAAA;IAEA,OAAOC,IAAI,CAACG,MAAL,CAAaC,GAAD,IAAsCA,GAAG,KAAK,IAA1D,CAAP,CAAA;AACD,GAAA;AArBH;;;;"}