{"version":3,"file":"findNftByMetadata.mjs","sources":["../../../../src/plugins/nftModule/findNftByMetadata.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { Metaplex } from '@/Metaplex';\nimport { toMetadataAccount } from './accounts';\nimport { Operation, useOperation, OperationHandler } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { Nft, NftWithToken } from './Nft';\nimport { Sft, SftWithToken } from './Sft';\nimport type { NftClient } from './NftClient';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _findNftByMetadataClient(\n  this: NftClient,\n  metadata: PublicKey,\n  options?: Omit<FindNftByMetadataInput, 'metadata'>\n) {\n  return this.metaplex\n    .operations()\n    .getTask(findNftByMetadataOperation({ metadata, ...options }));\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftByMetadataOperation' as const;\nexport const findNftByMetadataOperation =\n  useOperation<FindNftByMetadataOperation>(Key);\nexport type FindNftByMetadataOperation = Operation<\n  typeof Key,\n  FindNftByMetadataInput,\n  FindNftByMetadataOutput\n>;\n\nexport type FindNftByMetadataInput = {\n  metadata: PublicKey;\n  tokenAddress?: PublicKey;\n  tokenOwner?: PublicKey;\n  loadJsonMetadata?: boolean;\n  commitment?: Commitment;\n};\n\nexport type FindNftByMetadataOutput = Nft | Sft | NftWithToken | SftWithToken;\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findNftByMetadataOperationHandler: OperationHandler<FindNftByMetadataOperation> =\n  {\n    handle: async (\n      operation: FindNftByMetadataOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<FindNftByMetadataOutput> => {\n      const metadata = toMetadataAccount(\n        await metaplex.rpc().getAccount(operation.input.metadata)\n      );\n      scope.throwIfCanceled();\n\n      return metaplex\n        .nfts()\n        .findByMint(metadata.data.mint, operation.input)\n        .run(scope);\n    },\n  };\n"],"names":["_findNftByMetadataClient","metadata","options","metaplex","operations","getTask","findNftByMetadataOperation","Key","useOperation","findNftByMetadataOperationHandler","handle","operation","scope","toMetadataAccount","rpc","getAccount","input","throwIfCanceled","nfts","findByMint","data","mint","run"],"mappings":";;;AASA;AACA;AACA;;AAEA;AACO,SAASA,wBAAT,CAELC,QAFK,EAGLC,OAHK,EAIL;EACA,OAAO,IAAA,CAAKC,QAAL,CACJC,UADI,GAEJC,OAFI,CAEIC,0BAA0B,CAAC;IAAEL,QAAF;IAAY,GAAGC,OAAAA;AAAf,GAAD,CAF9B,CAAP,CAAA;AAGD;AAGD;AACA;;AAEA,MAAMK,GAAG,GAAG,4BAAZ,CAAA;MACaD,0BAA0B,GACrCE,YAAY,CAA6BD,GAA7B,EADP;AAkBP;AACA;AACA;AAEO,MAAME,iCAA+E,GAC1F;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENR,QAFM,EAGNS,KAHM,KAI+B;AACrC,IAAA,MAAMX,QAAQ,GAAGY,iBAAiB,CAChC,MAAMV,QAAQ,CAACW,GAAT,EAAeC,CAAAA,UAAf,CAA0BJ,SAAS,CAACK,KAAV,CAAgBf,QAA1C,CAD0B,CAAlC,CAAA;AAGAW,IAAAA,KAAK,CAACK,eAAN,EAAA,CAAA;AAEA,IAAA,OAAOd,QAAQ,CACZe,IADI,GAEJC,UAFI,CAEOlB,QAAQ,CAACmB,IAAT,CAAcC,IAFrB,EAE2BV,SAAS,CAACK,KAFrC,EAGJM,GAHI,CAGAV,KAHA,CAAP,CAAA;AAID,GAAA;AAfH;;;;"}