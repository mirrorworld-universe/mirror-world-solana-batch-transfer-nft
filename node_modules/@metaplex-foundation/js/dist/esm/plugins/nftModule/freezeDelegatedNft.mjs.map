{"version":3,"file":"freezeDelegatedNft.mjs","sources":["../../../../src/plugins/nftModule/freezeDelegatedNft.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createFreezeDelegatedAccountInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findAssociatedTokenAccountPda, TokenProgram } from '../tokenModule';\nimport { HasMintAddress, toMintAddress } from './helpers';\nimport { NftBuildersClient } from './NftBuildersClient';\nimport { NftClient } from './NftClient';\nimport { findMasterEditionV2Pda } from './pdas';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _freezeDelegatedNftClient(\n  this: NftClient,\n  nft: HasMintAddress,\n  input: Omit<FreezeDelegatedNftInput, 'mintAddress'>\n) {\n  return this.metaplex.operations().getTask(\n    freezeDelegatedNftOperation({\n      ...input,\n      mintAddress: toMintAddress(nft),\n    })\n  );\n}\n\n/** @internal */\nexport function _freezeDelegatedNftBuildersClient(\n  this: NftBuildersClient,\n  input: FreezeDelegatedNftBuilderParams\n) {\n  return freezeDelegatedNftBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FreezeDelegatedNftOperation' as const;\nexport const freezeDelegatedNftOperation =\n  useOperation<FreezeDelegatedNftOperation>(Key);\nexport type FreezeDelegatedNftOperation = Operation<\n  typeof Key,\n  FreezeDelegatedNftInput,\n  FreezeDelegatedNftOutput\n>;\n\nexport type FreezeDelegatedNftInput = {\n  mintAddress: PublicKey;\n  delegateAuthority: Signer;\n  tokenOwner?: PublicKey; // Defaults to mx.identity().\n  tokenAddress?: PublicKey; // Defaults to associated account.\n  tokenProgram?: PublicKey; // Defaults to Token Program.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type FreezeDelegatedNftOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const freezeDelegatedNftOperationHandler: OperationHandler<FreezeDelegatedNftOperation> =\n  {\n    async handle(\n      operation: FreezeDelegatedNftOperation,\n      metaplex: Metaplex\n    ): Promise<FreezeDelegatedNftOutput> {\n      return freezeDelegatedNftBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type FreezeDelegatedNftBuilderParams = Omit<\n  FreezeDelegatedNftInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport const freezeDelegatedNftBuilder = (\n  metaplex: Metaplex,\n  params: FreezeDelegatedNftBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    delegateAuthority,\n    tokenOwner = metaplex.identity().publicKey,\n    tokenAddress,\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  const editionAddress = findMasterEditionV2Pda(mintAddress);\n  const tokenAddressOrAta =\n    tokenAddress ?? findAssociatedTokenAccountPda(mintAddress, tokenOwner);\n\n  return TransactionBuilder.make().add({\n    instruction: createFreezeDelegatedAccountInstruction({\n      delegate: delegateAuthority.publicKey,\n      tokenAccount: tokenAddressOrAta,\n      edition: editionAddress,\n      mint: mintAddress,\n      tokenProgram,\n    }),\n    signers: [delegateAuthority],\n    key: params.instructionKey ?? 'freezeDelegatedNft',\n  });\n};\n"],"names":["_freezeDelegatedNftClient","nft","input","metaplex","operations","getTask","freezeDelegatedNftOperation","mintAddress","toMintAddress","_freezeDelegatedNftBuildersClient","freezeDelegatedNftBuilder","Key","useOperation","freezeDelegatedNftOperationHandler","handle","operation","sendAndConfirm","confirmOptions","params","delegateAuthority","tokenOwner","identity","publicKey","tokenAddress","tokenProgram","TokenProgram","editionAddress","findMasterEditionV2Pda","tokenAddressOrAta","findAssociatedTokenAccountPda","TransactionBuilder","make","add","instruction","createFreezeDelegatedAccountInstruction","delegate","tokenAccount","edition","mint","signers","key","instructionKey"],"mappings":";;;;;;;;AAaA;AACA;;AAEA;;AACO,SAASA,yBAAT,CAELC,GAFK,EAGLC,KAHK,EAIL;EACA,OAAO,IAAA,CAAKC,QAAL,CAAcC,UAAd,EAAA,CAA2BC,OAA3B,CACLC,2BAA2B,CAAC,EAC1B,GAAGJ,KADuB;IAE1BK,WAAW,EAAEC,aAAa,CAACP,GAAD,CAAA;AAFA,GAAD,CADtB,CAAP,CAAA;AAMD,CAAA;AAED;;AACO,SAASQ,iCAAT,CAELP,KAFK,EAGL;AACA,EAAA,OAAOQ,yBAAyB,CAAC,IAAA,CAAKP,QAAN,EAAgBD,KAAhB,CAAhC,CAAA;AACD;AAGD;AACA;;AAEA,MAAMS,GAAG,GAAG,6BAAZ,CAAA;MACaL,2BAA2B,GACtCM,YAAY,CAA8BD,GAA9B,EADP;AAqBP;AACA;AACA;AAEO,MAAME,kCAAiF,GAC5F;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEZ,QAFF,EAGqC;AACnC,IAAA,OAAOO,yBAAyB,CAC9BP,QAD8B,EAE9BY,SAAS,CAACb,KAFoB,CAAzB,CAGLc,cAHK,CAGUb,QAHV,EAGoBY,SAAS,CAACb,KAAV,CAAgBe,cAHpC,CAAP,CAAA;AAID,GAAA;;AATH;AAaF;AACA;;MASaP,yBAAyB,GAAG,CACvCP,QADuC,EAEvCe,MAFuC,KAGhB;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJX,WADI;IAEJY,iBAFI;AAGJC,IAAAA,UAAU,GAAGjB,QAAQ,CAACkB,QAAT,GAAoBC,SAH7B;IAIJC,YAJI;IAKJC,YAAY,GAAGC,YAAY,CAACH,SAAAA;AALxB,GAAA,GAMFJ,MANJ,CAAA;AAQA,EAAA,MAAMQ,cAAc,GAAGC,sBAAsB,CAACpB,WAAD,CAA7C,CAAA;AACA,EAAA,MAAMqB,iBAAiB,GACrBL,YADqB,KAAA,IAAA,IACrBA,YADqB,KAAA,KAAA,CAAA,GACrBA,YADqB,GACLM,6BAA6B,CAACtB,WAAD,EAAca,UAAd,CAD/C,CAAA;AAGA,EAAA,OAAOU,kBAAkB,CAACC,IAAnB,EAAA,CAA0BC,GAA1B,CAA8B;IACnCC,WAAW,EAAEC,uCAAuC,CAAC;MACnDC,QAAQ,EAAEhB,iBAAiB,CAACG,SADuB;AAEnDc,MAAAA,YAAY,EAAER,iBAFqC;AAGnDS,MAAAA,OAAO,EAAEX,cAH0C;AAInDY,MAAAA,IAAI,EAAE/B,WAJ6C;AAKnDiB,MAAAA,YAAAA;AALmD,KAAD,CADjB;IAQnCe,OAAO,EAAE,CAACpB,iBAAD,CAR0B;AASnCqB,IAAAA,GAAG,EAAEtB,CAAAA,qBAAAA,GAAAA,MAAM,CAACuB,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,oBAAA;AATK,GAA9B,CAAP,CAAA;AAWD;;;;"}