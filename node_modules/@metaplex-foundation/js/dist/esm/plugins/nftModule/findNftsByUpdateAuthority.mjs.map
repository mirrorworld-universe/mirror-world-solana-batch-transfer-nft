{"version":3,"file":"findNftsByUpdateAuthority.mjs","sources":["../../../../src/plugins/nftModule/findNftsByUpdateAuthority.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { TokenMetadataProgram } from './program';\nimport { findNftsByMintListOperation } from './findNftsByMintList';\nimport { Nft } from './Nft';\nimport { DisposableScope } from '@/utils';\nimport { Metadata } from './Metadata';\nimport { Sft } from './Sft';\nimport type { NftClient } from './NftClient';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _findNftsByUpdateAuthorityClient(\n  this: NftClient,\n  updateAuthority: PublicKey,\n  options?: Omit<FindNftsByUpdateAuthorityInput, 'updateAuthority'>\n) {\n  return this.metaplex\n    .operations()\n    .getTask(\n      findNftsByUpdateAuthorityOperation({ updateAuthority, ...options })\n    );\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByUpdateAuthorityOperation' as const;\nexport const findNftsByUpdateAuthorityOperation =\n  useOperation<FindNftsByUpdateAuthorityOperation>(Key);\nexport type FindNftsByUpdateAuthorityOperation = Operation<\n  typeof Key,\n  FindNftsByUpdateAuthorityInput,\n  FindNftsByUpdateAuthorityOutput\n>;\n\nexport interface FindNftsByUpdateAuthorityInput {\n  updateAuthority: PublicKey;\n  commitment?: Commitment;\n}\n\nexport type FindNftsByUpdateAuthorityOutput = (Metadata | Nft | Sft)[];\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findNftsByUpdateAuthorityOperationHandler: OperationHandler<FindNftsByUpdateAuthorityOperation> =\n  {\n    handle: async (\n      operation: FindNftsByUpdateAuthorityOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<FindNftsByUpdateAuthorityOutput> => {\n      const { updateAuthority, commitment } = operation.input;\n\n      const mints = await TokenMetadataProgram.metadataV1Accounts(metaplex)\n        .selectMint()\n        .whereUpdateAuthority(updateAuthority)\n        .getDataAsPublicKeys();\n      scope.throwIfCanceled();\n\n      const nfts = await metaplex\n        .operations()\n        .execute(findNftsByMintListOperation({ mints, commitment }), scope);\n      scope.throwIfCanceled();\n\n      return nfts.filter((nft): nft is Metadata | Nft | Sft => nft !== null);\n    },\n  };\n"],"names":["_findNftsByUpdateAuthorityClient","updateAuthority","options","metaplex","operations","getTask","findNftsByUpdateAuthorityOperation","Key","useOperation","findNftsByUpdateAuthorityOperationHandler","handle","operation","scope","commitment","input","mints","TokenMetadataProgram","metadataV1Accounts","selectMint","whereUpdateAuthority","getDataAsPublicKeys","throwIfCanceled","nfts","execute","findNftsByMintListOperation","filter","nft"],"mappings":";;;;AAWA;AACA;AACA;;AAEA;AACO,SAASA,gCAAT,CAELC,eAFK,EAGLC,OAHK,EAIL;EACA,OAAO,IAAA,CAAKC,QAAL,CACJC,UADI,GAEJC,OAFI,CAGHC,kCAAkC,CAAC;IAAEL,eAAF;IAAmB,GAAGC,OAAAA;AAAtB,GAAD,CAH/B,CAAP,CAAA;AAKD;AAGD;AACA;;AAEA,MAAMK,GAAG,GAAG,oCAAZ,CAAA;MACaD,kCAAkC,GAC7CE,YAAY,CAAqCD,GAArC,EADP;AAeP;AACA;AACA;AAEO,MAAME,yCAA+F,GAC1G;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENR,QAFM,EAGNS,KAHM,KAIuC;IAC7C,MAAM;MAAEX,eAAF;AAAmBY,MAAAA,UAAAA;KAAeF,GAAAA,SAAS,CAACG,KAAlD,CAAA;AAEA,IAAA,MAAMC,KAAK,GAAG,MAAMC,oBAAoB,CAACC,kBAArB,CAAwCd,QAAxC,CACjBe,CAAAA,UADiB,GAEjBC,oBAFiB,CAEIlB,eAFJ,CAAA,CAGjBmB,mBAHiB,EAApB,CAAA;AAIAR,IAAAA,KAAK,CAACS,eAAN,EAAA,CAAA;IAEA,MAAMC,IAAI,GAAG,MAAMnB,QAAQ,CACxBC,UADgB,EAEhBmB,CAAAA,OAFgB,CAERC,2BAA2B,CAAC;MAAET,KAAF;AAASF,MAAAA,UAAAA;KAAV,CAFnB,EAE4CD,KAF5C,CAAnB,CAAA;AAGAA,IAAAA,KAAK,CAACS,eAAN,EAAA,CAAA;IAEA,OAAOC,IAAI,CAACG,MAAL,CAAaC,GAAD,IAAsCA,GAAG,KAAK,IAA1D,CAAP,CAAA;AACD,GAAA;AApBH;;;;"}