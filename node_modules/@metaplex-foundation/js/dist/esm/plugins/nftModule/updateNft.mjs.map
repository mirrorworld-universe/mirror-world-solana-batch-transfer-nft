{"version":3,"file":"updateNft.mjs","sources":["../../../../src/plugins/nftModule/updateNft.ts"],"sourcesContent":["import { NoInstructionsToSendError } from '@/errors';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  CreatorInput,\n  Operation,\n  OperationHandler,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Option, Task, TransactionBuilder } from '@/utils';\nimport {\n  createUpdateMetadataAccountV2Instruction,\n  UpdateMetadataAccountArgsV2,\n  Uses,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport isEqual from 'lodash.isequal';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { Nft, NftWithToken } from './Nft';\nimport type { NftBuildersClient } from './NftBuildersClient';\nimport type { NftClient } from './NftClient';\nimport { Sft, SftWithToken } from './Sft';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _updateNftClient(\n  this: NftClient,\n  nftOrSft: Nft | Sft | NftWithToken | SftWithToken,\n  input: Omit<UpdateNftInput, 'nftOrSft'>\n): Task<UpdateNftOutput> {\n  return this.metaplex\n    .operations()\n    .getTask(updateNftOperation({ ...input, nftOrSft }));\n}\n\n/** @internal */\nexport function _updateNftBuildersClient(\n  this: NftBuildersClient,\n  input: UpdateNftBuilderParams\n) {\n  return updateNftBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateNftOperation' as const;\nexport const updateNftOperation = useOperation<UpdateNftOperation>(Key);\nexport type UpdateNftOperation = Operation<\n  typeof Key,\n  UpdateNftInput,\n  UpdateNftOutput\n>;\n\nexport interface UpdateNftInput {\n  // Accounts and models.\n  nftOrSft: Nft | Sft;\n  updateAuthority?: Signer; // Defaults to mx.identity().\n  newUpdateAuthority?: PublicKey;\n\n  // Data.\n  name?: string;\n  symbol?: string;\n  uri?: string;\n  sellerFeeBasisPoints?: number;\n  creators?: CreatorInput[];\n  primarySaleHappened?: boolean;\n  isMutable?: boolean;\n  uses?: Option<Uses>;\n  collection?: Option<PublicKey>;\n  collectionAuthority?: Option<Signer>;\n  collectionAuthorityIsDelegated?: boolean; // Defaults to false.\n  collectionIsSized?: boolean; // Defaults to true.\n  oldCollectionIsSized?: boolean; // Defaults to true.\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface UpdateNftOutput {\n  response: SendAndConfirmTransactionResponse;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const updateNftOperationHandler: OperationHandler<UpdateNftOperation> = {\n  handle: async (\n    operation: UpdateNftOperation,\n    metaplex: Metaplex\n  ): Promise<UpdateNftOutput> => {\n    const builder = updateNftBuilder(metaplex, operation.input);\n\n    if (builder.isEmpty()) {\n      throw new NoInstructionsToSendError(Key);\n    }\n\n    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\nexport type UpdateNftBuilderParams = Omit<UpdateNftInput, 'confirmOptions'> & {\n  updateMetadataInstructionKey?: string;\n};\n\nexport const updateNftBuilder = (\n  metaplex: Metaplex,\n  params: UpdateNftBuilderParams\n): TransactionBuilder => {\n  const { nftOrSft, updateAuthority = metaplex.identity() } = params;\n  const updateInstructionDataWithoutChanges = toInstructionData(nftOrSft);\n  const updateInstructionData = toInstructionData(nftOrSft, params);\n  const shouldSendUpdateInstruction = !isEqual(\n    updateInstructionData,\n    updateInstructionDataWithoutChanges\n  );\n\n  const isRemovingVerifiedCollection =\n    !!nftOrSft.collection &&\n    !!nftOrSft.collection.verified &&\n    !params.collection;\n  const isOverridingVerifiedCollection =\n    !!nftOrSft.collection &&\n    !!nftOrSft.collection.verified &&\n    !!params.collection &&\n    !params.collection.equals(nftOrSft.collection.address);\n  const shouldUnverifyCurrentCollection =\n    isRemovingVerifiedCollection || isOverridingVerifiedCollection;\n\n  const creatorsInput: CreatorInput[] = params.creators ?? nftOrSft.creators;\n  const verifyAdditionalCreatorInstructions = creatorsInput\n    .filter((creator) => {\n      const currentCreator = nftOrSft.creators.find(({ address }) =>\n        address.equals(creator.address)\n      );\n      const currentlyVerified = currentCreator?.verified ?? false;\n      return !!creator.authority && !currentlyVerified;\n    })\n    .map((creator) => {\n      return metaplex.nfts().builders().verifyCreator({\n        mintAddress: nftOrSft.address,\n        creator: creator.authority,\n      });\n    });\n\n  return (\n    TransactionBuilder.make()\n\n      // Unverify current collection before overriding it.\n      // Otherwise, the previous collection size will not be properly decremented.\n      .when(shouldUnverifyCurrentCollection, (builder) =>\n        builder.add(\n          metaplex\n            .nfts()\n            .builders()\n            .unverifyCollection({\n              mintAddress: nftOrSft.address,\n              collectionMintAddress: nftOrSft.collection?.address as PublicKey,\n              collectionAuthority: updateAuthority,\n              isSizedCollection: params.oldCollectionIsSized ?? true,\n            })\n        )\n      )\n\n      // Update the metadata account.\n      .when(shouldSendUpdateInstruction, (builder) =>\n        builder.add({\n          instruction: createUpdateMetadataAccountV2Instruction(\n            {\n              metadata: nftOrSft.metadataAddress,\n              updateAuthority: updateAuthority.publicKey,\n            },\n            {\n              updateMetadataAccountArgsV2: updateInstructionData,\n            }\n          ),\n          signers: [updateAuthority],\n          key: params.updateMetadataInstructionKey ?? 'updateMetadata',\n        })\n      )\n\n      // Verify additional creators.\n      .add(...verifyAdditionalCreatorInstructions)\n\n      // Verify collection.\n      .when(!!params.collection && !!params.collectionAuthority, (builder) =>\n        builder.add(\n          metaplex\n            .nfts()\n            .builders()\n            .verifyCollection({\n              mintAddress: nftOrSft.address,\n              collectionMintAddress: params.collection as PublicKey,\n              collectionAuthority: params.collectionAuthority as Signer,\n              isDelegated: params.collectionAuthorityIsDelegated ?? false,\n              isSizedCollection: params.collectionIsSized ?? true,\n            })\n        )\n      )\n  );\n};\n\nconst toInstructionData = (\n  nftOrSft: Nft | Sft,\n  input: Partial<UpdateNftInput> = {}\n): UpdateMetadataAccountArgsV2 => {\n  const creators =\n    input.creators === undefined\n      ? nftOrSft.creators\n      : input.creators.map((creator) => {\n          const currentCreator = nftOrSft.creators.find(({ address }) =>\n            address.equals(creator.address)\n          );\n          return {\n            ...creator,\n            verified: currentCreator?.verified ?? false,\n          };\n        });\n\n  const currentCollection = nftOrSft.collection\n    ? { ...nftOrSft.collection, key: nftOrSft.collection.address }\n    : null;\n  const newCollection = input.collection\n    ? { key: input.collection, verified: false }\n    : null;\n\n  return {\n    updateAuthority:\n      input.newUpdateAuthority ?? nftOrSft.updateAuthorityAddress,\n    primarySaleHappened:\n      input.primarySaleHappened ?? nftOrSft.primarySaleHappened,\n    isMutable: input.isMutable ?? nftOrSft.isMutable,\n    data: {\n      name: input.name ?? nftOrSft.name,\n      symbol: input.symbol ?? nftOrSft.symbol,\n      uri: input.uri ?? nftOrSft.uri,\n      sellerFeeBasisPoints:\n        input.sellerFeeBasisPoints ?? nftOrSft.sellerFeeBasisPoints,\n      creators: creators.length > 0 ? creators : null,\n      uses: input.uses === undefined ? nftOrSft.uses : input.uses,\n      collection:\n        input.collection === undefined ? currentCollection : newCollection,\n    },\n  };\n};\n"],"names":["_updateNftClient","nftOrSft","input","metaplex","operations","getTask","updateNftOperation","_updateNftBuildersClient","updateNftBuilder","Key","useOperation","updateNftOperationHandler","handle","operation","builder","isEmpty","NoInstructionsToSendError","sendAndConfirm","confirmOptions","params","updateAuthority","identity","updateInstructionDataWithoutChanges","toInstructionData","updateInstructionData","shouldSendUpdateInstruction","isEqual","isRemovingVerifiedCollection","collection","verified","isOverridingVerifiedCollection","equals","address","shouldUnverifyCurrentCollection","creatorsInput","creators","verifyAdditionalCreatorInstructions","filter","creator","currentCreator","find","currentlyVerified","authority","map","nfts","builders","verifyCreator","mintAddress","TransactionBuilder","make","when","add","unverifyCollection","collectionMintAddress","collectionAuthority","isSizedCollection","oldCollectionIsSized","instruction","createUpdateMetadataAccountV2Instruction","metadata","metadataAddress","publicKey","updateMetadataAccountArgsV2","signers","key","updateMetadataInstructionKey","verifyCollection","isDelegated","collectionAuthorityIsDelegated","collectionIsSized","undefined","currentCollection","newCollection","newUpdateAuthority","updateAuthorityAddress","primarySaleHappened","isMutable","data","name","symbol","uri","sellerFeeBasisPoints","length","uses"],"mappings":"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"}