import { createRemoveCreatorVerificationInstruction } from '@metaplex-foundation/mpl-token-metadata';
import { findMetadataPda } from './pdas.mjs';
import { toMintAddress } from './helpers.mjs';
import { useOperation } from '../../types/Operation.mjs';
import { TransactionBuilder } from '../../utils/TransactionBuilder.mjs';

// Clients
// -----------------

/** @internal */

function _unverifyNftCreatorClient(nftOrSft, creator, input = {}) {
  return this.metaplex.operations().getTask(unverifyNftCreatorOperation({ ...input,
    mintAddress: toMintAddress(nftOrSft),
    creator
  }));
}
/** @internal */

function _unverifyNftCreatorBuildersClient(input) {
  return unverifyNftCreatorBuilder(this.metaplex, input);
} // -----------------
// Operation
// -----------------

const Key = 'UnverifyNftCreatorOperation';
const unverifyNftCreatorOperation = useOperation(Key);
// -----------------
// Handler
// -----------------
const unverifyNftCreatorOperationHandler = {
  handle: async (operation, metaplex) => {
    return unverifyNftCreatorBuilder(metaplex, operation.input).sendAndConfirm(metaplex, operation.input.confirmOptions);
  }
}; // -----------------
// Builder
// -----------------

const unverifyNftCreatorBuilder = (metaplex, params) => {
  var _params$instructionKe;

  const {
    mintAddress,
    creator = metaplex.identity()
  } = params;
  return TransactionBuilder.make() // Verify the creator.
  .add({
    instruction: createRemoveCreatorVerificationInstruction({
      metadata: findMetadataPda(mintAddress),
      creator: creator.publicKey
    }),
    signers: [creator],
    key: (_params$instructionKe = params.instructionKey) !== null && _params$instructionKe !== void 0 ? _params$instructionKe : 'unverifyCreator'
  });
};

export { _unverifyNftCreatorBuildersClient, _unverifyNftCreatorClient, unverifyNftCreatorBuilder, unverifyNftCreatorOperation, unverifyNftCreatorOperationHandler };
//# sourceMappingURL=unverifyNftCreator.mjs.map
