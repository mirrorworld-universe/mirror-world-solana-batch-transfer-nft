{"version":3,"file":"createNft.mjs","sources":["../../../../src/plugins/nftModule/createNft.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport {\n  BigNumber,\n  CreatorInput,\n  Operation,\n  OperationHandler,\n  Signer,\n  token,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, Option, Task, TransactionBuilder } from '@/utils';\nimport {\n  createCreateMasterEditionV3Instruction,\n  Uses,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { assertNftWithToken, NftWithToken } from './Nft';\nimport type { NftBuildersClient } from './NftBuildersClient';\nimport type { NftClient } from './NftClient';\nimport { findMasterEditionV2Pda } from './pdas';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _createNftClient(\n  this: NftClient,\n  input: CreateNftInput\n): Task<CreateNftOutput & { nft: NftWithToken }> {\n  return new Task(async (scope) => {\n    const operation = createNftOperation(input);\n    const output = await this.metaplex.operations().execute(operation, scope);\n    scope.throwIfCanceled();\n    const nft = await this.findByMint(output.mintAddress, {\n      tokenAddress: output.tokenAddress,\n    }).run(scope);\n    assertNftWithToken(nft);\n    return { ...output, nft };\n  });\n}\n\n/** @internal */\nexport function _createNftBuildersClient(\n  this: NftBuildersClient,\n  input: CreateNftBuilderParams\n) {\n  return createNftBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateNftOperation' as const;\nexport const createNftOperation = useOperation<CreateNftOperation>(Key);\nexport type CreateNftOperation = Operation<\n  typeof Key,\n  CreateNftInput,\n  CreateNftOutput\n>;\n\nexport interface CreateNftInput {\n  // Accounts.\n  payer?: Signer; // Defaults to mx.identity().\n  updateAuthority?: Signer; // Defaults to mx.identity().\n  mintAuthority?: Signer; // Defaults to mx.identity(). Only necessary for existing mints.\n\n  // Mint Account.\n  useNewMint?: Signer; // Defaults to new generated Keypair.\n  useExistingMint?: PublicKey;\n\n  // Token Account.\n  tokenOwner?: PublicKey; // Defaults to mx.identity().publicKey.\n  tokenAddress?: PublicKey | Signer;\n\n  // Data.\n  uri: string;\n  name: string;\n  sellerFeeBasisPoints: number;\n  symbol?: string; // Defaults to an empty string.\n  creators?: CreatorInput[]; // Defaults to mx.identity() as a single Creator.\n  isMutable?: boolean; // Defaults to true.\n  maxSupply?: Option<BigNumber>; // Defaults to 0.\n  uses?: Option<Uses>; // Defaults to null.\n  isCollection?: boolean; // Defaults to false.\n  collection?: Option<PublicKey>; // Defaults to null.\n  collectionAuthority?: Option<Signer>; // Defaults to null.\n  collectionAuthorityIsDelegated?: boolean; // Defaults to false.\n  collectionIsSized?: boolean; // Defaults to true.\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface CreateNftOutput {\n  response: SendAndConfirmTransactionResponse;\n  mintAddress: PublicKey;\n  metadataAddress: PublicKey;\n  masterEditionAddress: PublicKey;\n  tokenAddress: PublicKey;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createNftOperationHandler: OperationHandler<CreateNftOperation> = {\n  handle: async (\n    operation: CreateNftOperation,\n    metaplex: Metaplex,\n    scope: DisposableScope\n  ) => {\n    const builder = await createNftBuilder(metaplex, operation.input);\n    scope.throwIfCanceled();\n    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateNftBuilderParams = Omit<CreateNftInput, 'confirmOptions'> & {\n  createMintAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenAccountInstructionKey?: string;\n  createTokenAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n  createMetadataInstructionKey?: string;\n  createMasterEditionInstructionKey?: string;\n};\n\nexport type CreateNftBuilderContext = Omit<CreateNftOutput, 'response'>;\n\nexport const createNftBuilder = async (\n  metaplex: Metaplex,\n  params: CreateNftBuilderParams\n): Promise<TransactionBuilder<CreateNftBuilderContext>> => {\n  const {\n    useNewMint = Keypair.generate(),\n    payer = metaplex.identity(),\n    updateAuthority = metaplex.identity(),\n    mintAuthority = metaplex.identity(),\n    tokenOwner = metaplex.identity().publicKey,\n  } = params;\n\n  const sftBuilder = await metaplex\n    .nfts()\n    .builders()\n    .createSft({\n      ...params,\n      payer,\n      updateAuthority,\n      mintAuthority,\n      freezeAuthority: mintAuthority.publicKey,\n      useNewMint,\n      tokenOwner,\n      tokenAmount: token(1),\n      decimals: 0,\n    });\n\n  const { mintAddress, metadataAddress, tokenAddress } =\n    sftBuilder.getContext();\n  const masterEditionAddress = findMasterEditionV2Pda(mintAddress);\n\n  return (\n    TransactionBuilder.make<CreateNftBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintAddress,\n        metadataAddress,\n        masterEditionAddress,\n        tokenAddress: tokenAddress as PublicKey,\n      })\n\n      // Create the mint, the token and the metadata.\n      .add(sftBuilder)\n\n      // Create master edition account (prevents further minting).\n      .add({\n        instruction: createCreateMasterEditionV3Instruction(\n          {\n            edition: masterEditionAddress,\n            mint: mintAddress,\n            updateAuthority: updateAuthority.publicKey,\n            mintAuthority: mintAuthority.publicKey,\n            payer: payer.publicKey,\n            metadata: metadataAddress,\n          },\n          {\n            createMasterEditionArgs: {\n              maxSupply: params.maxSupply === undefined ? 0 : params.maxSupply,\n            },\n          }\n        ),\n        signers: [payer, mintAuthority, updateAuthority],\n        key: params.createMasterEditionInstructionKey ?? 'createMasterEdition',\n      })\n  );\n};\n"],"names":["_createNftClient","input","Task","scope","operation","createNftOperation","output","metaplex","operations","execute","throwIfCanceled","nft","findByMint","mintAddress","tokenAddress","run","assertNftWithToken","_createNftBuildersClient","createNftBuilder","Key","useOperation","createNftOperationHandler","handle","builder","sendAndConfirm","confirmOptions","params","useNewMint","Keypair","generate","payer","identity","updateAuthority","mintAuthority","tokenOwner","publicKey","sftBuilder","nfts","builders","createSft","freezeAuthority","tokenAmount","token","decimals","metadataAddress","getContext","masterEditionAddress","findMasterEditionV2Pda","TransactionBuilder","make","setFeePayer","setContext","add","instruction","createCreateMasterEditionV3Instruction","edition","mint","metadata","createMasterEditionArgs","maxSupply","undefined","signers","key","createMasterEditionInstructionKey"],"mappings":"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"}