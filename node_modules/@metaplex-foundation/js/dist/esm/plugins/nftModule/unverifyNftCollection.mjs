import { createUnverifySizedCollectionItemInstruction, createUnverifyCollectionInstruction } from '@metaplex-foundation/mpl-token-metadata';
import { toMetadataAccount } from './accounts.mjs';
import { ParentCollectionMissingError } from './errors.mjs';
import { toMintAddress } from './helpers.mjs';
import { toMetadata } from './Metadata.mjs';
import { findMetadataPda, findMasterEditionV2Pda, findCollectionAuthorityRecordPda } from './pdas.mjs';
import { Task } from '../../utils/Task.mjs';
import { useOperation } from '../../types/Operation.mjs';
import { TransactionBuilder } from '../../utils/TransactionBuilder.mjs';

// Clients
// -----------------

/** @internal */

function _unverifyNftCollectionClient(nftOrSft, input = {}) {
  return new Task(async scope => {
    var _input$collectionMint;

    const mintAddress = toMintAddress(nftOrSft);
    const collectionFromNft = 'collection' in nftOrSft && nftOrSft.collection ? nftOrSft.collection.address : undefined;
    let collectionMintAddress = (_input$collectionMint = input.collectionMintAddress) !== null && _input$collectionMint !== void 0 ? _input$collectionMint : collectionFromNft;

    if (!('collection' in nftOrSft) && !collectionMintAddress) {
      const metadataAddress = findMetadataPda(mintAddress);
      const metadata = toMetadata(toMetadataAccount(await this.metaplex.rpc().getAccount(metadataAddress)));
      scope.throwIfCanceled();
      collectionMintAddress = metadata.collection ? metadata.collection.address : undefined;
    }

    if (!collectionMintAddress) {
      throw new ParentCollectionMissingError(mintAddress, 'unverifyCollection');
    }

    return this.metaplex.operations().execute(unverifyNftCollectionOperation({ ...input,
      mintAddress,
      collectionMintAddress
    }), scope);
  });
}
/** @internal */

function _unverifyNftCollectionBuildersClient(input) {
  return unverifyNftCollectionBuilder(this.metaplex, input);
} // -----------------
// Operation
// -----------------

const Key = 'UnverifyNftCollectionOperation';
const unverifyNftCollectionOperation = useOperation(Key);
// -----------------
// Handler
// -----------------
const unverifyNftCollectionOperationHandler = {
  handle: async (operation, metaplex) => {
    return unverifyNftCollectionBuilder(metaplex, operation.input).sendAndConfirm(metaplex, operation.input.confirmOptions);
  }
}; // -----------------
// Builder
// -----------------

const unverifyNftCollectionBuilder = (metaplex, params) => {
  var _params$instructionKe;

  const {
    mintAddress,
    collectionMintAddress,
    isSizedCollection = true,
    isDelegated = false,
    collectionAuthority = metaplex.identity(),
    payer = metaplex.identity()
  } = params;
  const accounts = {
    metadata: findMetadataPda(mintAddress),
    collectionAuthority: collectionAuthority.publicKey,
    payer: payer.publicKey,
    collectionMint: collectionMintAddress,
    collection: findMetadataPda(collectionMintAddress),
    collectionMasterEditionAccount: findMasterEditionV2Pda(collectionMintAddress),
    collectionAuthorityRecord: isDelegated ? findCollectionAuthorityRecordPda(collectionMintAddress, collectionAuthority.publicKey) : undefined
  };
  const instruction = isSizedCollection ? createUnverifySizedCollectionItemInstruction(accounts) : createUnverifyCollectionInstruction(accounts);
  return TransactionBuilder.make().setFeePayer(payer) // Unverify the collection.
  .add({
    instruction: instruction,
    signers: [payer, collectionAuthority],
    key: (_params$instructionKe = params.instructionKey) !== null && _params$instructionKe !== void 0 ? _params$instructionKe : 'unverifyCollection'
  });
};

export { _unverifyNftCollectionBuildersClient, _unverifyNftCollectionClient, unverifyNftCollectionBuilder, unverifyNftCollectionOperation, unverifyNftCollectionOperationHandler };
//# sourceMappingURL=unverifyNftCollection.mjs.map
