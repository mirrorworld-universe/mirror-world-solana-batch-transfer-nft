import { cusper } from '@metaplex-foundation/mpl-token-metadata';
import { approveNftCollectionAuthorityOperation, approveNftCollectionAuthorityOperationHandler } from './approveNftCollectionAuthority.mjs';
import { approveNftUseAuthorityOperation, approveNftUseAuthorityOperationHandler } from './approveNftUseAuthority.mjs';
import { createNftOperation, createNftOperationHandler } from './createNft.mjs';
import { createSftOperation, createSftOperationHandler } from './createSft.mjs';
import { deleteNftOperation, deleteNftOperationHandler } from './deleteNft.mjs';
import { findNftByMetadataOperation, findNftByMetadataOperationHandler } from './findNftByMetadata.mjs';
import { findNftByMintOperation, findNftByMintOperationHandler } from './findNftByMint.mjs';
import { findNftByTokenOperation, findNftByTokenOperationHandler } from './findNftByToken.mjs';
import { findNftsByCreatorOperation, findNftsByCreatorOperationHandler } from './findNftsByCreator.mjs';
import { findNftsByMintListOperation, findNftsByMintListOperationHandler } from './findNftsByMintList.mjs';
import { findNftsByOwnerOperation, findNftsByOwnerOperationHandler } from './findNftsByOwner.mjs';
import { findNftsByUpdateAuthorityOperation, findNftsByUpdateAuthorityOperationHandler } from './findNftsByUpdateAuthority.mjs';
import { freezeDelegatedNftOperation, freezeDelegatedNftOperationHandler } from './freezeDelegatedNft.mjs';
import { TokenMetadataGpaBuilder } from './gpaBuilders.mjs';
import { loadMetadataOperation, loadMetadataOperationHandler } from './loadMetadata.mjs';
import { migrateToSizedCollectionNftOperation, migrateToSizedCollectionNftOperationHandler } from './migrateToSizedCollectionNft.mjs';
import { NftClient } from './NftClient.mjs';
import { printNewEditionOperation, printNewEditionOperationHandler } from './printNewEdition.mjs';
import { TokenMetadataProgram } from './program.mjs';
import { revokeNftCollectionAuthorityOperation, revokeNftCollectionAuthorityOperationHandler } from './revokeNftCollectionAuthority.mjs';
import { revokeNftUseAuthorityOperation, revokeNftUseAuthorityOperationHandler } from './revokeNftUseAuthority.mjs';
import { thawDelegatedNftOperation, thawDelegatedNftOperationHandler } from './thawDelegatedNft.mjs';
import { unverifyNftCollectionOperation, unverifyNftCollectionOperationHandler } from './unverifyNftCollection.mjs';
import { unverifyNftCreatorOperation, unverifyNftCreatorOperationHandler } from './unverifyNftCreator.mjs';
import { updateNftOperation, updateNftOperationHandler } from './updateNft.mjs';
import { uploadMetadataOperation, uploadMetadataOperationHandler } from './uploadMetadata.mjs';
import { useNftOperation, useNftOperationHandler } from './useNft.mjs';
import { verifyNftCollectionOperation, verifyNftCollectionOperationHandler } from './verifyNftCollection.mjs';
import { verifyNftCreatorOperation, verifyNftCreatorOperationHandler } from './verifyNftCreator.mjs';

const nftModule = () => ({
  install(metaplex) {
    // Token Metadata Program.
    metaplex.programs().register({
      name: 'TokenMetadataProgram',
      address: TokenMetadataProgram.publicKey,
      errorResolver: error => cusper.errorFromProgramLogs(error.logs, false),
      gpaResolver: metaplex => new TokenMetadataGpaBuilder(metaplex, TokenMetadataProgram.publicKey)
    }); // Operations.

    const op = metaplex.operations();
    op.register(approveNftCollectionAuthorityOperation, approveNftCollectionAuthorityOperationHandler);
    op.register(approveNftUseAuthorityOperation, approveNftUseAuthorityOperationHandler);
    op.register(createNftOperation, createNftOperationHandler);
    op.register(createSftOperation, createSftOperationHandler);
    op.register(deleteNftOperation, deleteNftOperationHandler);
    op.register(findNftByMetadataOperation, findNftByMetadataOperationHandler);
    op.register(findNftByMintOperation, findNftByMintOperationHandler);
    op.register(findNftByTokenOperation, findNftByTokenOperationHandler);
    op.register(findNftsByCreatorOperation, findNftsByCreatorOperationHandler);
    op.register(findNftsByMintListOperation, findNftsByMintListOperationHandler);
    op.register(findNftsByOwnerOperation, findNftsByOwnerOperationHandler);
    op.register(findNftsByUpdateAuthorityOperation, findNftsByUpdateAuthorityOperationHandler);
    op.register(freezeDelegatedNftOperation, freezeDelegatedNftOperationHandler);
    op.register(loadMetadataOperation, loadMetadataOperationHandler);
    op.register(migrateToSizedCollectionNftOperation, migrateToSizedCollectionNftOperationHandler);
    op.register(printNewEditionOperation, printNewEditionOperationHandler);
    op.register(revokeNftCollectionAuthorityOperation, revokeNftCollectionAuthorityOperationHandler);
    op.register(revokeNftUseAuthorityOperation, revokeNftUseAuthorityOperationHandler);
    op.register(thawDelegatedNftOperation, thawDelegatedNftOperationHandler);
    op.register(unverifyNftCollectionOperation, unverifyNftCollectionOperationHandler);
    op.register(unverifyNftCreatorOperation, unverifyNftCreatorOperationHandler);
    op.register(updateNftOperation, updateNftOperationHandler);
    op.register(uploadMetadataOperation, uploadMetadataOperationHandler);
    op.register(useNftOperation, useNftOperationHandler);
    op.register(verifyNftCollectionOperation, verifyNftCollectionOperationHandler);
    op.register(verifyNftCreatorOperation, verifyNftCreatorOperationHandler);

    metaplex.nfts = function () {
      return new NftClient(this);
    };
  }

});

export { nftModule };
//# sourceMappingURL=plugin.mjs.map
