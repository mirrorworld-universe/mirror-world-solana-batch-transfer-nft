import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';
import { _approveNftCollectionAuthorityClient } from './approveNftCollectionAuthority.mjs';
import { _approveNftUseAuthorityClient } from './approveNftUseAuthority.mjs';
import { _createNftClient } from './createNft.mjs';
import { _createSftClient } from './createSft.mjs';
import { _deleteNftClient } from './deleteNft.mjs';
import { _findNftByMetadataClient } from './findNftByMetadata.mjs';
import { _findNftByMintClient, _refreshNftClient } from './findNftByMint.mjs';
import { _findNftByTokenClient } from './findNftByToken.mjs';
import { _findNftsByCreatorsClient } from './findNftsByCreator.mjs';
import { _findNftsByMintListClient } from './findNftsByMintList.mjs';
import { _findNftsByOwnerClient } from './findNftsByOwner.mjs';
import { _findNftsByUpdateAuthorityClient } from './findNftsByUpdateAuthority.mjs';
import { _freezeDelegatedNftClient } from './freezeDelegatedNft.mjs';
import { toMintAddress } from './helpers.mjs';
import { _loadMetadataClient } from './loadMetadata.mjs';
import { _migrateToSizedCollectionNftClient } from './migrateToSizedCollectionNft.mjs';
import { NftBuildersClient } from './NftBuildersClient.mjs';
import { _printNewEditionClient } from './printNewEdition.mjs';
import { _revokeNftCollectionAuthorityClient } from './revokeNftCollectionAuthority.mjs';
import { _revokeNftUseAuthorityClient } from './revokeNftUseAuthority.mjs';
import { _thawDelegatedNftClient } from './thawDelegatedNft.mjs';
import { _unverifyNftCollectionClient } from './unverifyNftCollection.mjs';
import { _unverifyNftCreatorClient } from './unverifyNftCreator.mjs';
import { _updateNftClient } from './updateNft.mjs';
import { _uploadMetadataClient } from './uploadMetadata.mjs';
import { _useNftClient } from './useNft.mjs';
import { _verifyNftCollectionClient } from './verifyNftCollection.mjs';
import { _verifyNftCreatorClient } from './verifyNftCreator.mjs';
import { token } from '../../types/Amount.mjs';

class NftClient {
  constructor(metaplex) {
    _defineProperty(this, "findByMint", _findNftByMintClient);

    _defineProperty(this, "findByMetadata", _findNftByMetadataClient);

    _defineProperty(this, "findByToken", _findNftByTokenClient);

    _defineProperty(this, "findAllByCreator", _findNftsByCreatorsClient);

    _defineProperty(this, "findAllByMintList", _findNftsByMintListClient);

    _defineProperty(this, "findAllByOwner", _findNftsByOwnerClient);

    _defineProperty(this, "findAllByUpdateAuthority", _findNftsByUpdateAuthorityClient);

    _defineProperty(this, "refresh", _refreshNftClient);

    _defineProperty(this, "load", _loadMetadataClient);

    _defineProperty(this, "create", _createNftClient);

    _defineProperty(this, "createSft", _createSftClient);

    _defineProperty(this, "printNewEdition", _printNewEditionClient);

    _defineProperty(this, "uploadMetadata", _uploadMetadataClient);

    _defineProperty(this, "update", _updateNftClient);

    _defineProperty(this, "delete", _deleteNftClient);

    _defineProperty(this, "use", _useNftClient);

    _defineProperty(this, "approveUseAuthority", _approveNftUseAuthorityClient);

    _defineProperty(this, "revokeUseAuthority", _revokeNftUseAuthorityClient);

    _defineProperty(this, "verifyCreator", _verifyNftCreatorClient);

    _defineProperty(this, "unverifyCreator", _unverifyNftCreatorClient);

    _defineProperty(this, "verifyCollection", _verifyNftCollectionClient);

    _defineProperty(this, "unverifyCollection", _unverifyNftCollectionClient);

    _defineProperty(this, "approveCollectionAuthority", _approveNftCollectionAuthorityClient);

    _defineProperty(this, "revokeCollectionAuthority", _revokeNftCollectionAuthorityClient);

    _defineProperty(this, "migrateToSizedCollection", _migrateToSizedCollectionNftClient);

    _defineProperty(this, "freezeDelegatedNft", _freezeDelegatedNftClient);

    _defineProperty(this, "thawDelegatedNft", _thawDelegatedNftClient);

    this.metaplex = metaplex;
  }

  builders() {
    return new NftBuildersClient(this.metaplex);
  } // Queries.


  // Syntactic sugar.
  send(nftOrSft, options) {
    return this.metaplex.tokens().send({
      mint: toMintAddress(nftOrSft),
      amount: token(1),
      ...options
    });
  }

  approveDelegateAuthority(nftOrSft, options) {
    return this.metaplex.tokens().approveDelegateAuthority({
      mintAddress: toMintAddress(nftOrSft),
      ...options
    });
  }

  revokeDelegateAuthority(nftOrSft, options) {
    return this.metaplex.tokens().revokeDelegateAuthority({
      mintAddress: toMintAddress(nftOrSft),
      ...options
    });
  }

}

export { NftClient };
//# sourceMappingURL=NftClient.mjs.map
