{"version":3,"file":"findNftByToken.mjs","sources":["../../../../src/plugins/nftModule/findNftByToken.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { Metaplex } from '@/Metaplex';\nimport { Operation, useOperation, OperationHandler } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { NftWithToken } from './Nft';\nimport { toTokenAccount } from '../tokenModule';\nimport { SftWithToken } from './Sft';\nimport type { NftClient } from './NftClient';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _findNftByTokenClient(\n  this: NftClient,\n  token: PublicKey,\n  options?: Omit<FindNftByTokenInput, 'token'>\n) {\n  return this.metaplex\n    .operations()\n    .getTask(findNftByTokenOperation({ token, ...options }));\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftByTokenOperation' as const;\nexport const findNftByTokenOperation =\n  useOperation<FindNftByTokenOperation>(Key);\nexport type FindNftByTokenOperation = Operation<\n  typeof Key,\n  FindNftByTokenInput,\n  FindNftByTokenOutput\n>;\n\nexport type FindNftByTokenInput = {\n  token: PublicKey;\n  loadJsonMetadata?: boolean;\n  commitment?: Commitment;\n};\n\nexport type FindNftByTokenOutput = NftWithToken | SftWithToken;\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findNftByTokenOperationHandler: OperationHandler<FindNftByTokenOperation> =\n  {\n    handle: async (\n      operation: FindNftByTokenOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<FindNftByTokenOutput> => {\n      const token = toTokenAccount(\n        await metaplex.rpc().getAccount(operation.input.token)\n      );\n      scope.throwIfCanceled();\n\n      const asset = await metaplex\n        .nfts()\n        .findByMint(token.data.mint, {\n          ...operation.input,\n          tokenAddress: operation.input.token,\n        })\n        .run(scope);\n\n      return asset as FindNftByTokenOutput;\n    },\n  };\n"],"names":["_findNftByTokenClient","token","options","metaplex","operations","getTask","findNftByTokenOperation","Key","useOperation","findNftByTokenOperationHandler","handle","operation","scope","toTokenAccount","rpc","getAccount","input","throwIfCanceled","asset","nfts","findByMint","data","mint","tokenAddress","run"],"mappings":";;;AASA;AACA;AACA;;AAEA;AACO,SAASA,qBAAT,CAELC,KAFK,EAGLC,OAHK,EAIL;EACA,OAAO,IAAA,CAAKC,QAAL,CACJC,UADI,GAEJC,OAFI,CAEIC,uBAAuB,CAAC;IAAEL,KAAF;IAAS,GAAGC,OAAAA;AAAZ,GAAD,CAF3B,CAAP,CAAA;AAGD;AAGD;AACA;;AAEA,MAAMK,GAAG,GAAG,yBAAZ,CAAA;MACaD,uBAAuB,GAClCE,YAAY,CAA0BD,GAA1B,EADP;AAgBP;AACA;AACA;AAEO,MAAME,8BAAyE,GACpF;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENR,QAFM,EAGNS,KAHM,KAI4B;AAClC,IAAA,MAAMX,KAAK,GAAGY,cAAc,CAC1B,MAAMV,QAAQ,CAACW,GAAT,EAAeC,CAAAA,UAAf,CAA0BJ,SAAS,CAACK,KAAV,CAAgBf,KAA1C,CADoB,CAA5B,CAAA;AAGAW,IAAAA,KAAK,CAACK,eAAN,EAAA,CAAA;AAEA,IAAA,MAAMC,KAAK,GAAG,MAAMf,QAAQ,CACzBgB,IADiB,GAEjBC,UAFiB,CAENnB,KAAK,CAACoB,IAAN,CAAWC,IAFL,EAEW,EAC3B,GAAGX,SAAS,CAACK,KADc;AAE3BO,MAAAA,YAAY,EAAEZ,SAAS,CAACK,KAAV,CAAgBf,KAAAA;AAFH,KAFX,CAMjBuB,CAAAA,GANiB,CAMbZ,KANa,CAApB,CAAA;AAQA,IAAA,OAAOM,KAAP,CAAA;AACD,GAAA;AApBH;;;;"}