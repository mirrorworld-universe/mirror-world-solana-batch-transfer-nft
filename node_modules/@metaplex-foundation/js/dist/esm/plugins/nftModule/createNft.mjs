import { createCreateMasterEditionV3Instruction } from '@metaplex-foundation/mpl-token-metadata';
import { Keypair } from '@solana/web3.js';
import { assertNftWithToken } from './Nft.mjs';
import { findMasterEditionV2Pda } from './pdas.mjs';
import { Task } from '../../utils/Task.mjs';
import { useOperation } from '../../types/Operation.mjs';
import { token } from '../../types/Amount.mjs';
import { TransactionBuilder } from '../../utils/TransactionBuilder.mjs';

// Clients
// -----------------

/** @internal */

function _createNftClient(input) {
  return new Task(async scope => {
    const operation = createNftOperation(input);
    const output = await this.metaplex.operations().execute(operation, scope);
    scope.throwIfCanceled();
    const nft = await this.findByMint(output.mintAddress, {
      tokenAddress: output.tokenAddress
    }).run(scope);
    assertNftWithToken(nft);
    return { ...output,
      nft
    };
  });
}
/** @internal */

function _createNftBuildersClient(input) {
  return createNftBuilder(this.metaplex, input);
} // -----------------
// Operation
// -----------------

const Key = 'CreateNftOperation';
const createNftOperation = useOperation(Key);
// -----------------
// Handler
// -----------------
const createNftOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const builder = await createNftBuilder(metaplex, operation.input);
    scope.throwIfCanceled();
    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);
  }
}; // -----------------
// Builder
// -----------------

const createNftBuilder = async (metaplex, params) => {
  var _params$createMasterE;

  const {
    useNewMint = Keypair.generate(),
    payer = metaplex.identity(),
    updateAuthority = metaplex.identity(),
    mintAuthority = metaplex.identity(),
    tokenOwner = metaplex.identity().publicKey
  } = params;
  const sftBuilder = await metaplex.nfts().builders().createSft({ ...params,
    payer,
    updateAuthority,
    mintAuthority,
    freezeAuthority: mintAuthority.publicKey,
    useNewMint,
    tokenOwner,
    tokenAmount: token(1),
    decimals: 0
  });
  const {
    mintAddress,
    metadataAddress,
    tokenAddress
  } = sftBuilder.getContext();
  const masterEditionAddress = findMasterEditionV2Pda(mintAddress);
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    mintAddress,
    metadataAddress,
    masterEditionAddress,
    tokenAddress: tokenAddress
  }) // Create the mint, the token and the metadata.
  .add(sftBuilder) // Create master edition account (prevents further minting).
  .add({
    instruction: createCreateMasterEditionV3Instruction({
      edition: masterEditionAddress,
      mint: mintAddress,
      updateAuthority: updateAuthority.publicKey,
      mintAuthority: mintAuthority.publicKey,
      payer: payer.publicKey,
      metadata: metadataAddress
    }, {
      createMasterEditionArgs: {
        maxSupply: params.maxSupply === undefined ? 0 : params.maxSupply
      }
    }),
    signers: [payer, mintAuthority, updateAuthority],
    key: (_params$createMasterE = params.createMasterEditionInstructionKey) !== null && _params$createMasterE !== void 0 ? _params$createMasterE : 'createMasterEdition'
  });
};

export { _createNftBuildersClient, _createNftClient, createNftBuilder, createNftOperation, createNftOperationHandler };
//# sourceMappingURL=createNft.mjs.map
