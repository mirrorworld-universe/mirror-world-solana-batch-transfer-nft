{"version":3,"file":"loadMetadata.mjs","sources":["../../../../src/plugins/nftModule/loadMetadata.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { Metaplex } from '@/Metaplex';\nimport { Operation, useOperation, OperationHandler } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { Metadata } from './Metadata';\nimport { Nft, NftWithToken } from './Nft';\nimport { Sft, SftWithToken } from './Sft';\nimport type { NftClient } from './NftClient';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _loadMetadataClient(\n  this: NftClient,\n  metadata: Metadata,\n  options?: Omit<LoadMetadataInput, 'metadata'>\n) {\n  return this.metaplex\n    .operations()\n    .getTask(loadMetadataOperation({ metadata, ...options }));\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadMetadataOperation' as const;\nexport const loadMetadataOperation = useOperation<LoadMetadataOperation>(Key);\nexport type LoadMetadataOperation = Operation<\n  typeof Key,\n  LoadMetadataInput,\n  LoadMetadataOutput\n>;\n\nexport type LoadMetadataInput = {\n  metadata: Metadata;\n  tokenAddress?: PublicKey;\n  tokenOwner?: PublicKey;\n  loadJsonMetadata?: boolean;\n  commitment?: Commitment;\n};\n\nexport type LoadMetadataOutput = Nft | Sft | NftWithToken | SftWithToken;\n\n// -----------------\n// Handler\n// -----------------\n\nexport const loadMetadataOperationHandler: OperationHandler<LoadMetadataOperation> =\n  {\n    handle: async (\n      operation: LoadMetadataOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<LoadMetadataOutput> => {\n      const { metadata, loadJsonMetadata = true } = operation.input;\n\n      let nftOrSft = await metaplex\n        .nfts()\n        .findByMint(metadata.mintAddress, {\n          ...operation.input,\n          loadJsonMetadata: !metadata.jsonLoaded && loadJsonMetadata,\n        })\n        .run(scope);\n\n      if (!nftOrSft.jsonLoaded && metadata.jsonLoaded) {\n        nftOrSft = { ...nftOrSft, json: metadata.json, jsonLoaded: true };\n      }\n\n      return nftOrSft;\n    },\n  };\n"],"names":["_loadMetadataClient","metadata","options","metaplex","operations","getTask","loadMetadataOperation","Key","useOperation","loadMetadataOperationHandler","handle","operation","scope","loadJsonMetadata","input","nftOrSft","nfts","findByMint","mintAddress","jsonLoaded","run","json"],"mappings":";;AASA;AACA;AACA;;AAEA;AACO,SAASA,mBAAT,CAELC,QAFK,EAGLC,OAHK,EAIL;EACA,OAAO,IAAA,CAAKC,QAAL,CACJC,UADI,GAEJC,OAFI,CAEIC,qBAAqB,CAAC;IAAEL,QAAF;IAAY,GAAGC,OAAAA;AAAf,GAAD,CAFzB,CAAP,CAAA;AAGD;AAGD;AACA;;AAEA,MAAMK,GAAG,GAAG,uBAAZ,CAAA;MACaD,qBAAqB,GAAGE,YAAY,CAAwBD,GAAxB,EAA1C;AAiBP;AACA;AACA;AAEO,MAAME,4BAAqE,GAChF;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENR,QAFM,EAGNS,KAHM,KAI0B;IAChC,MAAM;MAAEX,QAAF;AAAYY,MAAAA,gBAAgB,GAAG,IAAA;KAASF,GAAAA,SAAS,CAACG,KAAxD,CAAA;AAEA,IAAA,IAAIC,QAAQ,GAAG,MAAMZ,QAAQ,CAC1Ba,IADkB,EAElBC,CAAAA,UAFkB,CAEPhB,QAAQ,CAACiB,WAFF,EAEe,EAChC,GAAGP,SAAS,CAACG,KADmB;AAEhCD,MAAAA,gBAAgB,EAAE,CAACZ,QAAQ,CAACkB,UAAV,IAAwBN,gBAAAA;AAFV,KAFf,CAMlBO,CAAAA,GANkB,CAMdR,KANc,CAArB,CAAA;;IAQA,IAAI,CAACG,QAAQ,CAACI,UAAV,IAAwBlB,QAAQ,CAACkB,UAArC,EAAiD;MAC/CJ,QAAQ,GAAG,EAAE,GAAGA,QAAL;QAAeM,IAAI,EAAEpB,QAAQ,CAACoB,IAA9B;AAAoCF,QAAAA,UAAU,EAAE,IAAA;OAA3D,CAAA;AACD,KAAA;;AAED,IAAA,OAAOJ,QAAP,CAAA;AACD,GAAA;AArBH;;;;"}