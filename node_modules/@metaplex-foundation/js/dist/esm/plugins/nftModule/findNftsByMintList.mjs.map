{"version":3,"file":"findNftsByMintList.mjs","sources":["../../../../src/plugins/nftModule/findNftsByMintList.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { Metaplex } from '@/Metaplex';\nimport { toMetadataAccount } from './accounts';\nimport { findMetadataPda } from './pdas';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { DisposableScope, GmaBuilder } from '@/utils';\nimport { Nft } from './Nft';\nimport { Metadata, toMetadata } from './Metadata';\nimport { Sft } from './Sft';\nimport type { NftClient } from './NftClient';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _findNftsByMintListClient(\n  this: NftClient,\n  mints: PublicKey[],\n  options?: Omit<FindNftsByMintListInput, 'mints'>\n) {\n  return this.metaplex\n    .operations()\n    .getTask(findNftsByMintListOperation({ mints, ...options }));\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByMintListOperation' as const;\nexport const findNftsByMintListOperation =\n  useOperation<FindNftsByMintListOperation>(Key);\nexport type FindNftsByMintListOperation = Operation<\n  typeof Key,\n  FindNftsByMintListInput,\n  FindNftsByMintListOutput\n>;\n\nexport type FindNftsByMintListInput = {\n  mints: PublicKey[];\n  commitment?: Commitment;\n};\n\nexport type FindNftsByMintListOutput = (Metadata | Nft | Sft | null)[];\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findNftsByMintListOperationHandler: OperationHandler<FindNftsByMintListOperation> =\n  {\n    handle: async (\n      operation: FindNftsByMintListOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<FindNftsByMintListOutput> => {\n      const { mints, commitment } = operation.input;\n      const metadataPdas = mints.map((mint) => findMetadataPda(mint));\n      const metadataInfos = await GmaBuilder.make(metaplex, metadataPdas, {\n        commitment,\n      }).get();\n      scope.throwIfCanceled();\n\n      return metadataInfos.map<Metadata | null>((account) => {\n        if (!account.exists) {\n          return null;\n        }\n\n        try {\n          return toMetadata(toMetadataAccount(account));\n        } catch (error) {\n          return null;\n        }\n      });\n    },\n  };\n"],"names":["_findNftsByMintListClient","mints","options","metaplex","operations","getTask","findNftsByMintListOperation","Key","useOperation","findNftsByMintListOperationHandler","handle","operation","scope","commitment","input","metadataPdas","map","mint","findMetadataPda","metadataInfos","GmaBuilder","make","get","throwIfCanceled","account","exists","toMetadata","toMetadataAccount","error"],"mappings":";;;;;;AAWA;AACA;AACA;;AAEA;AACO,SAASA,yBAAT,CAELC,KAFK,EAGLC,OAHK,EAIL;EACA,OAAO,IAAA,CAAKC,QAAL,CACJC,UADI,GAEJC,OAFI,CAEIC,2BAA2B,CAAC;IAAEL,KAAF;IAAS,GAAGC,OAAAA;AAAZ,GAAD,CAF/B,CAAP,CAAA;AAGD;AAGD;AACA;;AAEA,MAAMK,GAAG,GAAG,6BAAZ,CAAA;MACaD,2BAA2B,GACtCE,YAAY,CAA8BD,GAA9B,EADP;AAeP;AACA;AACA;AAEO,MAAME,kCAAiF,GAC5F;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENR,QAFM,EAGNS,KAHM,KAIgC;IACtC,MAAM;MAAEX,KAAF;AAASY,MAAAA,UAAAA;KAAeF,GAAAA,SAAS,CAACG,KAAxC,CAAA;AACA,IAAA,MAAMC,YAAY,GAAGd,KAAK,CAACe,GAAN,CAAWC,IAAD,IAAUC,eAAe,CAACD,IAAD,CAAnC,CAArB,CAAA;IACA,MAAME,aAAa,GAAG,MAAMC,UAAU,CAACC,IAAX,CAAgBlB,QAAhB,EAA0BY,YAA1B,EAAwC;AAClEF,MAAAA,UAAAA;KAD0B,CAAA,CAEzBS,GAFyB,EAA5B,CAAA;AAGAV,IAAAA,KAAK,CAACW,eAAN,EAAA,CAAA;AAEA,IAAA,OAAOJ,aAAa,CAACH,GAAd,CAAoCQ,OAAD,IAAa;AACrD,MAAA,IAAI,CAACA,OAAO,CAACC,MAAb,EAAqB;AACnB,QAAA,OAAO,IAAP,CAAA;AACD,OAAA;;MAED,IAAI;AACF,QAAA,OAAOC,UAAU,CAACC,iBAAiB,CAACH,OAAD,CAAlB,CAAjB,CAAA;OADF,CAEE,OAAOI,KAAP,EAAc;AACd,QAAA,OAAO,IAAP,CAAA;AACD,OAAA;AACF,KAVM,CAAP,CAAA;AAWD,GAAA;AAxBH;;;;"}