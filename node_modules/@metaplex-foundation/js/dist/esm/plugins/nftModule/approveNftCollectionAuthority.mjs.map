{"version":3,"file":"approveNftCollectionAuthority.mjs","sources":["../../../../src/plugins/nftModule/approveNftCollectionAuthority.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createApproveCollectionAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey, SystemProgram } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { HasMintAddress, toMintAddress } from './helpers';\nimport type { NftBuildersClient } from './NftBuildersClient';\nimport type { NftClient } from './NftClient';\nimport { findCollectionAuthorityRecordPda, findMetadataPda } from './pdas';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _approveNftCollectionAuthorityClient(\n  this: NftClient,\n  nftOrSft: HasMintAddress,\n  collectionAuthority: PublicKey,\n  input: Omit<\n    ApproveNftCollectionAuthorityInput,\n    'mintAddress' | 'collectionAuthority'\n  > = {}\n) {\n  return this.metaplex.operations().getTask(\n    approveNftCollectionAuthorityOperation({\n      ...input,\n      mintAddress: toMintAddress(nftOrSft),\n      collectionAuthority,\n    })\n  );\n}\n\n/** @internal */\nexport function _approveNftCollectionAuthorityBuildersClient(\n  this: NftBuildersClient,\n  input: ApproveNftCollectionAuthorityBuilderParams\n) {\n  return approveNftCollectionAuthorityBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveNftCollectionAuthorityOperation' as const;\nexport const approveNftCollectionAuthorityOperation =\n  useOperation<ApproveNftCollectionAuthorityOperation>(Key);\nexport type ApproveNftCollectionAuthorityOperation = Operation<\n  typeof Key,\n  ApproveNftCollectionAuthorityInput,\n  ApproveNftCollectionAuthorityOutput\n>;\n\nexport interface ApproveNftCollectionAuthorityInput {\n  // Accounts.\n  mintAddress: PublicKey;\n  collectionAuthority: PublicKey;\n  updateAuthority?: Signer; // Defaults to mx.identity().\n  payer?: Signer; // Defaults to mx.identity().\n\n  // Programs.\n  systemProgram?: PublicKey;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface ApproveNftCollectionAuthorityOutput {\n  response: SendAndConfirmTransactionResponse;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const approveNftCollectionAuthorityOperationHandler: OperationHandler<ApproveNftCollectionAuthorityOperation> =\n  {\n    handle: async (\n      operation: ApproveNftCollectionAuthorityOperation,\n      metaplex: Metaplex\n    ): Promise<ApproveNftCollectionAuthorityOutput> => {\n      return approveNftCollectionAuthorityBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type ApproveNftCollectionAuthorityBuilderParams = Omit<\n  ApproveNftCollectionAuthorityInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport const approveNftCollectionAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: ApproveNftCollectionAuthorityBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    collectionAuthority,\n    updateAuthority = metaplex.identity(),\n    payer = metaplex.identity(),\n  } = params;\n  const metadata = findMetadataPda(mintAddress);\n  const collectionAuthorityRecord = findCollectionAuthorityRecordPda(\n    mintAddress,\n    collectionAuthority\n  );\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Approve the collection authority.\n      .add({\n        instruction: createApproveCollectionAuthorityInstruction({\n          collectionAuthorityRecord,\n          newCollectionAuthority: collectionAuthority,\n          updateAuthority: updateAuthority.publicKey,\n          payer: payer.publicKey,\n          metadata,\n          mint: mintAddress,\n          systemProgram: params.systemProgram ?? SystemProgram.programId,\n        }),\n        signers: [payer, updateAuthority],\n        key: params.instructionKey ?? 'approveCollectionAuthority',\n      })\n  );\n};\n"],"names":["_approveNftCollectionAuthorityClient","nftOrSft","collectionAuthority","input","metaplex","operations","getTask","approveNftCollectionAuthorityOperation","mintAddress","toMintAddress","_approveNftCollectionAuthorityBuildersClient","approveNftCollectionAuthorityBuilder","Key","useOperation","approveNftCollectionAuthorityOperationHandler","handle","operation","sendAndConfirm","confirmOptions","params","updateAuthority","identity","payer","metadata","findMetadataPda","collectionAuthorityRecord","findCollectionAuthorityRecordPda","TransactionBuilder","make","setFeePayer","add","instruction","createApproveCollectionAuthorityInstruction","newCollectionAuthority","publicKey","mint","systemProgram","SystemProgram","programId","signers","key","instructionKey"],"mappings":";;;;;;;AAYA;AACA;;AAEA;;AACO,SAASA,oCAAT,CAELC,QAFK,EAGLC,mBAHK,EAILC,KAGC,GAAG,EAPC,EAQL;EACA,OAAO,IAAA,CAAKC,QAAL,CAAcC,UAAd,EAAA,CAA2BC,OAA3B,CACLC,sCAAsC,CAAC,EACrC,GAAGJ,KADkC;AAErCK,IAAAA,WAAW,EAAEC,aAAa,CAACR,QAAD,CAFW;AAGrCC,IAAAA,mBAAAA;AAHqC,GAAD,CADjC,CAAP,CAAA;AAOD,CAAA;AAED;;AACO,SAASQ,4CAAT,CAELP,KAFK,EAGL;AACA,EAAA,OAAOQ,oCAAoC,CAAC,IAAA,CAAKP,QAAN,EAAgBD,KAAhB,CAA3C,CAAA;AACD;AAGD;AACA;;AAEA,MAAMS,GAAG,GAAG,wCAAZ,CAAA;MACaL,sCAAsC,GACjDM,YAAY,CAAyCD,GAAzC,EADP;AA0BP;AACA;AACA;AAEO,MAAME,6CAAuG,GAClH;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENZ,QAFM,KAG2C;AACjD,IAAA,OAAOO,oCAAoC,CACzCP,QADyC,EAEzCY,SAAS,CAACb,KAF+B,CAApC,CAGLc,cAHK,CAGUb,QAHV,EAGoBY,SAAS,CAACb,KAAV,CAAgBe,cAHpC,CAAP,CAAA;AAID,GAAA;AATH;AAaF;AACA;;MASaP,oCAAoC,GAAG,CAClDP,QADkD,EAElDe,MAFkD,KAG3B;AAAA,EAAA,IAAA,qBAAA,EAAA,qBAAA,CAAA;;EACvB,MAAM;IACJX,WADI;IAEJN,mBAFI;AAGJkB,IAAAA,eAAe,GAAGhB,QAAQ,CAACiB,QAAT,EAHd;IAIJC,KAAK,GAAGlB,QAAQ,CAACiB,QAAT,EAAA;AAJJ,GAAA,GAKFF,MALJ,CAAA;AAMA,EAAA,MAAMI,QAAQ,GAAGC,eAAe,CAAChB,WAAD,CAAhC,CAAA;AACA,EAAA,MAAMiB,yBAAyB,GAAGC,gCAAgC,CAChElB,WADgE,EAEhEN,mBAFgE,CAAlE,CAAA;AAKA,EAAA,OACEyB,kBAAkB,CAACC,IAAnB,GACGC,WADH,CACeP,KADf,CAGE;AAHF,GAIGQ,GAJH,CAIO;IACHC,WAAW,EAAEC,2CAA2C,CAAC;MACvDP,yBADuD;AAEvDQ,MAAAA,sBAAsB,EAAE/B,mBAF+B;MAGvDkB,eAAe,EAAEA,eAAe,CAACc,SAHsB;MAIvDZ,KAAK,EAAEA,KAAK,CAACY,SAJ0C;MAKvDX,QALuD;AAMvDY,MAAAA,IAAI,EAAE3B,WANiD;AAOvD4B,MAAAA,aAAa,2BAAEjB,MAAM,CAACiB,aAAT,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAA0BC,aAAa,CAACC,SAAAA;AAPE,KAAD,CADrD;AAUHC,IAAAA,OAAO,EAAE,CAACjB,KAAD,EAAQF,eAAR,CAVN;AAWHoB,IAAAA,GAAG,EAAErB,CAAAA,qBAAAA,GAAAA,MAAM,CAACsB,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,4BAAA;AAX3B,GAJP,CADF,CAAA;AAmBD;;;;"}