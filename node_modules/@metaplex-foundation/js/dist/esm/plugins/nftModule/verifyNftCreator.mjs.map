{"version":3,"file":"verifyNftCreator.mjs","sources":["../../../../src/plugins/nftModule/verifyNftCreator.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { createSignMetadataInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { useOperation, Operation, Signer, OperationHandler } from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findMetadataPda } from './pdas';\nimport type { NftClient } from './NftClient';\nimport type { NftBuildersClient } from './NftBuildersClient';\nimport { HasMintAddress, toMintAddress } from './helpers';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _verifyNftCreatorClient(\n  this: NftClient,\n  nftOrSft: HasMintAddress,\n  creator?: Signer,\n  input: Omit<VerifyNftCreatorInput, 'mintAddress' | 'creator'> = {}\n) {\n  return this.metaplex.operations().getTask(\n    verifyNftCreatorOperation({\n      ...input,\n      mintAddress: toMintAddress(nftOrSft),\n      creator,\n    })\n  );\n}\n\n/** @internal */\nexport function _verifyNftCreatorBuildersClient(\n  this: NftBuildersClient,\n  input: VerifyNftCreatorBuilderParams\n) {\n  return verifyNftCreatorBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'VerifyNftCreatorOperation' as const;\nexport const verifyNftCreatorOperation =\n  useOperation<VerifyNftCreatorOperation>(Key);\nexport type VerifyNftCreatorOperation = Operation<\n  typeof Key,\n  VerifyNftCreatorInput,\n  VerifyNftCreatorOutput\n>;\n\nexport interface VerifyNftCreatorInput {\n  // Accounts.\n  mintAddress: PublicKey;\n  creator?: Signer; // Defaults to mx.identity().\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface VerifyNftCreatorOutput {\n  response: SendAndConfirmTransactionResponse;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const verifyNftCreatorOperationHandler: OperationHandler<VerifyNftCreatorOperation> =\n  {\n    handle: async (\n      operation: VerifyNftCreatorOperation,\n      metaplex: Metaplex\n    ): Promise<VerifyNftCreatorOutput> => {\n      return verifyNftCreatorBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      );\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type VerifyNftCreatorBuilderParams = Omit<\n  VerifyNftCreatorInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport const verifyNftCreatorBuilder = (\n  metaplex: Metaplex,\n  params: VerifyNftCreatorBuilderParams\n): TransactionBuilder => {\n  const { mintAddress, creator = metaplex.identity() } = params;\n\n  return (\n    TransactionBuilder.make()\n\n      // Verify the creator.\n      .add({\n        instruction: createSignMetadataInstruction({\n          metadata: findMetadataPda(mintAddress),\n          creator: creator.publicKey,\n        }),\n        signers: [creator],\n        key: params.instructionKey ?? 'verifyCreator',\n      })\n  );\n};\n"],"names":["_verifyNftCreatorClient","nftOrSft","creator","input","metaplex","operations","getTask","verifyNftCreatorOperation","mintAddress","toMintAddress","_verifyNftCreatorBuildersClient","verifyNftCreatorBuilder","Key","useOperation","verifyNftCreatorOperationHandler","handle","operation","sendAndConfirm","confirmOptions","params","identity","TransactionBuilder","make","add","instruction","createSignMetadataInstruction","metadata","findMetadataPda","publicKey","signers","key","instructionKey"],"mappings":";;;;;;AAYA;AACA;;AAEA;;AACO,SAASA,uBAAT,CAELC,QAFK,EAGLC,OAHK,EAILC,KAA6D,GAAG,EAJ3D,EAKL;EACA,OAAO,IAAA,CAAKC,QAAL,CAAcC,UAAd,EAAA,CAA2BC,OAA3B,CACLC,yBAAyB,CAAC,EACxB,GAAGJ,KADqB;AAExBK,IAAAA,WAAW,EAAEC,aAAa,CAACR,QAAD,CAFF;AAGxBC,IAAAA,OAAAA;AAHwB,GAAD,CADpB,CAAP,CAAA;AAOD,CAAA;AAED;;AACO,SAASQ,+BAAT,CAELP,KAFK,EAGL;AACA,EAAA,OAAOQ,uBAAuB,CAAC,IAAA,CAAKP,QAAN,EAAgBD,KAAhB,CAA9B,CAAA;AACD;AAGD;AACA;;AAEA,MAAMS,GAAG,GAAG,2BAAZ,CAAA;MACaL,yBAAyB,GACpCM,YAAY,CAA4BD,GAA5B,EADP;AAqBP;AACA;AACA;AAEO,MAAME,gCAA6E,GACxF;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENZ,QAFM,KAG8B;AACpC,IAAA,OAAOO,uBAAuB,CAACP,QAAD,EAAWY,SAAS,CAACb,KAArB,CAAvB,CAAmDc,cAAnD,CACLb,QADK,EAELY,SAAS,CAACb,KAAV,CAAgBe,cAFX,CAAP,CAAA;AAID,GAAA;AATH;AAaF;AACA;;MASaP,uBAAuB,GAAG,CACrCP,QADqC,EAErCe,MAFqC,KAGd;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IAAEX,WAAF;IAAeN,OAAO,GAAGE,QAAQ,CAACgB,QAAT,EAAA;AAAzB,GAAA,GAAiDD,MAAvD,CAAA;EAEA,OACEE,kBAAkB,CAACC,IAAnB,EAEE;AAFF,GAGGC,GAHH,CAGO;IACHC,WAAW,EAAEC,6BAA6B,CAAC;AACzCC,MAAAA,QAAQ,EAAEC,eAAe,CAACnB,WAAD,CADgB;MAEzCN,OAAO,EAAEA,OAAO,CAAC0B,SAAAA;AAFwB,KAAD,CADvC;IAKHC,OAAO,EAAE,CAAC3B,OAAD,CALN;AAMH4B,IAAAA,GAAG,EAAEX,CAAAA,qBAAAA,GAAAA,MAAM,CAACY,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,eAAA;AAN3B,GAHP,CADF,CAAA;AAaD;;;;"}