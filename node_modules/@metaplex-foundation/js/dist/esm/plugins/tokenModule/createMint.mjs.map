{"version":3,"file":"createMint.mjs","sources":["../../../../src/plugins/tokenModule/createMint.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { DisposableScope, Option, Task, TransactionBuilder } from '@/utils';\nimport { createInitializeMintInstruction, MINT_SIZE } from '@solana/spl-token';\nimport { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { Mint } from './Mint';\nimport { TokenProgram } from './program';\nimport type { TokenBuildersClient } from './TokenBuildersClient';\nimport type { TokenClient } from './TokenClient';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _createMintClient(\n  this: TokenClient,\n  input: CreateMintInput = {}\n): Task<CreateMintOutput & { mint: Mint }> {\n  return new Task(async (scope) => {\n    const operation = createMintOperation(input);\n    const output = await this.metaplex.operations().execute(operation, scope);\n    scope.throwIfCanceled();\n    const mint = await this.findMintByAddress(output.mintSigner.publicKey).run(\n      scope\n    );\n    return { ...output, mint };\n  });\n}\n\n/** @internal */\nexport function _createMintBuildersClient(\n  this: TokenBuildersClient,\n  input: CreateMintBuilderParams\n) {\n  return createMintBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateMintOperation' as const;\nexport const createMintOperation = useOperation<CreateMintOperation>(Key);\nexport type CreateMintOperation = Operation<\n  typeof Key,\n  CreateMintInput,\n  CreateMintOutput\n>;\n\nexport type CreateMintInput = {\n  decimals?: number; // Defaults to 0 decimals.\n  mint?: Signer; // Defaults to new generated Keypair.\n  payer?: Signer; // Defaults to mx.identity().\n  mintAuthority?: PublicKey; // Defaults to mx.identity().\n  freezeAuthority?: Option<PublicKey>; // Defaults to mintAuthority.\n  tokenProgram?: PublicKey; // Defaults to System Program.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateMintOutput = {\n  response: SendAndConfirmTransactionResponse;\n  mintSigner: Signer;\n};\n\nexport const createMintOperationHandler: OperationHandler<CreateMintOperation> =\n  {\n    async handle(\n      operation: CreateMintOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateMintOutput> {\n      const builder = await createMintBuilder(metaplex, operation.input);\n      scope.throwIfCanceled();\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateMintBuilderParams = Omit<\n  CreateMintInput,\n  'confirmOptions'\n> & {\n  createAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n};\n\nexport type CreateMintBuilderContext = Omit<CreateMintOutput, 'response'>;\n\nexport const createMintBuilder = async (\n  metaplex: Metaplex,\n  params: CreateMintBuilderParams\n): Promise<TransactionBuilder<CreateMintBuilderContext>> => {\n  const {\n    decimals = 0,\n    mint = Keypair.generate(),\n    payer = metaplex.identity(),\n    mintAuthority = metaplex.identity().publicKey,\n    freezeAuthority = mintAuthority,\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  return (\n    TransactionBuilder.make<CreateMintBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({ mintSigner: mint })\n\n      // Create an empty account for the mint.\n      .add(\n        await metaplex\n          .system()\n          .builders()\n          .createAccount({\n            payer,\n            newAccount: mint,\n            space: MINT_SIZE,\n            program: tokenProgram,\n            instructionKey:\n              params.createAccountInstructionKey ?? 'createAccount',\n          })\n      )\n\n      // Initialize the mint.\n      .add({\n        instruction: createInitializeMintInstruction(\n          mint.publicKey,\n          decimals,\n          mintAuthority,\n          freezeAuthority,\n          tokenProgram\n        ),\n        signers: [mint],\n        key: params.initializeMintInstructionKey ?? 'initializeMint',\n      })\n  );\n};\n"],"names":["_createMintClient","input","Task","scope","operation","createMintOperation","output","metaplex","operations","execute","throwIfCanceled","mint","findMintByAddress","mintSigner","publicKey","run","_createMintBuildersClient","createMintBuilder","Key","useOperation","createMintOperationHandler","handle","builder","sendAndConfirm","confirmOptions","params","decimals","Keypair","generate","payer","identity","mintAuthority","freezeAuthority","tokenProgram","TokenProgram","TransactionBuilder","make","setFeePayer","setContext","add","system","builders","createAccount","newAccount","space","MINT_SIZE","program","instructionKey","createAccountInstructionKey","instruction","createInitializeMintInstruction","signers","key","initializeMintInstructionKey"],"mappings":"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"}