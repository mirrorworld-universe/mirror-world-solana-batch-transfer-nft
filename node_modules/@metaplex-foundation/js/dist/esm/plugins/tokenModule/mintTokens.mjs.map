{"version":3,"file":"mintTokens.mjs","sources":["../../../../src/plugins/tokenModule/mintTokens.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { createMintToInstruction } from '@solana/spl-token';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { isMint, Mint } from './Mint';\nimport { TokenProgram } from './program';\nimport { findAssociatedTokenAccountPda } from './pdas';\nimport type { TokenClient } from './TokenClient';\nimport type { TokenBuildersClient } from './TokenBuildersClient';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _mintTokensClient(this: TokenClient, input: MintTokensInput) {\n  return this.metaplex.operations().getTask(mintTokensOperation(input));\n}\n\n/** @internal */\nexport function _mintTokensBuildersClient(\n  this: TokenBuildersClient,\n  input: MintTokensBuilderParams\n) {\n  return mintTokensBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MintTokensOperation' as const;\nexport const mintTokensOperation = useOperation<MintTokensOperation>(Key);\nexport type MintTokensOperation = Operation<\n  typeof Key,\n  MintTokensInput,\n  MintTokensOutput\n>;\n\nexport type MintTokensInput = {\n  mint: PublicKey | Mint;\n  amount: SplTokenAmount;\n  toOwner?: PublicKey; // Defaults to mx.identity().\n  toToken?: PublicKey | Signer; // Defaults to associated account.\n  mintAuthority?: PublicKey | Signer; // Defaults to mx.identity().\n  multiSigners?: KeypairSigner[]; // Defaults to [].\n  payer?: Signer; // Only used to create missing token accounts. Defaults to mx.identity().\n  tokenProgram?: PublicKey; // Defaults to Token Program.\n  associatedTokenProgram?: PublicKey; // Defaults to Associated Token Program.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type MintTokensOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const mintTokensOperationHandler: OperationHandler<MintTokensOperation> =\n  {\n    async handle(\n      operation: MintTokensOperation,\n      metaplex: Metaplex\n    ): Promise<MintTokensOutput> {\n      const builder = await mintTokensBuilder(metaplex, operation.input);\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type MintTokensBuilderParams = Omit<\n  MintTokensInput,\n  'confirmOptions'\n> & {\n  toTokenExists?: boolean; // Defaults to false.\n  createAssociatedTokenAccountInstructionKey?: string;\n  createAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n};\n\nexport const mintTokensBuilder = async (\n  metaplex: Metaplex,\n  params: MintTokensBuilderParams\n): Promise<TransactionBuilder> => {\n  const {\n    mint,\n    amount,\n    toOwner = metaplex.identity().publicKey,\n    toToken,\n    mintAuthority = metaplex.identity(),\n    multiSigners = [],\n    payer = metaplex.identity(),\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  const [mintAuthorityPublicKey, signers] = isSigner(mintAuthority)\n    ? [mintAuthority.publicKey, [mintAuthority]]\n    : [mintAuthority, multiSigners];\n\n  const mintAddress = isMint(mint) ? mint.address : mint;\n  const destination =\n    toToken ?? findAssociatedTokenAccountPda(mintAddress, toOwner);\n\n  return (\n    TransactionBuilder.make()\n\n      // Create token account if missing.\n      .add(\n        !(params.toTokenExists ?? false)\n          ? await metaplex\n              .tokens()\n              .builders()\n              .createTokenIfMissing({\n                ...params,\n                mint: mintAddress,\n                owner: toOwner,\n                token: toToken,\n                payer,\n                tokenVariable: 'toToken',\n              })\n          : TransactionBuilder.make()\n      )\n\n      // Mint tokens.\n      .add({\n        instruction: createMintToInstruction(\n          mintAddress,\n          toPublicKey(destination),\n          mintAuthorityPublicKey,\n          amount.basisPoints.toNumber(),\n          multiSigners,\n          tokenProgram\n        ),\n        signers,\n        key: params.mintTokensInstructionKey ?? 'mintTokens',\n      })\n  );\n};\n"],"names":["_mintTokensClient","input","metaplex","operations","getTask","mintTokensOperation","_mintTokensBuildersClient","mintTokensBuilder","Key","useOperation","mintTokensOperationHandler","handle","operation","builder","sendAndConfirm","confirmOptions","params","mint","amount","toOwner","identity","publicKey","toToken","mintAuthority","multiSigners","payer","tokenProgram","TokenProgram","mintAuthorityPublicKey","signers","isSigner","mintAddress","isMint","address","destination","findAssociatedTokenAccountPda","TransactionBuilder","make","add","toTokenExists","tokens","builders","createTokenIfMissing","owner","token","tokenVariable","instruction","createMintToInstruction","toPublicKey","basisPoints","toNumber","key","mintTokensInstructionKey"],"mappings":"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"}