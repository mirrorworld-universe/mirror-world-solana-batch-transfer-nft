{"version":3,"file":"createToken.mjs","sources":["../../../../src/plugins/tokenModule/createToken.ts"],"sourcesContent":["import { ExpectedSignerError } from '@/errors';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, Task, TransactionBuilder } from '@/utils';\nimport {\n  ACCOUNT_SIZE,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  createAssociatedTokenAccountInstruction,\n  createInitializeAccountInstruction,\n} from '@solana/spl-token';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findAssociatedTokenAccountPda } from './pdas';\nimport { TokenProgram } from './program';\nimport { Token } from './Token';\nimport type { TokenBuildersClient } from './TokenBuildersClient';\nimport type { TokenClient } from './TokenClient';\n\n// -----------------\n// Clients\n// -----------------\n\n/** @internal */\nexport function _createTokenClient(\n  this: TokenClient,\n  input: CreateTokenInput\n): Task<CreateTokenOutput & { token: Token }> {\n  return new Task(async (scope) => {\n    const operation = createTokenOperation(input);\n    const output = await this.metaplex.operations().execute(operation, scope);\n    scope.throwIfCanceled();\n    const token = await this.findTokenByAddress(output.tokenAddress).run(scope);\n    return { ...output, token };\n  });\n}\n\n/** @internal */\nexport function _createTokenBuildersClient(\n  this: TokenBuildersClient,\n  input: CreateTokenBuilderParams\n) {\n  return createTokenBuilder(this.metaplex, input);\n}\n\n/** @internal */\nexport function _createTokenIfMissingBuildersClient(\n  this: TokenBuildersClient,\n  input: CreateTokenIfMissingBuilderParams\n) {\n  return createTokenIfMissingBuilder(this.metaplex, input);\n}\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateTokenOperation' as const;\nexport const createTokenOperation = useOperation<CreateTokenOperation>(Key);\nexport type CreateTokenOperation = Operation<\n  typeof Key,\n  CreateTokenInput,\n  CreateTokenOutput\n>;\n\nexport type CreateTokenInput = {\n  mint: PublicKey;\n  owner?: PublicKey; // Defaults to mx.identity().\n  token?: Signer; // Defaults to creating an associated token address instead.\n  payer?: Signer; // Defaults to mx.identity().\n  tokenProgram?: PublicKey; // Defaults to System Program.\n  associatedTokenProgram?: PublicKey; // Defaults to Associated Token Program.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateTokenOutput = {\n  response: SendAndConfirmTransactionResponse;\n  tokenAddress: PublicKey;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createTokenOperationHandler: OperationHandler<CreateTokenOperation> =\n  {\n    async handle(\n      operation: CreateTokenOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateTokenOutput> {\n      const builder = await createTokenBuilder(metaplex, operation.input);\n      scope.throwIfCanceled();\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateTokenBuilderParams = Omit<\n  CreateTokenInput,\n  'confirmOptions'\n> & {\n  createAssociatedTokenAccountInstructionKey?: string;\n  createAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n};\n\nexport type CreateTokenBuilderContext = Omit<CreateTokenOutput, 'response'>;\n\nexport const createTokenBuilder = async (\n  metaplex: Metaplex,\n  params: CreateTokenBuilderParams\n): Promise<TransactionBuilder<CreateTokenBuilderContext>> => {\n  const {\n    mint,\n    owner = metaplex.identity().publicKey,\n    token,\n    payer = metaplex.identity(),\n    tokenProgram = TokenProgram.publicKey,\n    associatedTokenProgram = ASSOCIATED_TOKEN_PROGRAM_ID,\n  } = params;\n\n  const isAssociatedToken = token === undefined;\n  const builder =\n    TransactionBuilder.make<CreateTokenBuilderContext>().setFeePayer(payer);\n\n  if (isAssociatedToken) {\n    const associatedTokenAddress = findAssociatedTokenAccountPda(\n      mint,\n      owner,\n      tokenProgram,\n      associatedTokenProgram\n    );\n\n    return (\n      builder\n        .setContext({ tokenAddress: associatedTokenAddress })\n\n        // Create an associated token account.\n        .add({\n          instruction: createAssociatedTokenAccountInstruction(\n            payer.publicKey,\n            associatedTokenAddress,\n            owner,\n            mint,\n            tokenProgram,\n            associatedTokenProgram\n          ),\n          signers: [payer],\n          key:\n            params.createAssociatedTokenAccountInstructionKey ??\n            'createAssociatedTokenAccount',\n        })\n    );\n  }\n\n  return (\n    builder\n      .setFeePayer(payer)\n      .setContext({ tokenAddress: token.publicKey })\n\n      // Create an empty account for the Token.\n      .add(\n        await metaplex\n          .system()\n          .builders()\n          .createAccount({\n            payer,\n            newAccount: token,\n            space: ACCOUNT_SIZE,\n            program: tokenProgram,\n            instructionKey:\n              params.createAccountInstructionKey ?? 'createAccount',\n          })\n      )\n\n      // Initialize the Token.\n      .add({\n        instruction: createInitializeAccountInstruction(\n          token.publicKey,\n          mint,\n          owner,\n          tokenProgram\n        ),\n        signers: [token],\n        key: params.initializeTokenInstructionKey ?? 'initializeToken',\n      })\n  );\n};\n\nexport type CreateTokenIfMissingBuilderParams = Omit<\n  CreateTokenBuilderParams,\n  'token'\n> & {\n  token?: PublicKey | Signer;\n  tokenVariable?: string;\n};\n\nexport const createTokenIfMissingBuilder = async (\n  metaplex: Metaplex,\n  params: CreateTokenIfMissingBuilderParams\n): Promise<TransactionBuilder<CreateTokenBuilderContext>> => {\n  const {\n    mint,\n    owner = metaplex.identity().publicKey,\n    token,\n    payer = metaplex.identity(),\n    tokenVariable = 'token',\n  } = params;\n\n  const destination = token ?? findAssociatedTokenAccountPda(mint, owner);\n  const destinationAddress = toPublicKey(destination);\n  const destinationAccount = await metaplex\n    .rpc()\n    .getAccount(destinationAddress);\n\n  const builder = TransactionBuilder.make<CreateTokenBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({ tokenAddress: destinationAddress });\n\n  if (destinationAccount.exists) {\n    return builder;\n  }\n\n  // When creating a token account, ensure it is passed as a Signer.\n  if (token && !isSigner(token)) {\n    throw new ExpectedSignerError(tokenVariable, 'PublicKey', {\n      problemSuffix:\n        `The provided \"${tokenVariable}\" account ` +\n        `at address [${destinationAddress}] does not exist. ` +\n        `Therefore, it needs to be created and passed as a Signer.`,\n      solution:\n        `If you want to create the \"${tokenVariable}\" account, then please pass it as a Signer. ` +\n        `Alternatively, you can pass the owner account as a PublicKey instead to ` +\n        `use (or create) an associated token account.`,\n    });\n  }\n\n  return builder.add(\n    await metaplex\n      .tokens()\n      .builders()\n      .createToken({\n        ...params,\n        mint,\n        owner,\n        token,\n        payer,\n      })\n  );\n};\n"],"names":["_createTokenClient","input","Task","scope","operation","createTokenOperation","output","metaplex","operations","execute","throwIfCanceled","token","findTokenByAddress","tokenAddress","run","_createTokenBuildersClient","createTokenBuilder","_createTokenIfMissingBuildersClient","createTokenIfMissingBuilder","Key","useOperation","createTokenOperationHandler","handle","builder","sendAndConfirm","confirmOptions","params","mint","owner","identity","publicKey","payer","tokenProgram","TokenProgram","associatedTokenProgram","ASSOCIATED_TOKEN_PROGRAM_ID","isAssociatedToken","undefined","TransactionBuilder","make","setFeePayer","associatedTokenAddress","findAssociatedTokenAccountPda","setContext","add","instruction","createAssociatedTokenAccountInstruction","signers","key","createAssociatedTokenAccountInstructionKey","system","builders","createAccount","newAccount","space","ACCOUNT_SIZE","program","instructionKey","createAccountInstructionKey","createInitializeAccountInstruction","initializeTokenInstructionKey","tokenVariable","destination","destinationAddress","toPublicKey","destinationAccount","rpc","getAccount","exists","isSigner","ExpectedSignerError","problemSuffix","solution","tokens","createToken"],"mappings":"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"}