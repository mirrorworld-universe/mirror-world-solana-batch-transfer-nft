import { createTransferCheckedInstruction } from '@solana/spl-token';
import { isMint } from './Mint.mjs';
import { findAssociatedTokenAccountPda } from './pdas.mjs';
import { TokenProgram } from './program.mjs';
import { useOperation } from '../../types/Operation.mjs';
import { isSigner } from '../../types/Signer.mjs';
import { TransactionBuilder } from '../../utils/TransactionBuilder.mjs';
import { toPublicKey } from '../../types/PublicKey.mjs';

// -----------------
// Clients
// -----------------

/** @internal */
function _sendTokensClient(input) {
  return this.metaplex.operations().getTask(sendTokensOperation(input));
}
/** @internal */

function _sendTokensBuildersClient(input) {
  return sendTokensBuilder(this.metaplex, input);
} // -----------------
// Operation
// -----------------

const Key = 'SendTokensOperation';
const sendTokensOperation = useOperation(Key);
// -----------------
// Handler
// -----------------
const sendTokensOperationHandler = {
  async handle(operation, metaplex) {
    const builder = await sendTokensBuilder(metaplex, operation.input);
    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);
  }

}; // -----------------
// Builder
// -----------------

const sendTokensBuilder = async (metaplex, params) => {
  var _params$toTokenExists, _params$transferToken;

  const {
    mint,
    amount,
    toOwner = metaplex.identity().publicKey,
    toToken,
    fromOwner = metaplex.identity(),
    fromToken,
    fromMultiSigners = [],
    delegateAuthority,
    payer = metaplex.identity(),
    tokenProgram = TokenProgram.publicKey
  } = params;
  const [fromOwnerPublicKey, signers] = isSigner(fromOwner) ? [fromOwner.publicKey, [fromOwner]] : [fromOwner, [delegateAuthority, ...fromMultiSigners].filter(isSigner)];
  const mintAddress = isMint(mint) ? mint.address : mint;
  const decimals = isMint(mint) ? mint.decimals : amount.currency.decimals;
  const source = fromToken !== null && fromToken !== void 0 ? fromToken : findAssociatedTokenAccountPda(mintAddress, fromOwnerPublicKey);
  const destination = toToken !== null && toToken !== void 0 ? toToken : findAssociatedTokenAccountPda(mintAddress, toOwner);
  let createTokenIfMissingBuilder = TransactionBuilder.make();

  if (!((_params$toTokenExists = params.toTokenExists) !== null && _params$toTokenExists !== void 0 ? _params$toTokenExists : false)) {
    createTokenIfMissingBuilder = await metaplex.tokens().builders().createTokenIfMissing({ ...params,
      mint: mintAddress,
      owner: toOwner,
      token: toToken,
      payer,
      tokenVariable: 'toToken'
    });
  }

  return TransactionBuilder.make() // Create token account if missing.
  .add(createTokenIfMissingBuilder) // Transfer tokens.
  .add({
    instruction: createTransferCheckedInstruction(source, mintAddress, toPublicKey(destination), delegateAuthority ? delegateAuthority.publicKey : fromOwnerPublicKey, amount.basisPoints.toNumber(), decimals, fromMultiSigners, tokenProgram),
    signers,
    key: (_params$transferToken = params.transferTokensInstructionKey) !== null && _params$transferToken !== void 0 ? _params$transferToken : 'transferTokens'
  });
};

export { _sendTokensBuildersClient, _sendTokensClient, sendTokensBuilder, sendTokensOperation, sendTokensOperationHandler };
//# sourceMappingURL=sendTokens.mjs.map
