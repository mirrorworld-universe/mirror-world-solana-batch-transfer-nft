import { createMintToInstruction } from '@solana/spl-token';
import { isMint } from './Mint.mjs';
import { TokenProgram } from './program.mjs';
import { findAssociatedTokenAccountPda } from './pdas.mjs';
import { useOperation } from '../../types/Operation.mjs';
import { isSigner } from '../../types/Signer.mjs';
import { TransactionBuilder } from '../../utils/TransactionBuilder.mjs';
import { toPublicKey } from '../../types/PublicKey.mjs';

// -----------------
// Clients
// -----------------

/** @internal */
function _mintTokensClient(input) {
  return this.metaplex.operations().getTask(mintTokensOperation(input));
}
/** @internal */

function _mintTokensBuildersClient(input) {
  return mintTokensBuilder(this.metaplex, input);
} // -----------------
// Operation
// -----------------

const Key = 'MintTokensOperation';
const mintTokensOperation = useOperation(Key);
// -----------------
// Handler
// -----------------
const mintTokensOperationHandler = {
  async handle(operation, metaplex) {
    const builder = await mintTokensBuilder(metaplex, operation.input);
    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);
  }

}; // -----------------
// Builder
// -----------------

const mintTokensBuilder = async (metaplex, params) => {
  var _params$toTokenExists, _params$mintTokensIns;

  const {
    mint,
    amount,
    toOwner = metaplex.identity().publicKey,
    toToken,
    mintAuthority = metaplex.identity(),
    multiSigners = [],
    payer = metaplex.identity(),
    tokenProgram = TokenProgram.publicKey
  } = params;
  const [mintAuthorityPublicKey, signers] = isSigner(mintAuthority) ? [mintAuthority.publicKey, [mintAuthority]] : [mintAuthority, multiSigners];
  const mintAddress = isMint(mint) ? mint.address : mint;
  const destination = toToken !== null && toToken !== void 0 ? toToken : findAssociatedTokenAccountPda(mintAddress, toOwner);
  return TransactionBuilder.make() // Create token account if missing.
  .add(!((_params$toTokenExists = params.toTokenExists) !== null && _params$toTokenExists !== void 0 ? _params$toTokenExists : false) ? await metaplex.tokens().builders().createTokenIfMissing({ ...params,
    mint: mintAddress,
    owner: toOwner,
    token: toToken,
    payer,
    tokenVariable: 'toToken'
  }) : TransactionBuilder.make()) // Mint tokens.
  .add({
    instruction: createMintToInstruction(mintAddress, toPublicKey(destination), mintAuthorityPublicKey, amount.basisPoints.toNumber(), multiSigners, tokenProgram),
    signers,
    key: (_params$mintTokensIns = params.mintTokensInstructionKey) !== null && _params$mintTokensIns !== void 0 ? _params$mintTokensIns : 'mintTokens'
  });
};

export { _mintTokensBuildersClient, _mintTokensClient, mintTokensBuilder, mintTokensOperation, mintTokensOperationHandler };
//# sourceMappingURL=mintTokens.mjs.map
